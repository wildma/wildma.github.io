<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>全部文章</title>
      <link href="/blog/f1e2edad.html"/>
      <url>/blog/f1e2edad.html</url>
      
        <content type="html"><![CDATA[<h2 id="2019"><a href="#2019" class="headerlink" title="2019"></a>2019</h2><ul><li>24 Oct 2019 » <a href="https://wildma.github.io/blog/df2af467.html">主流开源框架（四）Retrofit 使用详解</a></li><li>21 Oct 2019 » <a href="https://wildma.github.io/blog/d8540f1f.html">主流开源框架（三）OkHttp 源码解析</a></li><li>17 Aug 2019 » <a href="https://wildma.github.io/blog/6d0008b.html">Android 主流开源框架（二）OkHttp 使用详解</a></li><li>13 Aug 2019 » <a href="https://wildma.github.io/blog/ec018646.html">Android 主流开源框架（一）OkHttp 铺垫-HttpClient 与 HttpURLConnection 使用详解</a></li><li>28 Jul 2019 » <a href="https://wildma.github.io/blog/a009c79d.html">Android 设备与 U 盘之间的交互</a></li><li>11 May 2019 » <a href="https://wildma.github.io/blog/9cddebb4.html">自己撸一个 Android Studio 插件</a></li><li>12 Feb 2019 » <a href="https://wildma.github.io/blog/7770b02.html">聊聊 Android 中的字体大小适配</a></li></ul><h2 id="2018"><a href="#2018" class="headerlink" title="2018"></a>2018</h2><ul><li>08 Nov 2018 » <a href="https://wildma.github.io/blog/6b52ae54.html">Android 消息推送 MQTT 实战</a></li><li>01 Jul 2018 » <a href="https://wildma.github.io/blog/febb7b68.html">发布自己的开源库让他人使用——基于 JitPack</a></li><li>30 Jun 2018 » <a href="https://wildma.github.io/blog/26d11c6d.html">Android 自定义相机实现身份证拍照，并加入自动对焦与图片不规则裁剪</a></li><li>24 Jun 2018 » <a href="https://wildma.github.io/blog/a81abbe.html">一个非常好用的 Android 图片选择框架</a></li><li>24 May 2018 » <a href="https://wildma.github.io/blog/13aaf42f.html">详细讲解 Android Studio 中使用 Git——结合 GitLab</a></li><li>06 Apr 2018 » <a href="https://wildma.github.io/blog/3cf1e1de.html">一种非常好用的 Android 屏幕适配</a></li><li>25 Feb 2018 » <a href="https://wildma.github.io/blog/2e8cc733.html">Android 友盟统计的集成与使用（包含多渠道打包配置）</a></li></ul><h2 id="2017"><a href="#2017" class="headerlink" title="2017"></a>2017</h2><ul><li>05 Oct 2017 » <a href="https://wildma.github.io/blog/7ac296bb.html">带你通俗易懂的理解——线程、多线程与线程池</a></li><li>05 Oct 2017 » <a href="https://wildma.github.io/blog/71dca980.html">一步一步教你集成腾讯浏览服务 X5 内核</a></li><li>03 Aug 2017 » <a href="https://wildma.github.io/blog/a020565d.html">Android 仿微信朋友圈全文、收起功能</a></li><li>02 Aug 2017 » <a href="https://wildma.github.io/blog/c44542c2.html">Android 利用 Glide 获取图片真正的宽高</a></li><li>16 Jul 2017 » <a href="https://wildma.github.io/blog/6f5411d5.html">Android 使用友盟集成 QQ、微信、微博等第三方登录</a></li><li>16 Jul 2017 » <a href="https://wildma.github.io/blog/f2bfcfcb.html">Android 使用友盟集成 QQ、微信、微博等第三方分享</a></li><li>09 Jul 2017 » <a href="https://wildma.github.io/blog/493565be.html">热修复框架 Tinker 最完整讲解（03）——使用 Tinker 常见问题</a></li><li>09 Jul 2017 » <a href="https://wildma.github.io/blog/d74c6f53.html">热修复框架 Tinker 最完整讲解（02）——加入 Walle 多渠道打包</a></li><li>08 Jul 2017 » <a href="https://wildma.github.io/blog/fdabc636.html">热修复框架 Tinker 最完整讲解（01）——集成之路</a></li><li>05 Jun 2017 » <a href="https://wildma.github.io/blog/e1990d7c.html">Scrollview 嵌套百度地图 MapView 导致滑动有黑边或者阴影问题</a></li><li>07 May 2017 » <a href="https://wildma.github.io/blog/7be5d111.html">面试时最常问到的 Handler 消息机制源码详解</a></li><li>21 Apr 2017 » <a href="https://wildma.github.io/blog/28ff3e9a.html">最全加快 Android Studio 的编译速度</a></li><li>26 Mar 2017 » <a href="https://wildma.github.io/blog/46f3e95d.html">Android Butterknife 8.5.1 最新使用详解</a></li><li>16 Mar 2017 » <a href="https://wildma.github.io/blog/13625367.html">Android 使用 ShareSDK 集成 QQ、微信、微博等第三方登录</a></li><li>15 Mar 2017 » <a href="https://wildma.github.io/blog/8e898d79.html">Android 使用 ShareSDK 集成 QQ、微信、微博等第三方分享</a></li><li>12 Mar 2017 » <a href="https://wildma.github.io/blog/cc4308ee.html">Android 使用 OkHttp 请求自签名的 HTTPS 网站</a></li><li>02 Mar 2017 » <a href="https://wildma.github.io/blog/a2a279f5.html">Android 接入多盟广告 SDK–让你的 APP 通过广告平台赚钱</a></li><li>25 Feb 2017 » <a href="https://wildma.github.io/blog/47bfd246.html">利用高德地图关键字检索 POI-实现仿微信发朋友圈搜索附近位置</a></li><li>24 Feb 2017 » <a href="https://wildma.github.io/blog/3cc7098.html">Glide 中 centerCrop() 与 transform() 共用问题(包括 4.0.0 以上解决方法)</a></li><li>22 Feb 2017 » <a href="https://wildma.github.io/blog/63c3ed0a.html">Android 一步一步教你集成高德地图</a></li></ul><h2 id="2016"><a href="#2016" class="headerlink" title="2016"></a>2016</h2><ul><li>27 Nov 2016 » <a href="https://wildma.github.io/blog/66c9d45.html">Dagger2 使用——结合 MVP 模式讲解</a></li><li>25 Nov 2016 » <a href="https://wildma.github.io/blog/81ad7a6.html">带你通俗易懂的理解——Android 中的 MVC 与 MVP</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 全部文章 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Android 主流开源框架（四）Retrofit 使用详解</title>
      <link href="/blog/df2af467.html"/>
      <url>/blog/df2af467.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近有个想法——就是把 Android 主流开源框架进行深入分析，然后写成一系列文章，包括该框架的详细使用与源码解析。目的是通过鉴赏大神的源码来了解框架底层的原理，也就是做到不仅要知其然，还要知其所以然。</p><p>这里我说下自己阅读源码的经验，我一般都是按照平时使用某个框架或者某个系统源码的使用流程入手的，首先要知道怎么使用，然后再去深究每一步底层做了什么，用了哪些好的设计模式，为什么要这么设计。</p><p>系列文章：</p><ul><li><a href="https://wildma.github.io/blog/ec018646.html">Android 主流开源框架（一）OkHttp 铺垫-HttpClient 与 HttpURLConnection 使用详解</a></li><li><a href="https://wildma.github.io/blog/6d0008b.html">Android 主流开源框架（二）OkHttp 使用详解</a></li><li><a href="https://wildma.github.io/blog/d8540f1f.html">Android 主流开源框架（三）OkHttp 源码解析</a></li><li><a href="https://wildma.github.io/blog/df2af467.html">Android 主流开源框架（四）Retrofit 使用详解</a></li><li>Android 主流开源框架（五）Retrofit 源码解析（更新中…）</li><li>更多框架持续更新中…</li></ul><p>更多干货请关注 <a href="https://github.com/wildma/AndroidNotes" target="_blank" rel="noopener">AndroidNotes</a></p><h2 id="一、Retrofit-介绍"><a href="#一、Retrofit-介绍" class="headerlink" title="一、Retrofit 介绍"></a>一、Retrofit 介绍</h2><p>前面的文章已经介绍了 <a href="https://wildma.github.io/blog/6d0008b.html">OkHttp 的使用</a> 与 <a href="https://wildma.github.io/blog/d8540f1f.html">OkHttp 源码分析</a>，不了解的强烈建议先看看这 2 篇文章。这篇介绍的是 Retrofit，它也是 Square 公司开源的网络框架，它的底层就是基于 OkHttp 实现的，不过它比 OkHttp 使用更方便，也更适合进行 RESTful API 格式的请求。</p><h2 id="二、Retrofit-的使用"><a href="#二、Retrofit-的使用" class="headerlink" title="二、Retrofit 的使用"></a>二、Retrofit 的使用</h2><h3 id="2-1-使用前准备"><a href="#2-1-使用前准备" class="headerlink" title="2.1 使用前准备"></a>2.1 使用前准备</h3><p>（1）加入网络权限 在 AndroidManifest.xml 文件中加入如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span>uses<span class="token operator">-</span>permission android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.permission.INTERNET"</span><span class="token operator">/</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（2）添加 Retrofit 库的依赖<br>因为需要将服务器返回的 ResponseBody 转换成实体类，所以需要添加 Gson 库的依赖作为数据解析器。<br>最终在当前使用的 module 下的 build.gradle 中加入如下依赖：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// Retrofit</span>implementation <span class="token string">'com.squareup.retrofit2:retrofit:2.5.0'</span><span class="token comment" spellcheck="true">// Gson</span>implementation <span class="token string">'com.squareup.retrofit2:converter-gson:2.5.0'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-简单的-GET-请求"><a href="#2-2-简单的-GET-请求" class="headerlink" title="2.2 简单的 GET 请求"></a>2.2 简单的 GET 请求</h3><p>这里使用 postman 提供的 GET 接口进行演示。（<a href="https://docs.postman-echo.com/" target="_blank" rel="noopener">Postman Echo</a>）</p><p>（1）创建一个实体类，用于接收服务器返回的数据：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PostmanGetBean</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String url<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 其余字段省略，具体看 demo。</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>（2）创建一个接口，用于定义网络请求：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PostmanService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GET</span><span class="token punctuation">(</span><span class="token string">"get"</span><span class="token punctuation">)</span>    Call<span class="token operator">&lt;</span>PostmanGetBean<span class="token operator">></span> <span class="token function">testGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，这里有一个 testGet() 方法，方法上面的注解 @GET 表示 GET 请求，注解里面的 “get” 会与后面的 baseUrl 拼接成完整的路径。例如 baseUrl 为 <code>https://postman-echo.com/</code>，则完整的路径为 <code>https://postman-echo.com/get</code>。这里建议 baseUrl 以 /（斜线）结尾，注解中的 path 统一不要以 /（斜线）开头，因为这种方式看起来比较直观。<br>（3）创建 Retrofit 的实例：</p><pre class="line-numbers language-java"><code class="language-java">Retrofit retrofit <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Retrofit<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">baseUrl</span><span class="token punctuation">(</span><span class="token string">"https://postman-echo.com/"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// baseUrl</span>        <span class="token punctuation">.</span><span class="token function">addConverterFactory</span><span class="token punctuation">(</span>GsonConverterFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 解析json数据</span>        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>（4）创建网络请求接口的实例，并调用接口中的方法获取 Call 对象：</p><pre class="line-numbers language-java"><code class="language-java">PostmanService service <span class="token operator">=</span> retrofit<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>PostmanService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Call<span class="token operator">&lt;</span>PostmanGetBean<span class="token operator">></span> call <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">testGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>（5）进行网络请求</p><pre class="line-numbers language-java"><code class="language-java">call<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Callback</span><span class="token operator">&lt;</span>PostmanGetBean<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onResponse</span><span class="token punctuation">(</span>Call<span class="token operator">&lt;</span>PostmanGetBean<span class="token operator">></span> call<span class="token punctuation">,</span> Response<span class="token operator">&lt;</span>PostmanGetBean<span class="token operator">></span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onFailure</span><span class="token punctuation">(</span>Call<span class="token operator">&lt;</span>PostmanGetBean<span class="token operator">></span> call<span class="token punctuation">,</span> Throwable t<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打印结果：</p><pre><code>https://postman-echo.com/get</code></pre><p>示例源码：<a href="https://github.com/wildma/AndroidNotes" target="_blank" rel="noopener">RetrofitActivity-testGetRequest</a></p><h2 id="三、Retrofit-注解说明"><a href="#三、Retrofit-注解说明" class="headerlink" title="三、Retrofit 注解说明"></a>三、Retrofit 注解说明</h2><p>Retrofit 中使用了大量的注解，这里将这些注解分成 3 类。</p><h3 id="3-1-第一类：网络请求方法"><a href="#3-1-第一类：网络请求方法" class="headerlink" title="3.1 第一类：网络请求方法"></a>3.1 第一类：网络请求方法</h3><p>分别是 @GET、@POST、@PUT、@DELETE、@PATH、@HEAD、@OPTIONS 和 @HTTP，前 7 个分别对应 HTTP 中的网络请求方法，都接收一个字符串与 baseUrl 组成完整的 URL，也可以不指定，通过 @HTTP 注解设置。最后一个 @HTTP 注解可以用来替换前面 7 个注解，以及其他扩展功能。<br>这里主要讲下 @HTTP 注解，其他注解与 @GET 注解类似。</p><p><strong>@HTTP 注解示例：</strong><br>@HTTP 注解有 3 个属性：method、path 与 hasBody，上面说了这个注解可以用来替换前面 7 个注解，所以就替换一下前面讲到 GET 请求中的 @GET 注解吧。</p><p>这里只需要修改接口即可，其他不变：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PostmanService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@HTTP</span><span class="token punctuation">(</span>method <span class="token operator">=</span> <span class="token string">"GET"</span><span class="token punctuation">,</span> path <span class="token operator">=</span> <span class="token string">"get"</span><span class="token punctuation">,</span> hasBody <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    Call<span class="token operator">&lt;</span>PostmanGetBean<span class="token operator">></span> <span class="token function">testHTTP</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：<br>与 @GET 注解示例一样。<br>示例源码：<a href="https://github.com/wildma/AndroidNotes" target="_blank" rel="noopener">RetrofitActivity-testHTTP</a></p><h3 id="3-2-第二类：标记"><a href="#3-2-第二类：标记" class="headerlink" title="3.2 第二类：标记"></a>3.2 第二类：标记</h3><h4 id="3-2-1-FormUrlEncoded-注解"><a href="#3-2-1-FormUrlEncoded-注解" class="headerlink" title="3.2.1 @FormUrlEncoded 注解"></a>3.2.1 @FormUrlEncoded 注解</h4><p><strong>简介：</strong> 表示请求体是一个 Form 表单。<br><strong>示例：</strong><br>这里使用 postman 提供的 POST 接口进行演示。</p><p><strong>单个键值对传：</strong><br>（1）创建实体类：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PostmanPostBean</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 字段与重写 toString() 方法省略，具体看 demo</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>（2）创建接口：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PostmanService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@POST</span><span class="token punctuation">(</span><span class="token string">"post"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@FormUrlEncoded</span>    Call<span class="token operator">&lt;</span>PostmanPostBean<span class="token operator">></span> <span class="token function">testFormUrlEncoded1</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Field</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span> String name<span class="token punctuation">,</span> <span class="token annotation punctuation">@Field</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span> String password<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，这里使用了 @Field 注解，它属于第三类注解，用来向 Post 表单传入键值对，其中 username 表示键，name 表示值。</p><p>（3）发起请求：</p><pre class="line-numbers language-java"><code class="language-java">Retrofit retrofit <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Retrofit<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">baseUrl</span><span class="token punctuation">(</span><span class="token string">"https://postman-echo.com/"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">addConverterFactory</span><span class="token punctuation">(</span>GsonConverterFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>PostmanService service <span class="token operator">=</span> retrofit<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>PostmanService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Call<span class="token operator">&lt;</span>PostmanPostBean<span class="token operator">></span> call <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">testFormUrlEncoded1</span><span class="token punctuation">(</span><span class="token string">"wildma"</span><span class="token punctuation">,</span> <span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>call<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Callback</span><span class="token operator">&lt;</span>PostmanPostBean<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onResponse</span><span class="token punctuation">(</span>Call<span class="token operator">&lt;</span>PostmanPostBean<span class="token operator">></span> call<span class="token punctuation">,</span> Response<span class="token operator">&lt;</span>PostmanPostBean<span class="token operator">></span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onFailure</span><span class="token punctuation">(</span>Call<span class="token operator">&lt;</span>PostmanPostBean<span class="token operator">></span> call<span class="token punctuation">,</span> Throwable t<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre><code>FormEntity{username=&#39;wildma&#39;, password=&#39;123456&#39;}</code></pre><p>示例源码：<a href="https://github.com/wildma/AndroidNotes" target="_blank" rel="noopener">RetrofitActivity-testFormUrlEncoded1</a></p><p><strong>传入一个 Map 集合：</strong><br>向 Post 表单传入键值对除了上面一个个传，还可以使用注解 @FieldMap 传一个 Map 集合，如下：</p><p>（1）创建接口：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PostmanService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@POST</span><span class="token punctuation">(</span><span class="token string">"post"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@FormUrlEncoded</span>    Call<span class="token operator">&lt;</span>PostmanPostBean<span class="token operator">></span> <span class="token function">testFormUrlEncoded2</span><span class="token punctuation">(</span><span class="token annotation punctuation">@FieldMap</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（3）发起请求：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 省略创建 Retrofit 的实例代码</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span> <span class="token string">"wildma"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">,</span> <span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Call<span class="token operator">&lt;</span>PostmanPostBean<span class="token operator">></span> call <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">testFormUrlEncoded2</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 省略网络请求代码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>示例源码：<a href="https://github.com/wildma/AndroidNotes" target="_blank" rel="noopener">RetrofitActivity-testFormUrlEncoded2</a></p><h4 id="3-2-2-Multipart-注解"><a href="#3-2-2-Multipart-注解" class="headerlink" title="3.2.2 @Multipart 注解"></a>3.2.2 @Multipart 注解</h4><p><strong>简介：</strong> 表示请求体是一个支持文件上传的 Form 表单。<br><strong>示例：</strong><br>这里使用 <a href="http://hn216.api.yesapi.cn/docs.html" target="_blank" rel="noopener">YESAPI</a> 提供的图片上传接口进行演示。</p><p><strong>单文件上传：</strong><br>（1）创建实体类：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UploadImgBean</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 字段与重写 toString() 方法省略，具体看 demo</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>（2）创建接口：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">FileUploadService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@POST</span><span class="token punctuation">(</span><span class="token string">"?service=App.CDN.UploadImg"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Multipart</span>    Call<span class="token operator">&lt;</span>UploadImgBean<span class="token operator">></span> <span class="token function">testFileUpload1</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Part</span> MultipartBody<span class="token punctuation">.</span>Part file<span class="token punctuation">,</span> <span class="token annotation punctuation">@Part</span><span class="token punctuation">(</span><span class="token string">"app_key"</span><span class="token punctuation">)</span> RequestBody appKey<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，这里使用了 @Part 注解，它属于第三类注解，用于表单字段，适用于有文件上传的情况。这里使用了@Part 的两种类型，MultipartBody.Part 表示上传一个文件，RequestBody 表示传一个键值对，其中 app_key 表示键，appKey 表示值。</p><p>（3）发起请求：</p><pre class="line-numbers language-java"><code class="language-java">Retrofit retrofit <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Retrofit<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">baseUrl</span><span class="token punctuation">(</span><span class="token string">"http://hn216.api.yesapi.cn/"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">addConverterFactory</span><span class="token punctuation">(</span>GsonConverterFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>RequestBody appKey <span class="token operator">=</span> RequestBody<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> <span class="token string">"替换成你在 YESAPI 上获取的 appKey"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// test.png 为 SD 卡跟目录下的文件，需要提前放好</span>File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>Environment<span class="token punctuation">.</span><span class="token function">getExternalStorageDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"test.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>RequestBody requestBody <span class="token operator">=</span> RequestBody<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>MediaType<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"image/png"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 构建 MultipartBody.Part，其中 file 为服务器约定好的 key，test.png 为文件名称</span>MultipartBody<span class="token punctuation">.</span>Part filePart <span class="token operator">=</span> MultipartBody<span class="token punctuation">.</span>Part<span class="token punctuation">.</span><span class="token function">createFormData</span><span class="token punctuation">(</span><span class="token string">"file"</span><span class="token punctuation">,</span> <span class="token string">"test.png"</span><span class="token punctuation">,</span> requestBody<span class="token punctuation">)</span><span class="token punctuation">;</span>FileUploadService service <span class="token operator">=</span> retrofit<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>FileUploadService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Call<span class="token operator">&lt;</span>UploadImgBean<span class="token operator">></span> call <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">testFileUpload1</span><span class="token punctuation">(</span>filePart<span class="token punctuation">,</span> appKey<span class="token punctuation">)</span><span class="token punctuation">;</span>call<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Callback</span><span class="token operator">&lt;</span>UploadImgBean<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onResponse</span><span class="token punctuation">(</span>Call<span class="token operator">&lt;</span>UploadImgBean<span class="token operator">></span> call<span class="token punctuation">,</span> Response<span class="token operator">&lt;</span>UploadImgBean<span class="token operator">></span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onFailure</span><span class="token punctuation">(</span>Call<span class="token operator">&lt;</span>UploadImgBean<span class="token operator">></span> call<span class="token punctuation">,</span> Throwable t<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre><code>UploadImgBean{ret=200, data=DataEntity{err_code=0, err_msg=&#39;&#39;, url=&#39;http://cd7.yesapi.net/xxx.png&#39;}, msg=&#39;当前小白接口：App.CDN.UploadImg&#39;}</code></pre><p>示例源码：<a href="https://github.com/wildma/AndroidNotes" target="_blank" rel="noopener">RetrofitActivity-testFileUpload1</a></p><p><strong>多文件上传：</strong><br>如果想上传多个文件，则可以使用注解 @PartMap 传一个键值对为 &lt;String, RequestBody&gt; 的 Map 集合，如下：</p><p>（1）创建接口：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">FileUploadService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@POST</span><span class="token punctuation">(</span><span class="token string">"?service=App.CDN.UploadImg"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Multipart</span>    Call<span class="token operator">&lt;</span>UploadImgBean<span class="token operator">></span> <span class="token function">testFileUpload2</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PartMap</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> RequestBody<span class="token operator">></span> map<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（1）发起请求：</p><pre class="line-numbers language-java"><code class="language-java">Retrofit retrofit <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Retrofit<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">baseUrl</span><span class="token punctuation">(</span><span class="token string">"http://hn216.api.yesapi.cn/"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">addConverterFactory</span><span class="token punctuation">(</span>GsonConverterFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>RequestBody appKey <span class="token operator">=</span> RequestBody<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> <span class="token string">"替换成你在 YESAPI 上获取的 appKey"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// test.png 为 SD 卡跟目录下的文件，需要提前放好</span>File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>Environment<span class="token punctuation">.</span><span class="token function">getExternalStorageDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"test.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>RequestBody requestBody <span class="token operator">=</span> RequestBody<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>MediaType<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"image/png"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> RequestBody<span class="token operator">></span> requestBodyMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>requestBodyMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"app_key"</span><span class="token punctuation">,</span> appKey<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 加入一个文件，其中 file 为服务器约定好的 key，test.png 为文件名称</span>requestBodyMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"file\"; filename=\"test.png"</span><span class="token punctuation">,</span> requestBody<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 有更多文件，则继续 put()...</span>FileUploadService service <span class="token operator">=</span> retrofit<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>FileUploadService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Call<span class="token operator">&lt;</span>UploadImgBean<span class="token operator">></span> call <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">testFileUpload2</span><span class="token punctuation">(</span>requestBodyMap<span class="token punctuation">)</span><span class="token punctuation">;</span>call<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Callback</span><span class="token operator">&lt;</span>UploadImgBean<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onResponse</span><span class="token punctuation">(</span>Call<span class="token operator">&lt;</span>UploadImgBean<span class="token operator">></span> call<span class="token punctuation">,</span> Response<span class="token operator">&lt;</span>UploadImgBean<span class="token operator">></span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onFailure</span><span class="token punctuation">(</span>Call<span class="token operator">&lt;</span>UploadImgBean<span class="token operator">></span> call<span class="token punctuation">,</span> Throwable t<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>示例源码：<a href="https://github.com/wildma/AndroidNotes" target="_blank" rel="noopener">RetrofitActivity-testFileUpload2</a></p><h4 id="3-2-3-Streaming-注解"><a href="#3-2-3-Streaming-注解" class="headerlink" title="3.2.3 @Streaming 注解"></a>3.2.3 @Streaming 注解</h4><p><strong>简介：</strong> 表示响应体的数据用流的形式返回，如果没有使用该注解，默认会把数据全部载入内存，之后获取数据就从内存中读取，所以该注解一般用在返回数据比较大的时候，例如下载大文件。<br><strong>示例：</strong><br>这里使用下载我的博客头像（ <a href="https://wildma.github.io/medias/avatars/avatar.jpg">https://wildma.github.io/medias/avatars/avatar.jpg</a> ） 进行演示。</p><p>（1）下载文件不需要创建一个实体类，直接用 ResponseBody 来接收服务器返回的数据。（后面的示例为了方便演示，也不再解析成实体类，直接用 ResponseBody 来接收服务器返回的原始数据）</p><p>（2）创建接口：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">FileDownloadService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Streaming</span>    <span class="token annotation punctuation">@GET</span><span class="token punctuation">(</span><span class="token string">"medias/avatars/avatar.jpg"</span><span class="token punctuation">)</span>    Call<span class="token operator">&lt;</span>ResponseBody<span class="token operator">></span> <span class="token function">testFileDownload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里使用了 @Streaming 注解用来表示响应体的数据用流的形式返回。</p><p>（3）发起请求：</p><pre class="line-numbers language-java"><code class="language-java">Retrofit retrofit <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Retrofit<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">baseUrl</span><span class="token punctuation">(</span><span class="token string">"https://wildma.github.io/"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">addConverterFactory</span><span class="token punctuation">(</span>GsonConverterFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>FileDownloadService service <span class="token operator">=</span> retrofit<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>FileDownloadService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Call<span class="token operator">&lt;</span>ResponseBody<span class="token operator">></span> call <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">testFileDownload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>call<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Callback</span><span class="token operator">&lt;</span>ResponseBody<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onResponse</span><span class="token punctuation">(</span>Call<span class="token operator">&lt;</span>ResponseBody<span class="token operator">></span> call<span class="token punctuation">,</span> Response<span class="token operator">&lt;</span>ResponseBody<span class="token operator">></span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span>        InputStream is <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">byteStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 保存文件...</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onFailure</span><span class="token punctuation">(</span>Call<span class="token operator">&lt;</span>ResponseBody<span class="token operator">></span> call<span class="token punctuation">,</span> Throwable t<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>示例源码：<a href="https://github.com/wildma/AndroidNotes" target="_blank" rel="noopener">RetrofitActivity-testFileDownload</a></p><h3 id="3-3-第三类：网络请求参数"><a href="#3-3-第三类：网络请求参数" class="headerlink" title="3.3 第三类：网络请求参数"></a>3.3 第三类：网络请求参数</h3><h4 id="3-3-1-Header、-Headers-与-HeaderMap-注解"><a href="#3-3-1-Header、-Headers-与-HeaderMap-注解" class="headerlink" title="3.3.1 @Header、@Headers 与 @HeaderMap 注解"></a>3.3.1 @Header、@Headers 与 @HeaderMap 注解</h4><p><strong>简介：</strong> @Header 与 @HeaderMap 用于添加不固定值的请求头，@Headers 用于添加固定值的请求头。@Header 与 @HeaderMap 是作为请求方法的参数传入，@Headers 则直接添加到请求方法上。<br><strong>示例：</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// @Header</span><span class="token annotation punctuation">@GET</span><span class="token punctuation">(</span><span class="token string">"headers"</span><span class="token punctuation">)</span>Call<span class="token operator">&lt;</span>ResponseBody<span class="token operator">></span> <span class="token function">testHeader</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Header</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">)</span> String token<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// @Headers</span><span class="token annotation punctuation">@Headers</span><span class="token punctuation">(</span><span class="token string">"token: 123"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@GET</span><span class="token punctuation">(</span><span class="token string">"headers"</span><span class="token punctuation">)</span>Call<span class="token operator">&lt;</span>ResponseBody<span class="token operator">></span> <span class="token function">testHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// @Headers 多个请求头</span><span class="token annotation punctuation">@Headers</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"token: 123"</span><span class="token punctuation">,</span> <span class="token string">"sign: 456"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@GET</span><span class="token punctuation">(</span><span class="token string">"headers"</span><span class="token punctuation">)</span>Call<span class="token operator">&lt;</span>ResponseBody<span class="token operator">></span> <span class="token function">testHeaders2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// @HeaderMap</span><span class="token annotation punctuation">@GET</span><span class="token punctuation">(</span><span class="token string">"headers"</span><span class="token punctuation">)</span>Call<span class="token operator">&lt;</span>ResponseBody<span class="token operator">></span> <span class="token function">testHeaderMap</span><span class="token punctuation">(</span><span class="token annotation punctuation">@HeaderMap</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> map<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>示例源码：<a href="https://github.com/wildma/AndroidNotes" target="_blank" rel="noopener">RetrofitActivity-testHeader()、testHeaders()、testHeaders2()</a></p><h4 id="3-3-2-Body-注解"><a href="#3-3-2-Body-注解" class="headerlink" title="3.3.2 @Body 注解"></a>3.3.2 @Body 注解</h4><p><strong>简介：</strong> @Body 用于非表单请求体。很多时候后台要求前端传一个 json 字符串的请求体，这时候我们可以使用 @Body 注解来轻松实现，因为该注解可以直接传一个实体类，发起请求的过程中会把该实体类转换成 json 字符串的请求体传给后台。<br><strong>示例：</strong><br>（1）创建接口：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PostmanService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@POST</span><span class="token punctuation">(</span><span class="token string">"post"</span><span class="token punctuation">)</span>    Call<span class="token operator">&lt;</span>ResponseBody<span class="token operator">></span> <span class="token function">testBody</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Body</span> TestBodyBean testBodyBean<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>（2）发起请求：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 省略创建 Retrofit 的实例代码</span>TestBodyBean bean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestBodyBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bean<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"wildma"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bean<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>PostmanService service <span class="token operator">=</span> retrofit<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>PostmanService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Call<span class="token operator">&lt;</span>ResponseBody<span class="token operator">></span> call <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">testBody</span><span class="token punctuation">(</span>bean<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 省略网络请求代码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>示例源码：<a href="https://github.com/wildma/AndroidNotes" target="_blank" rel="noopener">RetrofitActivity-testBody()</a></p><h4 id="3-3-3-Field-与-FieldMap-注解"><a href="#3-3-3-Field-与-FieldMap-注解" class="headerlink" title="3.3.3 @Field 与 @FieldMap 注解"></a>3.3.3 @Field 与 @FieldMap 注解</h4><p><strong>简介：</strong> 用于向 Post 表单传入键值对。<br><strong>示例：</strong><br>具体使用前面讲 @FormUrlEncoded 注解的时候已经讲过了。<br>示例源码：<a href="https://github.com/wildma/AndroidNotes" target="_blank" rel="noopener">RetrofitActivity-testFormUrlEncoded1()、testFormUrlEncoded2()</a></p><h4 id="3-3-4-Part-与-PartMap-注解"><a href="#3-3-4-Part-与-PartMap-注解" class="headerlink" title="3.3.4 @Part 与 @PartMap 注解"></a>3.3.4 @Part 与 @PartMap 注解</h4><p><strong>简介：</strong> 用于表单字段，适用于有文件上传的情况。<br><strong>示例：</strong><br>具体使用前面讲 @Multipart 注解的时候已经讲过了。<br>示例源码：<a href="https://github.com/wildma/AndroidNotes" target="_blank" rel="noopener">RetrofitActivity-testFileUpload1()、testFileUpload2()</a></p><h4 id="3-3-5-Query-与-QueryMap-注解"><a href="#3-3-5-Query-与-QueryMap-注解" class="headerlink" title="3.3.5 @Query 与 @QueryMap 注解"></a>3.3.5 @Query 与 @QueryMap 注解</h4><p><strong>简介：</strong> 用于表单字段，功能与 @Field、@FiledMap 一样，区别在于 @Query、@QueryMap 的数据体现在 URL 上，而 @Field、@FiledMap 的数据体现在请求体上，但生成的数据是一样的。<br><strong>示例：</strong><br>（1）创建接口：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PostmanService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GET</span><span class="token punctuation">(</span><span class="token string">"get"</span><span class="token punctuation">)</span>    Call<span class="token operator">&lt;</span>ResponseBody<span class="token operator">></span> <span class="token function">testQuery</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span> String username<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>（2）发起请求：</p><pre class="line-numbers language-java"><code class="language-java">Retrofit retrofit <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Retrofit<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">baseUrl</span><span class="token punctuation">(</span><span class="token string">"https://postman-echo.com/"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">addConverterFactory</span><span class="token punctuation">(</span>GsonConverterFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>PostmanService service <span class="token operator">=</span> retrofit<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>PostmanService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Call<span class="token operator">&lt;</span>ResponseBody<span class="token operator">></span> call <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">testQuery</span><span class="token punctuation">(</span><span class="token string">"wildma"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 省略网络请求代码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的 baseUrl 为 <code>https://postman-echo.com/</code>，@GET 注解中的部分 URL 为 “get”，最终完整 URL 如果没用 @Query 注解应该是 <code>https://postman-echo.com/get</code>，用了注解就变成 <code>https://postman-echo.com/get?username=wildma</code> 了。</p><p>@QueryMap 注解则对应 Map 集合，接口如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PostmanService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GET</span><span class="token punctuation">(</span><span class="token string">"get"</span><span class="token punctuation">)</span>    Call<span class="token operator">&lt;</span>ResponseBody<span class="token operator">></span> <span class="token function">testQueryMap</span><span class="token punctuation">(</span><span class="token annotation punctuation">@QueryMap</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> params<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>发起请求的代码就不贴出来了，传一个对应的 Map 集合进来即可。</p><p>示例源码：<a href="https://github.com/wildma/AndroidNotes" target="_blank" rel="noopener">RetrofitActivity-testQuery()、testQueryMap()</a></p><h4 id="3-3-6-QueryName-注解"><a href="#3-3-6-QueryName-注解" class="headerlink" title="3.3.6 @QueryName 注解"></a>3.3.6 @QueryName 注解</h4><p><strong>简介：</strong> 用于没有值的查询参数，该注解实际项目中很少用到，功能与 @Query、@QueryMap 类似，参数都拼接在 URL 上，但是 @Query、@QueryMap 在 URL 上是以键值对拼接的，而 @QueryName 只是拼接键，没有值。<br><strong>示例：</strong><br>（1）创建接口：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PostmanService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GET</span><span class="token punctuation">(</span><span class="token string">"get"</span><span class="token punctuation">)</span>    Call<span class="token operator">&lt;</span>ResponseBody<span class="token operator">></span> <span class="token function">testQueryName</span><span class="token punctuation">(</span><span class="token annotation punctuation">@QueryName</span> String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> filters<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>注解后面可跟 String filter，也可跟 String… filters，其中后者是可变长参数，可以传多个参数也可不传参数。<br>（2）发起请求：</p><pre class="line-numbers language-java"><code class="language-java">Retrofit retrofit <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Retrofit<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">baseUrl</span><span class="token punctuation">(</span><span class="token string">"https://postman-echo.com/"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">addConverterFactory</span><span class="token punctuation">(</span>GsonConverterFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>PostmanService service <span class="token operator">=</span> retrofit<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>PostmanService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Call<span class="token operator">&lt;</span>ResponseBody<span class="token operator">></span> call <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">testQueryName</span><span class="token punctuation">(</span><span class="token string">"wildma"</span><span class="token punctuation">,</span><span class="token string">"tom"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 省略网络请求代码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面最终拼接的 URL 为 <code>https://postman-echo.com/get?wildma&amp;tom</code>。</p><p>示例源码：<a href="https://github.com/wildma/AndroidNotes" target="_blank" rel="noopener">RetrofitActivity-testQueryName()</a></p><h4 id="3-3-7-Path-注解"><a href="#3-3-7-Path-注解" class="headerlink" title="3.3.7 @Path 注解"></a>3.3.7 @Path 注解</h4><p><strong>简介：</strong> @Path 用于设置 URL 地址的缺省值。<br><strong>示例：</strong><br>这里使用官方提供的 API，即获取指定用户的仓库列表进行演示。<br>（1）创建接口：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">GitHubService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GET</span><span class="token punctuation">(</span><span class="token string">"users/{user}/repos"</span><span class="token punctuation">)</span>    Call<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>RepoBean<span class="token operator">>></span> <span class="token function">listRepos</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Path</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span> String user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>（2）发起请求：</p><pre class="line-numbers language-java"><code class="language-java">Retrofit retrofit <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Retrofit<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">baseUrl</span><span class="token punctuation">(</span><span class="token string">"https://api.github.com/"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">addConverterFactory</span><span class="token punctuation">(</span>GsonConverterFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>GitHubService service <span class="token operator">=</span> retrofit<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>GitHubService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Call<span class="token operator">&lt;</span>ResponseBody<span class="token operator">></span> call <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">testPath</span><span class="token punctuation">(</span><span class="token string">"wildma"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 省略网络请求代码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，@GET 注解里面的 “users/{user}/repos” 中有一个 “{user}”，这个就是 URL 地址的缺省值， listRepos() 方法中的 @Path(“user”) String user 表示传入的 urse 就是用来替换上面的 {user} 的。所以最终完整的 URL 为 <code>https://api.github.com/users/wildma/repos</code>。</p><p>示例源码：<a href="https://github.com/wildma/AndroidNotes" target="_blank" rel="noopener">RetrofitActivity-testPath()</a></p><h4 id="3-3-8-Url-注解"><a href="#3-3-8-Url-注解" class="headerlink" title="3.3.8 @Url 注解"></a>3.3.8 @Url 注解</h4><p><strong>简介：</strong> @Url 用于动态设置一个完整的 URL。<br><strong>示例：</strong><br>（1）创建接口：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PostmanService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GET</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    Call<span class="token operator">&lt;</span>ResponseBody<span class="token operator">></span> <span class="token function">testUrl</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Url</span> String url<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>（2）发起请求：</p><pre class="line-numbers language-java"><code class="language-java">Retrofit retrofit <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Retrofit<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">baseUrl</span><span class="token punctuation">(</span><span class="token string">"https://api.github.com/"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">addConverterFactory</span><span class="token punctuation">(</span>GsonConverterFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>PostmanService service <span class="token operator">=</span> retrofit<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>PostmanService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Call<span class="token operator">&lt;</span>ResponseBody<span class="token operator">></span> call <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">testUrl</span><span class="token punctuation">(</span><span class="token string">"https://postman-echo.com/get"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 省略网络请求代码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，baseUrl() 与 testUrl() 都设置了一个 URL，但由于 @Url 注解标识的 URL 是动态设置的，所以最终以 testUrl() 中设置的为准，也就是最终使用的是 <code>https://postman-echo.com/get</code>。</p><p>示例源码：<a href="https://github.com/wildma/AndroidNotes" target="_blank" rel="noopener">RetrofitActivity-testUrl()</a></p><h2 id="四、设置自定义的-OkHttpClient"><a href="#四、设置自定义的-OkHttpClient" class="headerlink" title="四、设置自定义的 OkHttpClient"></a>四、设置自定义的 OkHttpClient</h2><p>在创建 Retrofit 的实例的时候可以通过 client() 方法设置自定义的 OkHttpClient，自定义 OkHttpClient 可以设置统一的 header，添加 log 拦截器、Cookie 等。这里就讲下怎么设置统一的 header 吧！<br>（1）创建 OkHttpClient 的时候通过添加拦截器，然后在拦截器的 intercept() 方法中设置统一的 header：</p><pre class="line-numbers language-java"><code class="language-java">OkHttpClient okHttpClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OkHttpClient<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Interceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> okhttp3<span class="token punctuation">.</span>Response <span class="token function">intercept</span><span class="token punctuation">(</span>Chain chain<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        Request originalRequest <span class="token operator">=</span> chain<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Request request <span class="token operator">=</span> originalRequest<span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">,</span> <span class="token string">"123"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"sign"</span><span class="token punctuation">,</span> <span class="token string">"456"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> chain<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（2）通过 client() 方法设置自定义的 OkHttpClient：</p><pre class="line-numbers language-java"><code class="language-java">Retrofit retrofit <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Retrofit<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">client</span><span class="token punctuation">(</span>okHttpClient<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 设置自定义的 OkHttpClient</span>        <span class="token punctuation">.</span><span class="token function">baseUrl</span><span class="token punctuation">(</span><span class="token string">"https://postman-echo.com/"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">addConverterFactory</span><span class="token punctuation">(</span>GsonConverterFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>示例源码：<a href="https://github.com/wildma/AndroidNotes" target="_blank" rel="noopener">RetrofitActivity-testCustomOkHttpClient</a></p><h2 id="五、关于-Converter"><a href="#五、关于-Converter" class="headerlink" title="五、关于 Converter"></a>五、关于 Converter</h2><p>Retrofit 默认用 ResponseBody 来接收服务器返回的数据，如果想要转换成对应的实体类，那么在创建 Retrofit 的实例的时候可以通过 addConverterFactory() 方法设置一个数据解析器，数据解析器有多种选择，Retrofit 文档中就提供了很多种：</p><ul><li>Gson: com.squareup.retrofit2:converter-gson</li><li>Jackson: com.squareup.retrofit2:converter-jackson</li><li>Moshi: com.squareup.retrofit2:converter-moshi</li><li>Protobuf: com.squareup.retrofit2:converter-protobuf</li><li>Wire: com.squareup.retrofit2:converter-wire</li><li>Simple XML: com.squareup.retrofit2:converter-simplexml</li><li>Scalars (primitives, boxed, and String): com.squareup.retrofit2:converter-scalars</li></ul><p>除了文档提供的这几种，其实还有一种常用的：<br>fastjson：’org.ligboy.retrofit2:converter-fastjson-android</p><p>这里使用 Gson 进行演示。<br>（1）创建接口：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PostmanService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GET</span><span class="token punctuation">(</span><span class="token string">"get"</span><span class="token punctuation">)</span>    Call<span class="token operator">&lt;</span>PostmanGetBean<span class="token operator">></span> <span class="token function">testGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这里直接用实体类 PostmanGetBean 替换 ResponseBody。<br>（2）发起请求：</p><pre class="line-numbers language-java"><code class="language-java">Retrofit retrofit <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Retrofit<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">baseUrl</span><span class="token punctuation">(</span><span class="token string">"https://postman-echo.com/"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">addConverterFactory</span><span class="token punctuation">(</span>GsonConverterFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 添加 Gson 解析器</span>        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 省略网络请求代码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里添加了 Gson 作为数据解析器。</p><p>示例源码：<a href="https://github.com/wildma/AndroidNotes" target="_blank" rel="noopener">RetrofitActivity-testGet</a></p><h2 id="六、关于-CallAdapter"><a href="#六、关于-CallAdapter" class="headerlink" title="六、关于 CallAdapter"></a>六、关于 CallAdapter</h2><p>前面创建接口的时候，发现接口中的方法返回类型都是 Call，如果想要返回其他类型，那么在创建 Retrofit 的实例的时候可以通过 addCallAdapterFactory() 方法设置一个 CallAdapter，Retrofit 提供了如下 CallAdapter：</p><ul><li>guava：com.squareup.retrofit2:adapter-guava</li><li>Java8：com.squareup.retrofit2:adapter-java8:2.0.2</li><li>rxjava：com.squareup.retrofit2:adapter-rxjava</li></ul><p>这里使用 RxJava 进行演示。<br>（1）添加相关依赖：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 支持 rxjava2</span>implementation <span class="token string">'com.squareup.retrofit2:adapter-rxjava2:2.5.0'</span><span class="token comment" spellcheck="true">// rxjava2</span>compile <span class="token string">'io.reactivex.rxjava2:rxjava:2.2.13'</span>compile <span class="token string">'io.reactivex.rxjava2:rxandroid:2.1.1'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（2）创建接口：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@GET</span><span class="token punctuation">(</span><span class="token string">"get"</span><span class="token punctuation">)</span>Observable<span class="token operator">&lt;</span>ResponseBody<span class="token operator">></span> <span class="token function">testCallAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这里使用 Observable 替换 Call。<br>（3）发起请求：</p><pre class="line-numbers language-java"><code class="language-java">Retrofit retrofit <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Retrofit<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">baseUrl</span><span class="token punctuation">(</span><span class="token string">"https://postman-echo.com/"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">addConverterFactory</span><span class="token punctuation">(</span>GsonConverterFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">addCallAdapterFactory</span><span class="token punctuation">(</span>RxJava2CallAdapterFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 设置 RxJava 作为当前的 CallAdapter</span>        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>PostmanService service <span class="token operator">=</span> retrofit<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>PostmanService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Observable<span class="token operator">&lt;</span>ResponseBody<span class="token operator">></span> observable <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">testCallAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>observable<span class="token punctuation">.</span><span class="token function">subscribeOn</span><span class="token punctuation">(</span>Schedulers<span class="token punctuation">.</span><span class="token function">io</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>               <span class="token comment" spellcheck="true">// 在 IO 线程进行网络请求</span>        <span class="token punctuation">.</span><span class="token function">observeOn</span><span class="token punctuation">(</span>AndroidSchedulers<span class="token punctuation">.</span><span class="token function">mainThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 在主线程处理请求结果</span>        <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Observer</span><span class="token operator">&lt;</span>ResponseBody<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onSubscribe</span><span class="token punctuation">(</span>Disposable d<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onNext</span><span class="token punctuation">(</span>ResponseBody responseBody<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>responseBody<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onError</span><span class="token punctuation">(</span>Throwable e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里设置 RxJava 作为当前的 CallAdapter，并且调用 Observable 的相关方法进行网络请求与请求结果的处理。<br>示例源码：<a href="https://github.com/wildma/AndroidNotes" target="_blank" rel="noopener">RetrofitActivity-testCallAdapter</a></p><h2 id="七、源码"><a href="#七、源码" class="headerlink" title="七、源码"></a>七、源码</h2><p><a href="https://github.com/wildma/AndroidNotes" target="_blank" rel="noopener">Retrofit 的使用 demo</a></p>]]></content>
      
      
      <categories>
          
          <category> Android主流开源框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络编程 </tag>
            
            <tag> Retrofit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 主流开源框架（三）OkHttp 源码解析</title>
      <link href="/blog/d8540f1f.html"/>
      <url>/blog/d8540f1f.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近有个想法——就是把 Android 主流开源框架进行深入分析，然后写成一系列文章，包括该框架的详细使用与源码解析。目的是通过鉴赏大神的源码来了解框架底层的原理，也就是做到不仅要知其然，还要知其所以然。</p><p>这里我说下自己阅读源码的经验，我一般都是按照平时使用某个框架或者某个系统源码的使用流程入手的，首先要知道怎么使用，然后再去深究每一步底层做了什么，用了哪些好的设计模式，为什么要这么设计。</p><p>系列文章：</p><ul><li><a href="https://wildma.github.io/blog/ec018646.html">Android 主流开源框架（一）OkHttp 铺垫-HttpClient 与 HttpURLConnection 使用详解</a></li><li><a href="https://wildma.github.io/blog/6d0008b.html">Android 主流开源框架（二）OkHttp 使用详解</a></li><li><a href="https://wildma.github.io/blog/d8540f1f.html">Android 主流开源框架（三）OkHttp 源码解析</a></li><li>Android 主流开源框架（四）Retrofit 使用详解（更新中…）</li><li>Android 主流开源框架（五）Retrofit 源码解析（更新中…）</li><li>更多框架持续更新中…</li></ul><p>更多干货请关注 <a href="https://github.com/wildma/AndroidNotes" target="_blank" rel="noopener">AndroidNotes</a></p><h1 id="一、OkHttp-的基本使用示例"><a href="#一、OkHttp-的基本使用示例" class="headerlink" title="一、OkHttp 的基本使用示例"></a>一、OkHttp 的基本使用示例</h1><h2 id="1-1-同步-GET-请求"><a href="#1-1-同步-GET-请求" class="headerlink" title="1.1 同步 GET 请求"></a>1.1 同步 GET 请求</h2><pre class="line-numbers language-java"><code class="language-java"> <span class="token comment" spellcheck="true">// （1）创建 OkHttpClient 对象</span>OkHttpClient client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OkHttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// （2）创建 Request 对象</span>Request request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Request<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// （3）创建 Call 对象。</span>Call call <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">newCall</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// （4）发送请求并获取服务器返回的数据</span>Response response <span class="token operator">=</span> call<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// （5）取出相应的数据</span>String data <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-2-异步-GET-请求"><a href="#1-2-异步-GET-请求" class="headerlink" title="1.2 异步 GET 请求"></a>1.2 异步 GET 请求</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// （1）创建 OkHttpClient 对象</span>OkHttpClient client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OkHttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// （2）创建 Request 对象</span>Request request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Request<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// （3）创建 Call 对象。</span>Call call <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">newCall</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// （4）发送请求并获取服务器返回的数据</span>call<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onFailure</span><span class="token punctuation">(</span>Call call<span class="token punctuation">,</span> IOException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onResponse</span><span class="token punctuation">(</span>Call call<span class="token punctuation">,</span> Response response<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// （5）取出相应的数据</span>        String data <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到不管是同步请求还是异步请求，OkHttp 的基本使用就只有 5 步。同步请求与异步请求唯一不同的就是第 （4） 步，前者使用同步方法 execute()，后者使用异步方法 enqueue()。接下来我们就根据这 5 步进行源码阅读。</p><p>更多 OkHttp 的使用方法可以看我之前写的文章 <a href="https://wildma.github.io/blog/6d0008b.html">Android 主流开源框架（二）OkHttp 使用详解</a></p><h1 id="二、OkHttp-源码分析"><a href="#二、OkHttp-源码分析" class="headerlink" title="二、OkHttp 源码分析"></a>二、OkHttp 源码分析</h1><p>源码版本：3.11.0</p><h2 id="2-1-（1）创建-OkHttpClient-对象"><a href="#2-1-（1）创建-OkHttpClient-对象" class="headerlink" title="2.1 （1）创建 OkHttpClient 对象"></a>2.1 （1）创建 OkHttpClient 对象</h2><pre class="line-numbers language-java"><code class="language-java">OkHttpClient client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OkHttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>首先我们点击创建的 OkHttpClient 对象进去源码是这样的：</p><pre class="line-numbers language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/*OkHttpClient*/</span>  <span class="token keyword">public</span> <span class="token function">OkHttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后是走了有参构造：</p><pre class="line-numbers language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/*OkHttpClient*/</span>  <span class="token function">OkHttpClient</span><span class="token punctuation">(</span>Builder builder<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>dispatcher <span class="token operator">=</span> builder<span class="token punctuation">.</span>dispatcher<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>proxy <span class="token operator">=</span> builder<span class="token punctuation">.</span>proxy<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>protocols <span class="token operator">=</span> builder<span class="token punctuation">.</span>protocols<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>connectionSpecs <span class="token operator">=</span> builder<span class="token punctuation">.</span>connectionSpecs<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>interceptors <span class="token operator">=</span> Util<span class="token punctuation">.</span><span class="token function">immutableList</span><span class="token punctuation">(</span>builder<span class="token punctuation">.</span>interceptors<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>networkInterceptors <span class="token operator">=</span> Util<span class="token punctuation">.</span><span class="token function">immutableList</span><span class="token punctuation">(</span>builder<span class="token punctuation">.</span>networkInterceptors<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>eventListenerFactory <span class="token operator">=</span> builder<span class="token punctuation">.</span>eventListenerFactory<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>proxySelector <span class="token operator">=</span> builder<span class="token punctuation">.</span>proxySelector<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>cookieJar <span class="token operator">=</span> builder<span class="token punctuation">.</span>cookieJar<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>cache <span class="token operator">=</span> builder<span class="token punctuation">.</span>cache<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>internalCache <span class="token operator">=</span> builder<span class="token punctuation">.</span>internalCache<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>socketFactory <span class="token operator">=</span> builder<span class="token punctuation">.</span>socketFactory<span class="token punctuation">;</span>    <span class="token keyword">boolean</span> isTLS <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>ConnectionSpec spec <span class="token operator">:</span> connectionSpecs<span class="token punctuation">)</span> <span class="token punctuation">{</span>      isTLS <span class="token operator">=</span> isTLS <span class="token operator">||</span> spec<span class="token punctuation">.</span><span class="token function">isTls</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>builder<span class="token punctuation">.</span>sslSocketFactory <span class="token operator">!=</span> null <span class="token operator">||</span> <span class="token operator">!</span>isTLS<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>sslSocketFactory <span class="token operator">=</span> builder<span class="token punctuation">.</span>sslSocketFactory<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>certificateChainCleaner <span class="token operator">=</span> builder<span class="token punctuation">.</span>certificateChainCleaner<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      X509TrustManager trustManager <span class="token operator">=</span> Util<span class="token punctuation">.</span><span class="token function">platformTrustManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>sslSocketFactory <span class="token operator">=</span> <span class="token function">newSslSocketFactory</span><span class="token punctuation">(</span>trustManager<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>certificateChainCleaner <span class="token operator">=</span> CertificateChainCleaner<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>trustManager<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>sslSocketFactory <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      Platform<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">configureSslSocketFactory</span><span class="token punctuation">(</span>sslSocketFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>hostnameVerifier <span class="token operator">=</span> builder<span class="token punctuation">.</span>hostnameVerifier<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>certificatePinner <span class="token operator">=</span> builder<span class="token punctuation">.</span>certificatePinner<span class="token punctuation">.</span><span class="token function">withCertificateChainCleaner</span><span class="token punctuation">(</span>        certificateChainCleaner<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>proxyAuthenticator <span class="token operator">=</span> builder<span class="token punctuation">.</span>proxyAuthenticator<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>authenticator <span class="token operator">=</span> builder<span class="token punctuation">.</span>authenticator<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>connectionPool <span class="token operator">=</span> builder<span class="token punctuation">.</span>connectionPool<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>dns <span class="token operator">=</span> builder<span class="token punctuation">.</span>dns<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>followSslRedirects <span class="token operator">=</span> builder<span class="token punctuation">.</span>followSslRedirects<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>followRedirects <span class="token operator">=</span> builder<span class="token punctuation">.</span>followRedirects<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>retryOnConnectionFailure <span class="token operator">=</span> builder<span class="token punctuation">.</span>retryOnConnectionFailure<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>connectTimeout <span class="token operator">=</span> builder<span class="token punctuation">.</span>connectTimeout<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>readTimeout <span class="token operator">=</span> builder<span class="token punctuation">.</span>readTimeout<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>writeTimeout <span class="token operator">=</span> builder<span class="token punctuation">.</span>writeTimeout<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>pingInterval <span class="token operator">=</span> builder<span class="token punctuation">.</span>pingInterval<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>interceptors<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"Null interceptor: "</span> <span class="token operator">+</span> interceptors<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>networkInterceptors<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"Null network interceptor: "</span> <span class="token operator">+</span> networkInterceptors<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到有很多常量，这里使用了建造者模式，所以这些常量可以通过 build() 进行配置。如果不进行配置则使用无参构造中传进来的默认配置，每个常量的意思具体如下：</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/*OkHttpClient*/</span>    <span class="token keyword">public</span> <span class="token function">Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      dispatcher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dispatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 分发器</span>      protocols <span class="token operator">=</span> DEFAULT_PROTOCOLS<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// HTTP 协议</span>      connectionSpecs <span class="token operator">=</span> DEFAULT_CONNECTION_SPECS<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 传输层版本和连接协议</span>      eventListenerFactory <span class="token operator">=</span> EventListener<span class="token punctuation">.</span><span class="token function">factory</span><span class="token punctuation">(</span>EventListener<span class="token punctuation">.</span>NONE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 事件监听工厂</span>      proxySelector <span class="token operator">=</span> ProxySelector<span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 代理选择器</span>      cookieJar <span class="token operator">=</span> CookieJar<span class="token punctuation">.</span>NO_COOKIES<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// cookie</span>      socketFactory <span class="token operator">=</span> SocketFactory<span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// socket 工厂</span>      hostnameVerifier <span class="token operator">=</span> OkHostnameVerifier<span class="token punctuation">.</span>INSTANCE<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 主机名字确认</span>      certificatePinner <span class="token operator">=</span> CertificatePinner<span class="token punctuation">.</span>DEFAULT<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 证书链</span>      proxyAuthenticator <span class="token operator">=</span> Authenticator<span class="token punctuation">.</span>NONE<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 代理服务器身份验证</span>      authenticator <span class="token operator">=</span> Authenticator<span class="token punctuation">.</span>NONE<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 源服务器身份验证</span>      connectionPool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConnectionPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 连接池</span>      dns <span class="token operator">=</span> Dns<span class="token punctuation">.</span>SYSTEM<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 域名</span>      followSslRedirects <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 是否遵循 ssl 重定向</span>      followRedirects <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 是否遵循重定向</span>      retryOnConnectionFailure <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 连接失败的时候是否重试</span>      connectTimeout <span class="token operator">=</span> 10_000<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 连接超时</span>      readTimeout <span class="token operator">=</span> 10_000<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 读超时</span>      writeTimeout <span class="token operator">=</span> 10_000<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 写超时</span>      pingInterval <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// HTTP / 2 和 Web 套接字 ping 之间的时间间隔</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-2-（2）创建-Request-对象"><a href="#2-2-（2）创建-Request-对象" class="headerlink" title="2.2 （2）创建 Request 对象"></a>2.2 （2）创建 Request 对象</h2><pre class="line-numbers language-java"><code class="language-java">Request request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Request<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以看到，这里同样使用了建造者模式，我们点击 Request 进去看看：</p><pre class="line-numbers language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/*Request*/</span>  <span class="token comment" spellcheck="true">//...</span>  <span class="token keyword">final</span> HttpUrl url<span class="token punctuation">;</span>  <span class="token keyword">final</span> String method<span class="token punctuation">;</span>  <span class="token keyword">final</span> Headers headers<span class="token punctuation">;</span>  <span class="token keyword">final</span> <span class="token annotation punctuation">@Nullable</span> RequestBody body<span class="token punctuation">;</span>  <span class="token keyword">final</span> Map<span class="token operator">&lt;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">,</span> Object<span class="token operator">></span> tags<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发现 Request 还是比较简单的，只是用来设置一些请求链接（url）、请求方法（method）、请求头（headers）、请求体（body）、标签（tag，可作为取消请求的标记）。</p><h2 id="2-3-（3）创建-Call-对象"><a href="#2-3-（3）创建-Call-对象" class="headerlink" title="2.3 （3）创建 Call 对象"></a>2.3 （3）创建 Call 对象</h2><pre class="line-numbers language-java"><code class="language-java">Call call <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">newCall</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们点击 newCall() 方法进去看看：</p><pre class="line-numbers language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/*OkHttpClient*/</span>  <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> Call <span class="token function">newCall</span><span class="token punctuation">(</span>Request request<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> RealCall<span class="token punctuation">.</span><span class="token function">newRealCall</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token boolean">false</span> <span class="token comment" spellcheck="true">/* for web socket */</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>发现是调用了 RealCall 的 newRealCall() 方法，并传入了 OkHttpClient 与 Request 对象。</p><p>再跟进到 newRealCall() 方法：</p><pre class="line-numbers language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/*RealCall*/</span>  <span class="token keyword">static</span> RealCall <span class="token function">newRealCall</span><span class="token punctuation">(</span>OkHttpClient client<span class="token punctuation">,</span> Request originalRequest<span class="token punctuation">,</span> <span class="token keyword">boolean</span> forWebSocket<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Safely publish the Call instance to the EventListener.</span>    RealCall call <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RealCall</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span> originalRequest<span class="token punctuation">,</span> forWebSocket<span class="token punctuation">)</span><span class="token punctuation">;</span>    call<span class="token punctuation">.</span>eventListener <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">eventListenerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>call<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> call<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发现是创建了一个 RealCall 对象，并返回给上一层。RealCall 是 Call 的实现类，Call 定义了请求相关的操作，例如同步异步、取消请求等方法。所以后续的请求相关操作基本都是在调用 Call 定义的方法，而这些方法真正的执行是它的实现类 RealCall。</p><p>最后看看 RealCall 的构造函数，该函数是比较简单的，只是赋值一些常量，然后创建了重试与重定向拦截器（RetryAndFollowUpInterceptor）（这个后面会讲）：</p><pre class="line-numbers language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/*RealCall*/</span>  <span class="token keyword">private</span> <span class="token function">RealCall</span><span class="token punctuation">(</span>OkHttpClient client<span class="token punctuation">,</span> Request originalRequest<span class="token punctuation">,</span> <span class="token keyword">boolean</span> forWebSocket<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>client <span class="token operator">=</span> client<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>originalRequest <span class="token operator">=</span> originalRequest<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>forWebSocket <span class="token operator">=</span> forWebSocket<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>retryAndFollowUpInterceptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RetryAndFollowUpInterceptor</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span> forWebSocket<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-4-（4）发送请求并获取服务器返回的数据"><a href="#2-4-（4）发送请求并获取服务器返回的数据" class="headerlink" title="2.4 （4）发送请求并获取服务器返回的数据"></a>2.4 （4）发送请求并获取服务器返回的数据</h2><p>前面我们已经说了，同步请求与异步请求唯一不同的就是第 （4） 步，前者使用同步方法 execute()，后者使用异步方法 enqueue()。所以我们分 2 种情况来讲。</p><h3 id="2-4-1-同步请求"><a href="#2-4-1-同步请求" class="headerlink" title="2.4.1 同步请求"></a>2.4.1 同步请求</h3><pre class="line-numbers language-java"><code class="language-java">Response response <span class="token operator">=</span> call<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们点击 execute() 方法进去看看：</p><pre class="line-numbers language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/*RealCall*/</span>  <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> Response <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>executed<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"Already Executed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      executed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">captureCallStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    eventListener<span class="token punctuation">.</span><span class="token function">callStart</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      client<span class="token punctuation">.</span><span class="token function">dispatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">executed</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// (1)</span>      Response result <span class="token operator">=</span> <span class="token function">getResponseWithInterceptorChain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// (2)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IOException</span><span class="token punctuation">(</span><span class="token string">"Canceled"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      eventListener<span class="token punctuation">.</span><span class="token function">callFailed</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">throw</span> e<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>      client<span class="token punctuation">.</span><span class="token function">dispatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">finished</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// (3)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>源码中我标注了 3 个关注点，点击关注点（1）的 executed() 方法进去，可以看到是将传进来的 RealCall 加入了一个双端队列：</p><pre class="line-numbers language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/*Dispatcher*/</span>  <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">executed</span><span class="token punctuation">(</span>RealCall call<span class="token punctuation">)</span> <span class="token punctuation">{</span>    runningSyncCalls<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>call<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>其中 runningSyncCalls 是一个双端队列，用来记录正在运行的同步请求队列：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*Dispatcher*/</span><span class="token keyword">private</span> <span class="token keyword">final</span> Deque<span class="token operator">&lt;</span>RealCall<span class="token operator">></span> runningSyncCalls <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>关注点（2）返回了一个 Response，也就是服务器返回的数据，说明请求就是在这里执行了，这个是我们要研究的重点，放到后面再说。</p><p>点击关注点（3）的 finished() 方法进去，是这样的：</p><pre class="line-numbers language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/*Dispatcher*/</span>  <span class="token keyword">void</span> <span class="token function">finished</span><span class="token punctuation">(</span>RealCall call<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">finished</span><span class="token punctuation">(</span>runningSyncCalls<span class="token punctuation">,</span> call<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">private</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">void</span> <span class="token function">finished</span><span class="token punctuation">(</span>Deque<span class="token operator">&lt;</span>T<span class="token operator">></span> calls<span class="token punctuation">,</span> T call<span class="token punctuation">,</span> <span class="token keyword">boolean</span> promoteCalls<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> runningCallsCount<span class="token punctuation">;</span>    Runnable idleCallback<span class="token punctuation">;</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>calls<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>call<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AssertionError</span><span class="token punctuation">(</span><span class="token string">"Call wasn't in-flight!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// (1)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>promoteCalls<span class="token punctuation">)</span> <span class="token function">promoteCalls</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      runningCallsCount <span class="token operator">=</span> <span class="token function">runningCallsCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      idleCallback <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>idleCallback<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>runningCallsCount <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> idleCallback <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      idleCallback<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到关注点（1）calls.remove(call) 只是把当前 RealCall 又从正在运行的同步请求队列中移除了，说明请求已经完成了。</p><p>你应该注意到了，上面还有个 dispatcher 没讲到，其实这是一个分发器，是用来对请求进行分发的。我们刚刚也分析了在同步请求中涉及到的 dispatcher 只是用来记录正在运行的同步请求队列，然后请求完成就移除掉。所以这个分发器主要用在异步请求中，我们放到异步请求中再去讲。</p><h3 id="2-4-2-异步请求"><a href="#2-4-2-异步请求" class="headerlink" title="2.4.2 异步请求"></a>2.4.2 异步请求</h3><pre class="line-numbers language-java"><code class="language-java">        call<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onFailure</span><span class="token punctuation">(</span>Call call<span class="token punctuation">,</span> IOException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onResponse</span><span class="token punctuation">(</span>Call call<span class="token punctuation">,</span> Response response<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们点击 enqueue() 方法进去看看：</p><pre class="line-numbers language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/*RealCall*/</span>  <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">enqueue</span><span class="token punctuation">(</span>Callback responseCallback<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>executed<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"Already Executed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      executed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">captureCallStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    eventListener<span class="token punctuation">.</span><span class="token function">callStart</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    client<span class="token punctuation">.</span><span class="token function">dispatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AsyncCall</span><span class="token punctuation">(</span>responseCallback<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// (1)</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>前面几行与同步请求源码一样，我们点击关注点（1）的 enqueue() 方法进去看看：</p><pre class="line-numbers language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/*Dispatcher*/</span>  <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">enqueue</span><span class="token punctuation">(</span>AsyncCall call<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>runningAsyncCalls<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> maxRequests <span class="token operator">&amp;&amp;</span> <span class="token function">runningCallsForHost</span><span class="token punctuation">(</span>call<span class="token punctuation">)</span> <span class="token operator">&lt;</span> maxRequestsPerHost<span class="token punctuation">)</span> <span class="token punctuation">{</span>      runningAsyncCalls<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>call<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">executorService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>call<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      readyAsyncCalls<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>call<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到这里面涉及到很多 Dispatcher 对象里面的常量与变量，所以也能看出 Dispatcher 主要用在异步请求中。先看下 Dispatcher 对象里面的常量与变量：</p><pre class="line-numbers language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/*Dispatcher*/</span>  <span class="token comment" spellcheck="true">// 最大并发请求数</span>  <span class="token keyword">private</span> <span class="token keyword">int</span> maxRequests <span class="token operator">=</span> <span class="token number">64</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 每个主机最大请求数</span>  <span class="token keyword">private</span> <span class="token keyword">int</span> maxRequestsPerHost <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 每次调度程序变为空闲时调用的回调</span>  <span class="token keyword">private</span> <span class="token annotation punctuation">@Nullable</span> Runnable idleCallback<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 用来执行异步任务的线程池</span>  <span class="token keyword">private</span> <span class="token annotation punctuation">@Nullable</span> ExecutorService executorService<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 准备中的异步请求队列</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> Deque<span class="token operator">&lt;</span>AsyncCall<span class="token operator">></span> readyAsyncCalls <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 正在运行的异步请求队列</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> Deque<span class="token operator">&lt;</span>AsyncCall<span class="token operator">></span> runningAsyncCalls <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 正在运行的同步请求队列</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> Deque<span class="token operator">&lt;</span>RealCall<span class="token operator">></span> runningSyncCalls <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>弄懂了这些常量与变量的意思，就很好理解上面关注点（1）的 enqueue() 方法了，即如果 ”正在运行的异步请求队列数“ 小于 ”最大并发请求数“，并且 ”每个主机正在运行的请求数“ 小于 ”每个主机最大请求数“，则将当前请求继续加入 ”正在运行的异步请求队列“ 并在线程池中执行，否则将当前请求加入 ”准备中的异步请求队列“。</p><p>我们看到线程池中还传了一个 AsyncCall 进去，点击进去看看：</p><pre class="line-numbers language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/*RealCall*/</span>  <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">AsyncCall</span> <span class="token keyword">extends</span> <span class="token class-name">NamedRunnable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Callback responseCallback<span class="token punctuation">;</span>    <span class="token function">AsyncCall</span><span class="token punctuation">(</span>Callback responseCallback<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">"OkHttp %s"</span><span class="token punctuation">,</span> <span class="token function">redactedUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>responseCallback <span class="token operator">=</span> responseCallback<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    String <span class="token function">host</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> originalRequest<span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">host</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Request <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> originalRequest<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    RealCall <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> RealCall<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span> <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">boolean</span> signalledCallback <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>        Response response <span class="token operator">=</span> <span class="token function">getResponseWithInterceptorChain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// (1)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>retryAndFollowUpInterceptor<span class="token punctuation">.</span><span class="token function">isCanceled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          signalledCallback <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>          responseCallback<span class="token punctuation">.</span><span class="token function">onFailure</span><span class="token punctuation">(</span>RealCall<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">IOException</span><span class="token punctuation">(</span><span class="token string">"Canceled"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// (2)</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          signalledCallback <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>          responseCallback<span class="token punctuation">.</span><span class="token function">onResponse</span><span class="token punctuation">(</span>RealCall<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// (3)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>signalledCallback<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// Do not signal the callback twice!</span>          Platform<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>INFO<span class="token punctuation">,</span> <span class="token string">"Callback failure for "</span> <span class="token operator">+</span> <span class="token function">toLoggableString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          eventListener<span class="token punctuation">.</span><span class="token function">callFailed</span><span class="token punctuation">(</span>RealCall<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>          responseCallback<span class="token punctuation">.</span><span class="token function">onFailure</span><span class="token punctuation">(</span>RealCall<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// (4)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        client<span class="token punctuation">.</span><span class="token function">dispatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">finished</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// (5)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发现他是 RealCall 的内部类，继承 NamedRunnable，实现了 Runnable。里面同样执行了 execute() 方法，仔细看这个方法与之前我们阅读同步请求中的 execute() 类似，关注点（1）（5）都是一样的，不同的是多了 2 个回调，因为是异步请求，所以需要把最终返回的结果通过 responseCallback 回调到最外层我们使用的地方去，其中（2）（4）是失败的回调，（3）是成功的回调。</p><p>到这里，OkHttp 基本使用的第（4）步除了 getResponseWithInterceptorChain() 方法，其他都看完了，下面就重点阅读这个方法。</p><h3 id="2-4-3-拦截器"><a href="#2-4-3-拦截器" class="headerlink" title="2.4.3 拦截器"></a>2.4.3 拦截器</h3><p>点击 getResponseWithInterceptorChain() 方法进去看看：</p><pre class="line-numbers language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/*RealCall*/</span>  Response <span class="token function">getResponseWithInterceptorChain</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 创建一个拦截器集合</span>    List<span class="token operator">&lt;</span>Interceptor<span class="token operator">></span> interceptors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 添加用户自定义的拦截器</span>    interceptors<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>client<span class="token punctuation">.</span><span class="token function">interceptors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 添加重试与重定向拦截器</span>    interceptors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>retryAndFollowUpInterceptor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 添加桥拦截器</span>    interceptors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BridgeInterceptor</span><span class="token punctuation">(</span>client<span class="token punctuation">.</span><span class="token function">cookieJar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 添加缓存拦截器</span>    interceptors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CacheInterceptor</span><span class="token punctuation">(</span>client<span class="token punctuation">.</span><span class="token function">internalCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 添加连接拦截器</span>    interceptors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ConnectInterceptor</span><span class="token punctuation">(</span>client<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>forWebSocket<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 添加用户自定义的网络拦截器</span>      interceptors<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>client<span class="token punctuation">.</span><span class="token function">networkInterceptors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 添加服务器请求拦截器</span>    interceptors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CallServerInterceptor</span><span class="token punctuation">(</span>forWebSocket<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// (1) 构建责任链</span>    Interceptor<span class="token punctuation">.</span>Chain chain <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RealInterceptorChain</span><span class="token punctuation">(</span>interceptors<span class="token punctuation">,</span> null<span class="token punctuation">,</span> null<span class="token punctuation">,</span> null<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>        originalRequest<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> eventListener<span class="token punctuation">,</span> client<span class="token punctuation">.</span><span class="token function">connectTimeoutMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        client<span class="token punctuation">.</span><span class="token function">readTimeoutMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> client<span class="token punctuation">.</span><span class="token function">writeTimeoutMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// (2) 处理责任链中的拦截器</span>    <span class="token keyword">return</span> chain<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span>originalRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，这里用到了很多拦截器，将这些拦截器构建成一条责任链，然后再一个个处理。这里用到了责任链模式，每个拦截器负责相应的功能，上一个拦截器完成会传给下一个拦截器，直到最后一个拦截器执行完再一层层向上返回 Response。</p><p>我们先验证下这个责任链的执行过程是否跟我说的一样，然后再看看每个拦截器的具体作用。这里我标记了 2 个关注点：<br>关注点（1）是构建一条责任链，并把责任链需要用到的参数传过去，其中参数 5 为责任链的索引，这里传 “0” 表示当前正在处理第一个拦截器。</p><p>关注点（2）是处理责任链中的拦截器，点击 proceed() 方法进去看看：</p><pre class="line-numbers language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/*RealInterceptorChain*/</span>  <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> Response <span class="token function">proceed</span><span class="token punctuation">(</span>Request request<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">proceed</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> streamAllocation<span class="token punctuation">,</span> httpCodec<span class="token punctuation">,</span> connection<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> Response <span class="token function">proceed</span><span class="token punctuation">(</span>Request request<span class="token punctuation">,</span> StreamAllocation streamAllocation<span class="token punctuation">,</span> HttpCodec httpCodec<span class="token punctuation">,</span>      RealConnection connection<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">>=</span> interceptors<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AssertionError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    calls<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// If we already have a stream, confirm that the incoming request will use it.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>httpCodec <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>connection<span class="token punctuation">.</span><span class="token function">supportsUrl</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"network interceptor "</span> <span class="token operator">+</span> interceptors<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>          <span class="token operator">+</span> <span class="token string">" must retain the same host and port"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// If we already have a stream, confirm that this is the only call to chain.proceed().</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>httpCodec <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> calls <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"network interceptor "</span> <span class="token operator">+</span> interceptors<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>          <span class="token operator">+</span> <span class="token string">" must call proceed() exactly once"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//（1）start</span>    RealInterceptorChain next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RealInterceptorChain</span><span class="token punctuation">(</span>interceptors<span class="token punctuation">,</span> streamAllocation<span class="token punctuation">,</span> httpCodec<span class="token punctuation">,</span>        connection<span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> request<span class="token punctuation">,</span> call<span class="token punctuation">,</span> eventListener<span class="token punctuation">,</span> connectTimeout<span class="token punctuation">,</span> readTimeout<span class="token punctuation">,</span>        writeTimeout<span class="token punctuation">)</span><span class="token punctuation">;</span>    Interceptor interceptor <span class="token operator">=</span> interceptors<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    Response response <span class="token operator">=</span> interceptor<span class="token punctuation">.</span><span class="token function">intercept</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// （1）end</span>    <span class="token comment" spellcheck="true">// Confirm that the next interceptor made its required call to chain.proceed().</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>httpCodec <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> index <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> interceptors<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> next<span class="token punctuation">.</span>calls <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"network interceptor "</span> <span class="token operator">+</span> interceptor          <span class="token operator">+</span> <span class="token string">" must call proceed() exactly once"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Confirm that the intercepted response isn't null.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>response <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token string">"interceptor "</span> <span class="token operator">+</span> interceptor <span class="token operator">+</span> <span class="token string">" returned null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>          <span class="token string">"interceptor "</span> <span class="token operator">+</span> interceptor <span class="token operator">+</span> <span class="token string">" returned a response with no body"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> response<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，除了一些判断只需要看关注点（1）即可。这里会构建一个新的责任链，然后把责任链的索引加 1（为了下次从拦截器集合中取出下一个拦截器），接着从拦截器集合中取出当前拦截器并调用 intercept() 方法，这样如果这个拦截器可以完成任务会马上返回 Response，否则会在 intercept() 方法中继续处理责任链，因为该 intercept() 方法中会继续调用责任链的 proceed() 方法。看完源码确实跟我们之前设想的一样的，接下来我们看看每个拦截器的具体作用。</p><h4 id="2-4-3-1-重试与重定向拦截器（RetryAndFollowUpInterceptor）"><a href="#2-4-3-1-重试与重定向拦截器（RetryAndFollowUpInterceptor）" class="headerlink" title="2.4.3.1 重试与重定向拦截器（RetryAndFollowUpInterceptor）"></a>2.4.3.1 重试与重定向拦截器（RetryAndFollowUpInterceptor）</h4><p>该拦截器主要负责失败后重连以及重定向，从前面的 proceed() 方法可知，每个拦截器被调用的方法都是 intercept() 方法，所以阅读拦截器的入口就是该方法。</p><p>重试与重定向拦截器中的 intercept() 方法如下：</p><pre class="line-numbers language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/*RetryAndFollowUpInterceptor*/</span>  <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> Response <span class="token function">intercept</span><span class="token punctuation">(</span>Chain chain<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    Request request <span class="token operator">=</span> chain<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    RealInterceptorChain realChain <span class="token operator">=</span> <span class="token punctuation">(</span>RealInterceptorChain<span class="token punctuation">)</span> chain<span class="token punctuation">;</span>    Call call <span class="token operator">=</span> realChain<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    EventListener eventListener <span class="token operator">=</span> realChain<span class="token punctuation">.</span><span class="token function">eventListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// (1) 创建 StreamAllocation 对象，用来协调三个实体（Connections、Streams、Calls）之间的关系</span>    StreamAllocation streamAllocation <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StreamAllocation</span><span class="token punctuation">(</span>client<span class="token punctuation">.</span><span class="token function">connectionPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token function">createAddress</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> call<span class="token punctuation">,</span> eventListener<span class="token punctuation">,</span> callStackTrace<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>streamAllocation <span class="token operator">=</span> streamAllocation<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 重定向次数</span>    <span class="token keyword">int</span> followUpCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    Response priorResponse <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>canceled<span class="token punctuation">)</span> <span class="token punctuation">{</span>        streamAllocation<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IOException</span><span class="token punctuation">(</span><span class="token string">"Canceled"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      Response response<span class="token punctuation">;</span>      <span class="token keyword">boolean</span> releaseConnection <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">//（2）执行下一个拦截器</span>        response <span class="token operator">=</span> realChain<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> streamAllocation<span class="token punctuation">,</span> null<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        releaseConnection <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RouteException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//（3）发生 Route 异常，则尝试进行恢复</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">recover</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getLastConnectException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> streamAllocation<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">throw</span> e<span class="token punctuation">.</span><span class="token function">getFirstConnectException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        releaseConnection <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">continue</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//（4）发生 IO 异常，则尝试进行恢复</span>        <span class="token keyword">boolean</span> requestSendStarted <span class="token operator">=</span> <span class="token operator">!</span><span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">ConnectionShutdownException</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">recover</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> streamAllocation<span class="token punctuation">,</span> requestSendStarted<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> e<span class="token punctuation">;</span>        releaseConnection <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">continue</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 如果中途出现异常，则释放所有资源</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>releaseConnection<span class="token punctuation">)</span> <span class="token punctuation">{</span>          streamAllocation<span class="token punctuation">.</span><span class="token function">streamFailed</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>          streamAllocation<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 构建 body 为空的响应体</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>priorResponse <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        response <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">priorResponse</span><span class="token punctuation">(</span>priorResponse<span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      Request followUp<span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// （5）检查是否需要重定向，不需要则 followUp 返回 null</span>        followUp <span class="token operator">=</span> <span class="token function">followUpRequest</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span> streamAllocation<span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        streamAllocation<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">throw</span> e<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// （6）不需要重定向，则返回之前的 response</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>followUp <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>forWebSocket<span class="token punctuation">)</span> <span class="token punctuation">{</span>          streamAllocation<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> response<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 关闭资源</span>      <span class="token function">closeQuietly</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 重定向次数大于最大值，则释放 StreamAllocation 并抛出异常</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>followUpCount <span class="token operator">></span> MAX_FOLLOW_UPS<span class="token punctuation">)</span> <span class="token punctuation">{</span>        streamAllocation<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ProtocolException</span><span class="token punctuation">(</span><span class="token string">"Too many follow-up requests: "</span> <span class="token operator">+</span> followUpCount<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>followUp<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">UnrepeatableRequestBody</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        streamAllocation<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">HttpRetryException</span><span class="token punctuation">(</span><span class="token string">"Cannot retry streamed HTTP body"</span><span class="token punctuation">,</span> response<span class="token punctuation">.</span><span class="token function">code</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 如果该请求无法复用之前的连接，则释放后重新创建</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">sameConnection</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span> followUp<span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        streamAllocation<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        streamAllocation <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StreamAllocation</span><span class="token punctuation">(</span>client<span class="token punctuation">.</span><span class="token function">connectionPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token function">createAddress</span><span class="token punctuation">(</span>followUp<span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> call<span class="token punctuation">,</span> eventListener<span class="token punctuation">,</span> callStackTrace<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>streamAllocation <span class="token operator">=</span> streamAllocation<span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>streamAllocation<span class="token punctuation">.</span><span class="token function">codec</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"Closing the body of "</span> <span class="token operator">+</span> response            <span class="token operator">+</span> <span class="token string">" didn't close its backing stream. Bad interceptor?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      request <span class="token operator">=</span> followUp<span class="token punctuation">;</span>      priorResponse <span class="token operator">=</span> response<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该方法的注释都写的比较详细了，我们重点看下我标记的关注点。  </p><ul><li><p>（1）：创建 StreamAllocation 对象，StreamAllocation 相当于一个管理类，用来协调三个实体（Connections、Streams、Calls）之间的关系。这里还传了一个 client.connectionPool()，它是第一步创建 OkHttpClient 对象的时候创建的，是一个连接池。它们会在后面的连接拦截器（ConnectInterceptor）中才被真正的使用到，后面会讲。<br>其中：<br>Connections：连接到远程服务器的物理套接字。<br>Streams：在连接上分层的逻辑 http 请求/响应对。<br>Calls：流的逻辑序列，通常是初始请求以及它的重定向请求。</p></li><li><p>（2）：是执行下一个拦截器，按顺序调用那就是 BridgeInterceptor。</p></li><li><p>（3）（4）：发生 Route 或 IO 异常，则进行重试，我们看看重试的相关方法：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*RetryAndFollowUpInterceptor*/</span><span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">recover</span><span class="token punctuation">(</span>IOException e<span class="token punctuation">,</span> StreamAllocation streamAllocation<span class="token punctuation">,</span>    <span class="token keyword">boolean</span> requestSendStarted<span class="token punctuation">,</span> Request userRequest<span class="token punctuation">)</span> <span class="token punctuation">{</span>  streamAllocation<span class="token punctuation">.</span><span class="token function">streamFailed</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 客户端配置了出错不再重试</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>client<span class="token punctuation">.</span><span class="token function">retryOnConnectionFailure</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 无法再次发送 request body</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>requestSendStarted <span class="token operator">&amp;&amp;</span> userRequest<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">UnrepeatableRequestBody</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 发生 isRecoverable() 方法中出现的异常</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isRecoverable</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> requestSendStarted<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 没有更多的路线可供尝试</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>streamAllocation<span class="token punctuation">.</span><span class="token function">hasMoreRoutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// For failure recovery, use the same route selector with a new connection.</span>  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">isRecoverable</span><span class="token punctuation">(</span>IOException e<span class="token punctuation">,</span> <span class="token keyword">boolean</span> requestSendStarted<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 协议异常</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">ProtocolException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 中断异常</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">InterruptedIOException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> e <span class="token keyword">instanceof</span> <span class="token class-name">SocketTimeoutException</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>requestSendStarted<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// SSL握手异常</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">SSLHandshakeException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// If the problem was a CertificateException from the X509TrustManager,</span>    <span class="token comment" spellcheck="true">// do not retry.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">CertificateException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// SSL握手未授权异常</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">SSLPeerUnverifiedException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// e.g. a certificate pinning error.</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// An example of one we might want to retry with a different route is a problem connecting to a</span>  <span class="token comment" spellcheck="true">// proxy and would manifest as a standard IOException. Unless it is one we know we should not</span>  <span class="token comment" spellcheck="true">// retry, we return true and try a new route.</span>  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>可以看到尝试进行重试的时候，如果出现以下情况则不会重试：</p><ul><li><p>客户端配置了出错不再重试</p></li><li><p>无法再次发送 request body</p></li><li><p>发生 ProtocolException（协议异常）、InterruptedIOException（中断异常）、SSLHandshakeException（SSL握手异常）、SSLPeerUnverifiedException（SSL握手未授权异常）中的任意一个异常</p></li><li><p>没有更多的路线可供尝试</p></li><li><p>（5）（6）：检查是否需要重定向，如果不需要则返回之前的 response，需要则进行重定向，也就是继续循环请求重试。是否需要重定向主要根据响应码来决定，具体可以去看看 followUpRequest() 方法，这里就不贴代码了。</p></li></ul><p>ps：如果你想拿重定向的域名来跟一遍源码中重定向的流程，那么你可以试试郭霖的域名（<code>http://guolin.tech</code>）， 该域名会重定向到他的 csdn 博客（<code>https://blog.csdn.net/guolin_blog</code>）， 走一遍流程会让你对源码中重定向的原理有更深的理解。</p><h4 id="2-4-3-2-桥拦截器（BridgeInterceptor）"><a href="#2-4-3-2-桥拦截器（BridgeInterceptor）" class="headerlink" title="2.4.3.2 桥拦截器（BridgeInterceptor）"></a>2.4.3.2 桥拦截器（BridgeInterceptor）</h4><p>该拦截器相当于一个桥梁，首先将用户的请求转换为发给服务器的请求，然后使用该请求访问网络，最后将服务器返回的响应转换为用户可用的响应。</p><p>我们看看该拦截器中的 intercept() 方法：</p><pre class="line-numbers language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/*BridgeInterceptor*/</span>  <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> Response <span class="token function">intercept</span><span class="token punctuation">(</span>Chain chain<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    Request userRequest <span class="token operator">=</span> chain<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Request<span class="token punctuation">.</span>Builder requestBuilder <span class="token operator">=</span> userRequest<span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//（1）将用户的请求转换为发给服务器的请求-start</span>    RequestBody body <span class="token operator">=</span> userRequest<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>body <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      MediaType contentType <span class="token operator">=</span> body<span class="token punctuation">.</span><span class="token function">contentType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>contentType <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        requestBuilder<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Content-Type"</span><span class="token punctuation">,</span> contentType<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">long</span> contentLength <span class="token operator">=</span> body<span class="token punctuation">.</span><span class="token function">contentLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>contentLength <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        requestBuilder<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Content-Length"</span><span class="token punctuation">,</span> Long<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>contentLength<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        requestBuilder<span class="token punctuation">.</span><span class="token function">removeHeader</span><span class="token punctuation">(</span><span class="token string">"Transfer-Encoding"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        requestBuilder<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Transfer-Encoding"</span><span class="token punctuation">,</span> <span class="token string">"chunked"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        requestBuilder<span class="token punctuation">.</span><span class="token function">removeHeader</span><span class="token punctuation">(</span><span class="token string">"Content-Length"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>userRequest<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Host"</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      requestBuilder<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Host"</span><span class="token punctuation">,</span> <span class="token function">hostHeader</span><span class="token punctuation">(</span>userRequest<span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>userRequest<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Connection"</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      requestBuilder<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Connection"</span><span class="token punctuation">,</span> <span class="token string">"Keep-Alive"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// 如果我们在创建 Request 的时候添加了 "Accept-Encoding: gzip" 请求头，那么要自己负责解压缩传输流。</span>    <span class="token keyword">boolean</span> transparentGzip <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>userRequest<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Accept-Encoding"</span><span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> userRequest<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Range"</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 默认是 gzip 压缩</span>      transparentGzip <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      requestBuilder<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Accept-Encoding"</span><span class="token punctuation">,</span> <span class="token string">"gzip"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    List<span class="token operator">&lt;</span>Cookie<span class="token operator">></span> cookies <span class="token operator">=</span> cookieJar<span class="token punctuation">.</span><span class="token function">loadForRequest</span><span class="token punctuation">(</span>userRequest<span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cookies<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      requestBuilder<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Cookie"</span><span class="token punctuation">,</span> <span class="token function">cookieHeader</span><span class="token punctuation">(</span>cookies<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>userRequest<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"User-Agent"</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      requestBuilder<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"User-Agent"</span><span class="token punctuation">,</span> Version<span class="token punctuation">.</span><span class="token function">userAgent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//（1）将用户的请求转换为发给服务器的请求-end</span>    <span class="token comment" spellcheck="true">//（2）执行下一个拦截器进行网络请求</span>    Response networkResponse <span class="token operator">=</span> chain<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span>requestBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//（3）将服务器返回的响应转换为用户可用的响应-start</span>    <span class="token comment" spellcheck="true">// 解析服务器返回的 header</span>    HttpHeaders<span class="token punctuation">.</span><span class="token function">receiveHeaders</span><span class="token punctuation">(</span>cookieJar<span class="token punctuation">,</span> userRequest<span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> networkResponse<span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Response<span class="token punctuation">.</span>Builder responseBuilder <span class="token operator">=</span> networkResponse<span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>userRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// gzip 解压</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>transparentGzip        <span class="token operator">&amp;&amp;</span> <span class="token string">"gzip"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>networkResponse<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Content-Encoding"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token operator">&amp;&amp;</span> HttpHeaders<span class="token punctuation">.</span><span class="token function">hasBody</span><span class="token punctuation">(</span>networkResponse<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      GzipSource responseBody <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GzipSource</span><span class="token punctuation">(</span>networkResponse<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Headers strippedHeaders <span class="token operator">=</span> networkResponse<span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">removeAll</span><span class="token punctuation">(</span><span class="token string">"Content-Encoding"</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">removeAll</span><span class="token punctuation">(</span><span class="token string">"Content-Length"</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      responseBuilder<span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span>strippedHeaders<span class="token punctuation">)</span><span class="token punctuation">;</span>      String contentType <span class="token operator">=</span> networkResponse<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Content-Type"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      responseBuilder<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RealResponseBody</span><span class="token punctuation">(</span>contentType<span class="token punctuation">,</span> <span class="token operator">-</span>1L<span class="token punctuation">,</span> Okio<span class="token punctuation">.</span><span class="token function">buffer</span><span class="token punctuation">(</span>responseBody<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//（3）将服务器返回的响应转换为用户可用的响应-end</span>    <span class="token keyword">return</span> responseBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据我标记的关注点大概就是：</p><ul><li>（1）：将用户的请求转换为发给服务器的请求。主要是添加一些默认的请求头，例如 Content-Type、Content-Length、Transfer-Encoding、Host、Connection。因为我们在创建 Request 的时候可以不添加任何请求头，如果这里不加上一些默认的请求头是无法完成请求的。</li><li>（2）：执行下一个拦截器进行网络请求。</li><li>（3）：将服务器返回的响应转换为用户可用的响应。主要是解析服务器返回的 header，进行 gzip 解压。</li></ul><h4 id="2-4-3-3-缓存拦截器（CacheInterceptor）"><a href="#2-4-3-3-缓存拦截器（CacheInterceptor）" class="headerlink" title="2.4.3.3 缓存拦截器（CacheInterceptor）"></a>2.4.3.3 缓存拦截器（CacheInterceptor）</h4><p>该拦截器主要用来实现缓存的读取和存储，即进行网络请求的时候执行到缓存拦截器会先判断是否有缓存，如果有会直接返回缓存，没有则会执行后面的拦截器继续请求网络，请求成功会将请求到的数据缓存起来。</p><p>我们看看该拦截器中的 intercept() 方法：</p><pre class="line-numbers language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/*CacheInterceptor*/</span>  <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> Response <span class="token function">intercept</span><span class="token punctuation">(</span>Chain chain<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//（1）通过 Request 得到缓存</span>    Response cacheCandidate <span class="token operator">=</span> cache <span class="token operator">!=</span> null        <span class="token operator">?</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>chain<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token operator">:</span> null<span class="token punctuation">;</span>    <span class="token keyword">long</span> now <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//（2）通过缓存策略获取是使用缓存还是使用网络请求，或者 2 者同时使用或都不使用</span>    CacheStrategy strategy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CacheStrategy<span class="token punctuation">.</span>Factory</span><span class="token punctuation">(</span>now<span class="token punctuation">,</span> chain<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cacheCandidate<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Request networkRequest <span class="token operator">=</span> strategy<span class="token punctuation">.</span>networkRequest<span class="token punctuation">;</span>    Response cacheResponse <span class="token operator">=</span> strategy<span class="token punctuation">.</span>cacheResponse<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cache <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      cache<span class="token punctuation">.</span><span class="token function">trackResponse</span><span class="token punctuation">(</span>strategy<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 有缓存，但是策略中不使用缓存，需要释放资源</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cacheCandidate <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> cacheResponse <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">closeQuietly</span><span class="token punctuation">(</span>cacheCandidate<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// （3）如果策略中不使用网络请求，也不使用缓存，那么直接返回失败</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>networkRequest <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> cacheResponse <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Response<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>chain<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">protocol</span><span class="token punctuation">(</span>Protocol<span class="token punctuation">.</span>HTTP_1_1<span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">code</span><span class="token punctuation">(</span><span class="token number">504</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">message</span><span class="token punctuation">(</span><span class="token string">"Unsatisfiable Request (only-if-cached)"</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span>Util<span class="token punctuation">.</span>EMPTY_RESPONSE<span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">sentRequestAtMillis</span><span class="token punctuation">(</span><span class="token operator">-</span>1L<span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">receivedResponseAtMillis</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//（4）如果策略中不使用网络请求，执行到这里说明是使用缓存的，则直接返回缓存</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>networkRequest <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> cacheResponse<span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">cacheResponse</span><span class="token punctuation">(</span><span class="token function">stripBody</span><span class="token punctuation">(</span>cacheResponse<span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Response networkResponse <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//（5）执行下一个拦截器进行网络请求</span>      networkResponse <span class="token operator">=</span> chain<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span>networkRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 如果发生 IO 或者其他崩溃，为了不泄漏缓存体，需要释放资源</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>networkResponse <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> cacheCandidate <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">closeQuietly</span><span class="token punctuation">(</span>cacheCandidate<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//（6）如果策略中使用缓存，并且响应码为 304，则返回缓存</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cacheResponse <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>networkResponse<span class="token punctuation">.</span><span class="token function">code</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> HTTP_NOT_MODIFIED<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Response response <span class="token operator">=</span> cacheResponse<span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span><span class="token function">combine</span><span class="token punctuation">(</span>cacheResponse<span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> networkResponse<span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">sentRequestAtMillis</span><span class="token punctuation">(</span>networkResponse<span class="token punctuation">.</span><span class="token function">sentRequestAtMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">receivedResponseAtMillis</span><span class="token punctuation">(</span>networkResponse<span class="token punctuation">.</span><span class="token function">receivedResponseAtMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">cacheResponse</span><span class="token punctuation">(</span><span class="token function">stripBody</span><span class="token punctuation">(</span>cacheResponse<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">networkResponse</span><span class="token punctuation">(</span><span class="token function">stripBody</span><span class="token punctuation">(</span>networkResponse<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        networkResponse<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cache<span class="token punctuation">.</span><span class="token function">trackConditionalCacheHit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 更新缓存</span>        cache<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>cacheResponse<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> response<span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">closeQuietly</span><span class="token punctuation">(</span>cacheResponse<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    Response response <span class="token operator">=</span> networkResponse<span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">cacheResponse</span><span class="token punctuation">(</span><span class="token function">stripBody</span><span class="token punctuation">(</span>cacheResponse<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">networkResponse</span><span class="token punctuation">(</span><span class="token function">stripBody</span><span class="token punctuation">(</span>networkResponse<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cache <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>HttpHeaders<span class="token punctuation">.</span><span class="token function">hasBody</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> CacheStrategy<span class="token punctuation">.</span><span class="token function">isCacheable</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span> networkRequest<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//（7）将请求返回的结果存进缓存</span>        CacheRequest cacheRequest <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">cacheWritingResponse</span><span class="token punctuation">(</span>cacheRequest<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>HttpMethod<span class="token punctuation">.</span><span class="token function">invalidatesCache</span><span class="token punctuation">(</span>networkRequest<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>          cache<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>networkRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ignored<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// The cache cannot be written.</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> response<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据我标记的关注点大概流程就是：</p><ul><li>（1）：通过 Request 得到缓存。这里的 cache 是 InternalCache，但是因为 InternalCache 是一个接口，而且只有一个实现类 Cache，所以 cache 其实就是 Cache。进入 Cache 可以发现它底层使用的是 DiskLruCache 缓存机制，也就是使用 “最近最少使用” 算法将数据缓存到磁盘内。</li><li>（2）：通过缓存策略获取是使用缓存还是使用网络请求，或者 2 者同时使用或都不使用。networkRequest 为 null 表示不使用网络请求，cacheResponse 为 null 表示不使用缓存。</li><li>（3）：如果策略中不使用网络请求，也不使用缓存，那么直接返回失败。这样就直接停止了后面拦截器的执行，结束了整个请求。</li><li>（4）：如果策略中不使用网络请求，执行到这里说明是使用缓存的，则直接返回缓存。这样就直接停止了后面拦截器的执行，结束了整个请求。</li><li>（5）：执行到这里，说明需要从网络获取数据，则会继续执行下一个拦截器进行网络请求。</li><li>（6）：如果策略中使用缓存，并且响应码为 304，则返回缓存，并且更新缓存。</li><li>（7）：最后将请求返回的结果进行缓存。</li></ul><h4 id="2-4-3-4-连接拦截器（ConnectInterceptor）"><a href="#2-4-3-4-连接拦截器（ConnectInterceptor）" class="headerlink" title="2.4.3.4 连接拦截器（ConnectInterceptor）"></a>2.4.3.4 连接拦截器（ConnectInterceptor）</h4><p>该拦截器主要用来打开与目标服务器的连接，然后继续执行下一个拦截器。</p><p>我们看看该拦截器中的 intercept() 方法：</p><pre class="line-numbers language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/*ConnectInterceptor*/</span>  <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> Response <span class="token function">intercept</span><span class="token punctuation">(</span>Chain chain<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    RealInterceptorChain realChain <span class="token operator">=</span> <span class="token punctuation">(</span>RealInterceptorChain<span class="token punctuation">)</span> chain<span class="token punctuation">;</span>    Request request <span class="token operator">=</span> realChain<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//（1）获取 StreamAllocation</span>    StreamAllocation streamAllocation <span class="token operator">=</span> realChain<span class="token punctuation">.</span><span class="token function">streamAllocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// We need the network to satisfy this request. Possibly for validating a conditional GET.</span>    <span class="token keyword">boolean</span> doExtensiveHealthChecks <span class="token operator">=</span> <span class="token operator">!</span>request<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//（2）创建 HttpCodec</span>    HttpCodec httpCodec <span class="token operator">=</span> streamAllocation<span class="token punctuation">.</span><span class="token function">newStream</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span> chain<span class="token punctuation">,</span> doExtensiveHealthChecks<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//（3）获取 RealConnection</span>    RealConnection connection <span class="token operator">=</span> streamAllocation<span class="token punctuation">.</span><span class="token function">connection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//（4）执行下一个拦截器</span>    <span class="token keyword">return</span> realChain<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> streamAllocation<span class="token punctuation">,</span> httpCodec<span class="token punctuation">,</span> connection<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据我标记的关注点大概流程就是：</p><ul><li><p>（1）：获取 StreamAllocation，这里获取的其实就是第一个拦截器 RetryAndFollowUpInterceptor 中创建的。</p></li><li><p>（2）：创建 HttpCodec，是通过 StreamAllocation 的 newStream() 方法获取的，我们看下 newStream() 方法：</p><pre class="line-numbers language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/*StreamAllocation*/</span>  <span class="token keyword">public</span> HttpCodec <span class="token function">newStream</span><span class="token punctuation">(</span>    OkHttpClient client<span class="token punctuation">,</span> Interceptor<span class="token punctuation">.</span>Chain chain<span class="token punctuation">,</span> <span class="token keyword">boolean</span> doExtensiveHealthChecks<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">int</span> connectTimeout <span class="token operator">=</span> chain<span class="token punctuation">.</span><span class="token function">connectTimeoutMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> readTimeout <span class="token operator">=</span> chain<span class="token punctuation">.</span><span class="token function">readTimeoutMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> writeTimeout <span class="token operator">=</span> chain<span class="token punctuation">.</span><span class="token function">writeTimeoutMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> pingIntervalMillis <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">pingIntervalMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">boolean</span> connectionRetryEnabled <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">retryOnConnectionFailure</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">//（5）寻找可用的连接</span>    RealConnection resultConnection <span class="token operator">=</span> <span class="token function">findHealthyConnection</span><span class="token punctuation">(</span>connectTimeout<span class="token punctuation">,</span> readTimeout<span class="token punctuation">,</span>        writeTimeout<span class="token punctuation">,</span> pingIntervalMillis<span class="token punctuation">,</span> connectionRetryEnabled<span class="token punctuation">,</span> doExtensiveHealthChecks<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//（6）通过这个可用的连接创建 HttpCodec</span>    HttpCodec resultCodec <span class="token operator">=</span> resultConnection<span class="token punctuation">.</span><span class="token function">newCodec</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span> chain<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>connectionPool<span class="token punctuation">)</span> <span class="token punctuation">{</span>      codec <span class="token operator">=</span> resultCodec<span class="token punctuation">;</span>      <span class="token keyword">return</span> resultCodec<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RouteException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>我们看下关注点（5）中的 findHealthyConnection() 方法：</p><pre class="line-numbers language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/*StreamAllocation*/</span>  <span class="token keyword">private</span> RealConnection <span class="token function">findHealthyConnection</span><span class="token punctuation">(</span><span class="token keyword">int</span> connectTimeout<span class="token punctuation">,</span> <span class="token keyword">int</span> readTimeout<span class="token punctuation">,</span>      <span class="token keyword">int</span> writeTimeout<span class="token punctuation">,</span> <span class="token keyword">int</span> pingIntervalMillis<span class="token punctuation">,</span> <span class="token keyword">boolean</span> connectionRetryEnabled<span class="token punctuation">,</span>      <span class="token keyword">boolean</span> doExtensiveHealthChecks<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">//（7）寻找一个连接</span>      RealConnection candidate <span class="token operator">=</span> <span class="token function">findConnection</span><span class="token punctuation">(</span>connectTimeout<span class="token punctuation">,</span> readTimeout<span class="token punctuation">,</span> writeTimeout<span class="token punctuation">,</span>          pingIntervalMillis<span class="token punctuation">,</span> connectionRetryEnabled<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 如果这是一个全新的连接，则不需要后面的健康检查，而是在这里直接返回连接</span>      <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>connectionPool<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>candidate<span class="token punctuation">.</span>successCount <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> candidate<span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 如果不健康，则禁止创建新流，并且继续循环查找可用的链接</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>candidate<span class="token punctuation">.</span><span class="token function">isHealthy</span><span class="token punctuation">(</span>doExtensiveHealthChecks<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">noNewStreams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">continue</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> candidate<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，findHealthyConnection() 方法中又通过 findConnection() 方法去寻找，看下这个方法：</p><pre class="line-numbers language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/*StreamAllocation*/</span>  <span class="token keyword">private</span> RealConnection <span class="token function">findConnection</span><span class="token punctuation">(</span><span class="token keyword">int</span> connectTimeout<span class="token punctuation">,</span> <span class="token keyword">int</span> readTimeout<span class="token punctuation">,</span> <span class="token keyword">int</span> writeTimeout<span class="token punctuation">,</span>      <span class="token keyword">int</span> pingIntervalMillis<span class="token punctuation">,</span> <span class="token keyword">boolean</span> connectionRetryEnabled<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    <span class="token keyword">boolean</span> foundPooledConnection <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    RealConnection result <span class="token operator">=</span> null<span class="token punctuation">;</span>    Route selectedRoute <span class="token operator">=</span> null<span class="token punctuation">;</span>    Connection releasedConnection<span class="token punctuation">;</span>    Socket toClose<span class="token punctuation">;</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>connectionPool<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>released<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"released"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>codec <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"codec != null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>canceled<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IOException</span><span class="token punctuation">(</span><span class="token string">"Canceled"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//（8）start</span>      <span class="token comment" spellcheck="true">// 尝试使用已分配的连接</span>      releasedConnection <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>connection<span class="token punctuation">;</span>      toClose <span class="token operator">=</span> <span class="token function">releaseIfNoNewStreams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>connection <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 已经分配的连接，并且是可用的，则将该已分配的连接赋值为可用的连接</span>        result <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>connection<span class="token punctuation">;</span>        releasedConnection <span class="token operator">=</span> null<span class="token punctuation">;</span>      <span class="token punctuation">}</span>         <span class="token comment" spellcheck="true">//（8）end</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>reportedAcquired<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 如果这个连接从未标记过已获取，那么请不要标记为为已发布</span>        releasedConnection <span class="token operator">=</span> null<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">//（9）start 尝试从连接池中获取连接</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Internal<span class="token punctuation">.</span>instance<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>connectionPool<span class="token punctuation">,</span> address<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>connection <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>          foundPooledConnection <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>          result <span class="token operator">=</span> connection<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          selectedRoute <span class="token operator">=</span> route<span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">closeQuietly</span><span class="token punctuation">(</span>toClose<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>releasedConnection <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      eventListener<span class="token punctuation">.</span><span class="token function">connectionReleased</span><span class="token punctuation">(</span>call<span class="token punctuation">,</span> releasedConnection<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>foundPooledConnection<span class="token punctuation">)</span> <span class="token punctuation">{</span>      eventListener<span class="token punctuation">.</span><span class="token function">connectionAcquired</span><span class="token punctuation">(</span>call<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 如果找到一个可用的连接，那么直接返回</span>      <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">boolean</span> newRouteSelection <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>selectedRoute <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>routeSelection <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token operator">!</span>routeSelection<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      newRouteSelection <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      routeSelection <span class="token operator">=</span> routeSelector<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>connectionPool<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>canceled<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IOException</span><span class="token punctuation">(</span><span class="token string">"Canceled"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//（10）根据不同的路由再次从连接池中获取可用的连接</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>newRouteSelection<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Route<span class="token operator">></span> routes <span class="token operator">=</span> routeSelection<span class="token punctuation">.</span><span class="token function">getAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> size <span class="token operator">=</span> routes<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          Route route <span class="token operator">=</span> routes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>          Internal<span class="token punctuation">.</span>instance<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>connectionPool<span class="token punctuation">,</span> address<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> route<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>connection <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            foundPooledConnection <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            result <span class="token operator">=</span> connection<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>route <span class="token operator">=</span> route<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">//（11）还是没有找到可用的连接，那么重新创建一个新的连接</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>foundPooledConnection<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>selectedRoute <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>          selectedRoute <span class="token operator">=</span> routeSelection<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        route <span class="token operator">=</span> selectedRoute<span class="token punctuation">;</span>        refusedStreamCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RealConnection</span><span class="token punctuation">(</span>connectionPool<span class="token punctuation">,</span> selectedRoute<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">acquire</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 如果在第二次找到了可用的连接，则直接返回</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>foundPooledConnection<span class="token punctuation">)</span> <span class="token punctuation">{</span>      eventListener<span class="token punctuation">.</span><span class="token function">connectionAcquired</span><span class="token punctuation">(</span>call<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//（12）进行 TCP 和 TLS 握手</span>    result<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>connectTimeout<span class="token punctuation">,</span> readTimeout<span class="token punctuation">,</span> writeTimeout<span class="token punctuation">,</span> pingIntervalMillis<span class="token punctuation">,</span>        connectionRetryEnabled<span class="token punctuation">,</span> call<span class="token punctuation">,</span> eventListener<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">routeDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">connected</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Socket socket <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>connectionPool<span class="token punctuation">)</span> <span class="token punctuation">{</span>      reportedAcquired <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//（13）将新创建的连接放进连接池中</span>      Internal<span class="token punctuation">.</span>instance<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>connectionPool<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 如果同时创建了到同一地址的另一个多路复用连接，则释放这个连接并获取那个多路复用连接。</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">isMultiplexed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        socket <span class="token operator">=</span> Internal<span class="token punctuation">.</span>instance<span class="token punctuation">.</span><span class="token function">deduplicate</span><span class="token punctuation">(</span>connectionPool<span class="token punctuation">,</span> address<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result <span class="token operator">=</span> connection<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">closeQuietly</span><span class="token punctuation">(</span>socket<span class="token punctuation">)</span><span class="token punctuation">;</span>    eventListener<span class="token punctuation">.</span><span class="token function">connectionAcquired</span><span class="token punctuation">(</span>call<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过上面的代码分析，findConnection() 方法大概流程就是：</p><ul><li>（8）：判断当前连接是否可用，可用则进行赋值，在后面直接返回</li><li>（9）：如果当前连接不可用，那么尝试从连接池中获取可用连接</li><li>（10）：如果连接池中找不到可用的连接，那么切换不同的路由再次从连接池中获取可用的连接</li><li>（11）：还是没有找到可用的连接，那么只能重新创建一个新的连接</li><li>（12）：进行 TCP 和 TLS 握手</li><li>（13）：最后将新创建的连接放进连接池中</li></ul><p>可以看到，关注点（9）（13）分别是从连接池中取出连接和存入连接到连接池，分别调用的是 Internal.instance.get() 与 Internal.instance.put（）。<br>我们看下 get() 方法是怎样的，点击 get() 方法进去，发现 Internal 是一个抽象类，它有一个静态的实例，在 OkHttpClient 的静态代码快中被初始化：</p><pre class="line-numbers language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/*OkHttpClient*/</span>  <span class="token keyword">static</span> <span class="token punctuation">{</span>    Internal<span class="token punctuation">.</span>instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Internal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 省略部分代码...</span>      <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> RealConnection <span class="token function">get</span><span class="token punctuation">(</span>ConnectionPool pool<span class="token punctuation">,</span> Address address<span class="token punctuation">,</span>          StreamAllocation streamAllocation<span class="token punctuation">,</span> Route route<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> pool<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>address<span class="token punctuation">,</span> streamAllocation<span class="token punctuation">,</span> route<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// 省略部分代码...</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到 Internal 的 get() 方法中调用的是 ConnectionPool（连接池）的 get() 方法，所以可以肯定这个连接池就是用来操作这些连接的，内部具体怎么操作我们放到后面去讲，这里只需要知道它可以用来存取连接就可以了。</p><p>关注点（12）其实就是与服务器建立连接的核心代码，我们看下这个方法：</p><pre class="line-numbers language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/*RealConnection*/</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token keyword">int</span> connectTimeout<span class="token punctuation">,</span> <span class="token keyword">int</span> readTimeout<span class="token punctuation">,</span> <span class="token keyword">int</span> writeTimeout<span class="token punctuation">,</span>      <span class="token keyword">int</span> pingIntervalMillis<span class="token punctuation">,</span> <span class="token keyword">boolean</span> connectionRetryEnabled<span class="token punctuation">,</span> Call call<span class="token punctuation">,</span>      EventListener eventListener<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>protocol <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"already connected"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*线路选择*/</span>    RouteException routeException <span class="token operator">=</span> null<span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>ConnectionSpec<span class="token operator">></span> connectionSpecs <span class="token operator">=</span> route<span class="token punctuation">.</span><span class="token function">address</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">connectionSpecs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ConnectionSpecSelector connectionSpecSelector <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConnectionSpecSelector</span><span class="token punctuation">(</span>connectionSpecs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>route<span class="token punctuation">.</span><span class="token function">address</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sslSocketFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>connectionSpecs<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>ConnectionSpec<span class="token punctuation">.</span>CLEARTEXT<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RouteException</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UnknownServiceException</span><span class="token punctuation">(</span>            <span class="token string">"CLEARTEXT communication not enabled for client"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      String host <span class="token operator">=</span> route<span class="token punctuation">.</span><span class="token function">address</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">host</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Platform<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isCleartextTrafficPermitted</span><span class="token punctuation">(</span>host<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RouteException</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UnknownServiceException</span><span class="token punctuation">(</span>            <span class="token string">"CLEARTEXT communication to "</span> <span class="token operator">+</span> host <span class="token operator">+</span> <span class="token string">" not permitted by network security policy"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>route<span class="token punctuation">.</span><span class="token function">address</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">protocols</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>Protocol<span class="token punctuation">.</span>H2_PRIOR_KNOWLEDGE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RouteException</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UnknownServiceException</span><span class="token punctuation">(</span>            <span class="token string">"H2_PRIOR_KNOWLEDGE cannot be used with HTTPS"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//（14）如果需要隧道连接，则进行隧道连接</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>route<span class="token punctuation">.</span><span class="token function">requiresTunnel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">connectTunnel</span><span class="token punctuation">(</span>connectTimeout<span class="token punctuation">,</span> readTimeout<span class="token punctuation">,</span> writeTimeout<span class="token punctuation">,</span> call<span class="token punctuation">,</span> eventListener<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>rawSocket <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// We were unable to connect the tunnel but properly closed down our resources.</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">//（15）不需要隧道连接，则直接进行 socket 连接</span>          <span class="token function">connectSocket</span><span class="token punctuation">(</span>connectTimeout<span class="token punctuation">,</span> readTimeout<span class="token punctuation">,</span> call<span class="token punctuation">,</span> eventListener<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 建立协议</span>        <span class="token function">establishProtocol</span><span class="token punctuation">(</span>connectionSpecSelector<span class="token punctuation">,</span> pingIntervalMillis<span class="token punctuation">,</span> call<span class="token punctuation">,</span> eventListener<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 连接结束</span>        eventListener<span class="token punctuation">.</span><span class="token function">connectEnd</span><span class="token punctuation">(</span>call<span class="token punctuation">,</span> route<span class="token punctuation">.</span><span class="token function">socketAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> route<span class="token punctuation">.</span><span class="token function">proxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> protocol<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">closeQuietly</span><span class="token punctuation">(</span>socket<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">closeQuietly</span><span class="token punctuation">(</span>rawSocket<span class="token punctuation">)</span><span class="token punctuation">;</span>        socket <span class="token operator">=</span> null<span class="token punctuation">;</span>        rawSocket <span class="token operator">=</span> null<span class="token punctuation">;</span>        source <span class="token operator">=</span> null<span class="token punctuation">;</span>        sink <span class="token operator">=</span> null<span class="token punctuation">;</span>        handshake <span class="token operator">=</span> null<span class="token punctuation">;</span>        protocol <span class="token operator">=</span> null<span class="token punctuation">;</span>        http2Connection <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 连接失败</span>        eventListener<span class="token punctuation">.</span><span class="token function">connectFailed</span><span class="token punctuation">(</span>call<span class="token punctuation">,</span> route<span class="token punctuation">.</span><span class="token function">socketAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> route<span class="token punctuation">.</span><span class="token function">proxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> null<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>routeException <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>          routeException <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RouteException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          routeException<span class="token punctuation">.</span><span class="token function">addConnectException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>connectionRetryEnabled <span class="token operator">||</span> <span class="token operator">!</span>connectionSpecSelector<span class="token punctuation">.</span><span class="token function">connectionFailed</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">throw</span> routeException<span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>route<span class="token punctuation">.</span><span class="token function">requiresTunnel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> rawSocket <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      ProtocolException exception <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProtocolException</span><span class="token punctuation">(</span><span class="token string">"Too many tunnel connections attempted: "</span>          <span class="token operator">+</span> MAX_TUNNEL_ATTEMPTS<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RouteException</span><span class="token punctuation">(</span>exception<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>http2Connection <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>connectionPool<span class="token punctuation">)</span> <span class="token punctuation">{</span>        allocationLimit <span class="token operator">=</span> http2Connection<span class="token punctuation">.</span><span class="token function">maxConcurrentStreams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关注点（14）（15）最终都会调用 connectSocket() 方法：</p><pre class="line-numbers language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/*RealConnection*/</span>  <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">connectSocket</span><span class="token punctuation">(</span><span class="token keyword">int</span> connectTimeout<span class="token punctuation">,</span> <span class="token keyword">int</span> readTimeout<span class="token punctuation">,</span> Call call<span class="token punctuation">,</span>      EventListener eventListener<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    Proxy proxy <span class="token operator">=</span> route<span class="token punctuation">.</span><span class="token function">proxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Address address <span class="token operator">=</span> route<span class="token punctuation">.</span><span class="token function">address</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 创建 socket</span>    rawSocket <span class="token operator">=</span> proxy<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> Proxy<span class="token punctuation">.</span>Type<span class="token punctuation">.</span>DIRECT <span class="token operator">||</span> proxy<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> Proxy<span class="token punctuation">.</span>Type<span class="token punctuation">.</span>HTTP        <span class="token operator">?</span> address<span class="token punctuation">.</span><span class="token function">socketFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createSocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span>proxy<span class="token punctuation">)</span><span class="token punctuation">;</span>    eventListener<span class="token punctuation">.</span><span class="token function">connectStart</span><span class="token punctuation">(</span>call<span class="token punctuation">,</span> route<span class="token punctuation">.</span><span class="token function">socketAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> proxy<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 设置 socket 超时时间</span>    rawSocket<span class="token punctuation">.</span><span class="token function">setSoTimeout</span><span class="token punctuation">(</span>readTimeout<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//（16）进行 socket 连接</span>      Platform<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">connectSocket</span><span class="token punctuation">(</span>rawSocket<span class="token punctuation">,</span> route<span class="token punctuation">.</span><span class="token function">socketAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> connectTimeout<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ConnectException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      ConnectException ce <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConnectException</span><span class="token punctuation">(</span><span class="token string">"Failed to connect to "</span> <span class="token operator">+</span> route<span class="token punctuation">.</span><span class="token function">socketAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      ce<span class="token punctuation">.</span><span class="token function">initCause</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">throw</span> ce<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      source <span class="token operator">=</span> Okio<span class="token punctuation">.</span><span class="token function">buffer</span><span class="token punctuation">(</span>Okio<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>rawSocket<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      sink <span class="token operator">=</span> Okio<span class="token punctuation">.</span><span class="token function">buffer</span><span class="token punctuation">(</span>Okio<span class="token punctuation">.</span><span class="token function">sink</span><span class="token punctuation">(</span>rawSocket<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NullPointerException</span> npe<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>NPE_THROW_WITH_NULL<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>npe<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IOException</span><span class="token punctuation">(</span>npe<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到 okhttp 底层是通过 socket 进行连接的。</p><p>看完关注点（5）中的 findHealthyConnection() 方法，我们继续回去看关注点（6）的方法：</p><pre class="line-numbers language-java"><code class="language-java">   <span class="token comment" spellcheck="true">/*StreamAllocation*/</span>   <span class="token keyword">public</span> HttpCodec <span class="token function">newCodec</span><span class="token punctuation">(</span>OkHttpClient client<span class="token punctuation">,</span> Interceptor<span class="token punctuation">.</span>Chain chain<span class="token punctuation">,</span>      StreamAllocation streamAllocation<span class="token punctuation">)</span> <span class="token keyword">throws</span> SocketException <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>http2Connection <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Http2Codec</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span> chain<span class="token punctuation">,</span> streamAllocation<span class="token punctuation">,</span> http2Connection<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      socket<span class="token punctuation">.</span><span class="token function">setSoTimeout</span><span class="token punctuation">(</span>chain<span class="token punctuation">.</span><span class="token function">readTimeoutMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      source<span class="token punctuation">.</span><span class="token function">timeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">timeout</span><span class="token punctuation">(</span>chain<span class="token punctuation">.</span><span class="token function">readTimeoutMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> MILLISECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>      sink<span class="token punctuation">.</span><span class="token function">timeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">timeout</span><span class="token punctuation">(</span>chain<span class="token punctuation">.</span><span class="token function">writeTimeoutMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> MILLISECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Http1Codec</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span> streamAllocation<span class="token punctuation">,</span> source<span class="token punctuation">,</span> sink<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该方法是创建 HttpCodec，HttpCodec 的作用主要是进行 HTTP 请求和响应的编码与解码操作。它有两个实现类，分别是 Http1Codec 与 Http2Codec，这里主要判断如果是 HTTP/2，则创建 Http2Codec，否则创建 Http1Codec。</p><ul><li><p>（3）：继续回去看关注点（3），点击 connection() 方法进去发现，这里获取的 RealConnection 其实就是关注点（7） findConnection()<br>方法中从连接池中取出连接或重新创建的连接。</p></li><li><p>（4）：关注点（4）则拿到连接后继续执行下一个拦截器。</p></li></ul><h4 id="2-4-3-5-服务器请求拦截器（CallServerInterceptor）"><a href="#2-4-3-5-服务器请求拦截器（CallServerInterceptor）" class="headerlink" title="2.4.3.5 服务器请求拦截器（CallServerInterceptor）"></a>2.4.3.5 服务器请求拦截器（CallServerInterceptor）</h4><p>该拦截器主要用来向服务器发起请求并获取数据，它是责任链中的最后一个拦截器，获取到服务器的数据后会直接返回给上一个拦截器。</p><p>我们看看该拦截器中的 intercept() 方法：</p><pre class="line-numbers language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/*CallServerInterceptor*/</span>  <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> Response <span class="token function">intercept</span><span class="token punctuation">(</span>Chain chain<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    RealInterceptorChain realChain <span class="token operator">=</span> <span class="token punctuation">(</span>RealInterceptorChain<span class="token punctuation">)</span> chain<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取 ConnectInterceptor 中创建的 HttpCodec</span>    HttpCodec httpCodec <span class="token operator">=</span> realChain<span class="token punctuation">.</span><span class="token function">httpStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取 RetryAndFollowUpInterceptor 中创建的 StreamAllocation</span>    StreamAllocation streamAllocation <span class="token operator">=</span> realChain<span class="token punctuation">.</span><span class="token function">streamAllocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取 ConnectInterceptor 中新创建或者从连接池中拿到的 RealConnection</span>    RealConnection connection <span class="token operator">=</span> <span class="token punctuation">(</span>RealConnection<span class="token punctuation">)</span> realChain<span class="token punctuation">.</span><span class="token function">connection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Request request <span class="token operator">=</span> realChain<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> sentRequestMillis <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    realChain<span class="token punctuation">.</span><span class="token function">eventListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">requestHeadersStart</span><span class="token punctuation">(</span>realChain<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//（1）写入请求头</span>    httpCodec<span class="token punctuation">.</span><span class="token function">writeRequestHeaders</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>    realChain<span class="token punctuation">.</span><span class="token function">eventListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">requestHeadersEnd</span><span class="token punctuation">(</span>realChain<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>    Response<span class="token punctuation">.</span>Builder responseBuilder <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>HttpMethod<span class="token punctuation">.</span><span class="token function">permitsRequestBody</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> request<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// If there's a "Expect: 100-continue" header on the request, wait for a "HTTP/1.1 100</span>      <span class="token comment" spellcheck="true">// Continue" response before transmitting the request body. If we don't get that, return</span>      <span class="token comment" spellcheck="true">// what we did get (such as a 4xx response) without ever transmitting the request body.</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"100-continue"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Expect"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        httpCodec<span class="token punctuation">.</span><span class="token function">flushRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        realChain<span class="token punctuation">.</span><span class="token function">eventListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">responseHeadersStart</span><span class="token punctuation">(</span>realChain<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        responseBuilder <span class="token operator">=</span> httpCodec<span class="token punctuation">.</span><span class="token function">readResponseHeaders</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">//（2）写入请求体</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>responseBuilder <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Write the request body if the "Expect: 100-continue" expectation was met.</span>        realChain<span class="token punctuation">.</span><span class="token function">eventListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">requestBodyStart</span><span class="token punctuation">(</span>realChain<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> contentLength <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contentLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        CountingSink requestBodyOut <span class="token operator">=</span>            <span class="token keyword">new</span> <span class="token class-name">CountingSink</span><span class="token punctuation">(</span>httpCodec<span class="token punctuation">.</span><span class="token function">createRequestBody</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> contentLength<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BufferedSink bufferedRequestBody <span class="token operator">=</span> Okio<span class="token punctuation">.</span><span class="token function">buffer</span><span class="token punctuation">(</span>requestBodyOut<span class="token punctuation">)</span><span class="token punctuation">;</span>        request<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writeTo</span><span class="token punctuation">(</span>bufferedRequestBody<span class="token punctuation">)</span><span class="token punctuation">;</span>        bufferedRequestBody<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        realChain<span class="token punctuation">.</span><span class="token function">eventListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">requestBodyEnd</span><span class="token punctuation">(</span>realChain<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> requestBodyOut<span class="token punctuation">.</span>successfulCount<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>connection<span class="token punctuation">.</span><span class="token function">isMultiplexed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// If the "Expect: 100-continue" expectation wasn't met, prevent the HTTP/1 connection</span>        <span class="token comment" spellcheck="true">// from being reused. Otherwise we're still obligated to transmit the request body to</span>        <span class="token comment" spellcheck="true">// leave the connection in a consistent state.</span>        streamAllocation<span class="token punctuation">.</span><span class="token function">noNewStreams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    httpCodec<span class="token punctuation">.</span><span class="token function">finishRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>responseBuilder <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      realChain<span class="token punctuation">.</span><span class="token function">eventListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">responseHeadersStart</span><span class="token punctuation">(</span>realChain<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//（3）读取响应头</span>      responseBuilder <span class="token operator">=</span> httpCodec<span class="token punctuation">.</span><span class="token function">readResponseHeaders</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Response response <span class="token operator">=</span> responseBuilder        <span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">handshake</span><span class="token punctuation">(</span>streamAllocation<span class="token punctuation">.</span><span class="token function">connection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">handshake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">sentRequestAtMillis</span><span class="token punctuation">(</span>sentRequestMillis<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">receivedResponseAtMillis</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> code <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">code</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>code <span class="token operator">==</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// server sent a 100-continue even though we did not request one.</span>      <span class="token comment" spellcheck="true">// try again to read the actual response</span>      responseBuilder <span class="token operator">=</span> httpCodec<span class="token punctuation">.</span><span class="token function">readResponseHeaders</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      response <span class="token operator">=</span> responseBuilder              <span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">handshake</span><span class="token punctuation">(</span>streamAllocation<span class="token punctuation">.</span><span class="token function">connection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">handshake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">sentRequestAtMillis</span><span class="token punctuation">(</span>sentRequestMillis<span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">receivedResponseAtMillis</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      code <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">code</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    realChain<span class="token punctuation">.</span><span class="token function">eventListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">responseHeadersEnd</span><span class="token punctuation">(</span>realChain<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//（4）读取响应体</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>forWebSocket <span class="token operator">&amp;&amp;</span> code <span class="token operator">==</span> <span class="token number">101</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// Connection is upgrading, but we need to ensure interceptors see a non-null response body.</span>      response <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span>Util<span class="token punctuation">.</span>EMPTY_RESPONSE<span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      response <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span>httpCodec<span class="token punctuation">.</span><span class="token function">openResponseBody</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"close"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Connection"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token operator">||</span> <span class="token string">"close"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Connection"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      streamAllocation<span class="token punctuation">.</span><span class="token function">noNewStreams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>code <span class="token operator">==</span> <span class="token number">204</span> <span class="token operator">||</span> code <span class="token operator">==</span> <span class="token number">205</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> response<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contentLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ProtocolException</span><span class="token punctuation">(</span>          <span class="token string">"HTTP "</span> <span class="token operator">+</span> code <span class="token operator">+</span> <span class="token string">" had non-zero Content-Length: "</span> <span class="token operator">+</span> response<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contentLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> response<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，这个拦截器还是比较简单的，上一个拦截器 ConnectInterceptor 已经连接到服务器了并创建了 HttpCodec 对象，HttpCodec 对象封装了 okio 提供的输出流（BufferedSink）与输入流（BufferedSource），所以这里就主要通过 HttpCodec 对象与服务器进行读写操作。例如写入请求头与请求体，读取响应头与响应体。</p><h3 id="2-4-4-ConnectionPool（连接池）"><a href="#2-4-4-ConnectionPool（连接池）" class="headerlink" title="2.4.4 ConnectionPool（连接池）"></a>2.4.4 ConnectionPool（连接池）</h3><ul><li><p>简介<br>连接池是用来管理 HTTP 和 HTTP / 2 连接的复用，以减少网络延迟。从上面我们阅读 findConnection() 方法源码也可以得出，即如果从连接池中找到了可用的连接，那么就不用重新创建新的连接，也省去了 TCP 和 TLS 握手。</p></li><li><p>ConnectionPool 类中的主要常量</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*ConnectionPool*/</span><span class="token comment" spellcheck="true">// 线程池，用于清除过期的连接</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Executor executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token comment" spellcheck="true">/* corePoolSize */</span><span class="token punctuation">,</span>    Integer<span class="token punctuation">.</span>MAX_VALUE <span class="token comment" spellcheck="true">/* maximumPoolSize */</span><span class="token punctuation">,</span> 60L <span class="token comment" spellcheck="true">/* keepAliveTime */</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">SynchronousQueue</span><span class="token operator">&lt;</span>Runnable<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Util<span class="token punctuation">.</span><span class="token function">threadFactory</span><span class="token punctuation">(</span><span class="token string">"OkHttp ConnectionPool"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 最大允许空闲的连接数量</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> maxIdleConnections<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 连接的存活时间</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> keepAliveDurationNs<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 清理任务，用来清理无效的连接</span><span class="token keyword">private</span> <span class="token keyword">final</span> Runnable cleanupRunnable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//...</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 用来记录连接的双端队列</span><span class="token keyword">private</span> <span class="token keyword">final</span> Deque<span class="token operator">&lt;</span>RealConnection<span class="token operator">></span> connections <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>构造函数</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*ConnectionPool*/</span><span class="token keyword">public</span> <span class="token function">ConnectionPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>MINUTES<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token function">ConnectionPool</span><span class="token punctuation">(</span><span class="token keyword">int</span> maxIdleConnections<span class="token punctuation">,</span> <span class="token keyword">long</span> keepAliveDuration<span class="token punctuation">,</span> TimeUnit timeUnit<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>maxIdleConnections <span class="token operator">=</span> maxIdleConnections<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>keepAliveDurationNs <span class="token operator">=</span> timeUnit<span class="token punctuation">.</span><span class="token function">toNanos</span><span class="token punctuation">(</span>keepAliveDuration<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Put a floor on the keep alive duration, otherwise cleanup will spin loop.</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>keepAliveDuration <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"keepAliveDuration &lt;= 0: "</span> <span class="token operator">+</span> keepAliveDuration<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>可以看到构造函数设置了默认的最大允许空闲的连接数量为 5 个，连接的存活时间为 5 分钟。</p><ul><li>主要函数<br>这里主要讲下前面连接拦截器中用到的 get()、put() 方法。</li></ul><p>get() 方法：</p><pre class="line-numbers language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/*ConnectionPool*/</span>  <span class="token annotation punctuation">@Nullable</span> RealConnection <span class="token function">get</span><span class="token punctuation">(</span>Address address<span class="token punctuation">,</span> StreamAllocation streamAllocation<span class="token punctuation">,</span> Route route<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">assert</span> <span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">holdsLock</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>RealConnection connection <span class="token operator">:</span> connections<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>connection<span class="token punctuation">.</span><span class="token function">isEligible</span><span class="token punctuation">(</span>address<span class="token punctuation">,</span> route<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        streamAllocation<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span>connection<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> connection<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> null<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该方法是从连接池中获取可复用的连接，这里的逻辑是遍历记录连接的双端队列，取出可复用的连接。</p><p>put() 方法：</p><pre class="line-numbers language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/*ConnectionPool*/</span>  <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span>RealConnection connection<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">assert</span> <span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">holdsLock</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cleanupRunning<span class="token punctuation">)</span> <span class="token punctuation">{</span>      cleanupRunning <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 执行清理任务</span>      executor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>cleanupRunnable<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 将新创建的连接添加进记录连接的双端队列中</span>    connections<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该方法是将新创建的连接放进连接池中，这里的逻辑是先清理无效的连接，然后再将新创建的连接添加进记录连接的双端队列中。</p><p>我们先看下清理任务：</p><pre class="line-numbers language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/*ConnectionPool*/</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> Runnable cleanupRunnable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 清理无效连接</span>        <span class="token keyword">long</span> waitNanos <span class="token operator">=</span> <span class="token function">cleanup</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>waitNanos <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>waitNanos <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">long</span> waitMillis <span class="token operator">=</span> waitNanos <span class="token operator">/</span> 1000000L<span class="token punctuation">;</span>          waitNanos <span class="token operator">-=</span> <span class="token punctuation">(</span>waitMillis <span class="token operator">*</span> 1000000L<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>ConnectionPool<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>              ConnectionPool<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span>waitMillis<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> waitNanos<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> ignored<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是一个阻塞的清理任务，并且通过无限循环来清理。这里首先调用 cleanup() 方法清理无效连接，并返回下次需要清理的间隔时间，然后调用 wait() 方法进行等待以释放锁与时间片，当等待时间到了后，再次循环清理。</p><p>我们看下 cleanup() 方法：</p><pre class="line-numbers language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/*ConnectionPool*/</span>  <span class="token keyword">long</span> <span class="token function">cleanup</span><span class="token punctuation">(</span><span class="token keyword">long</span> now<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> inUseConnectionCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> idleConnectionCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    RealConnection longestIdleConnection <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">long</span> longestIdleDurationNs <span class="token operator">=</span> Long<span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 遍历连接，找出无效连接进行清理</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>Iterator<span class="token operator">&lt;</span>RealConnection<span class="token operator">></span> i <span class="token operator">=</span> connections<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>        RealConnection connection <span class="token operator">=</span> i<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//（1）查询此连接的 StreamAllocation 的引用数量，大于 0 则 inUseConnectionCount 加 1，否则 idleConnectionCount 加 1。</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">pruneAndGetAllocationCount</span><span class="token punctuation">(</span>connection<span class="token punctuation">,</span> now<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          inUseConnectionCount<span class="token operator">++</span><span class="token punctuation">;</span>          <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        idleConnectionCount<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 标记空闲连接</span>        <span class="token keyword">long</span> idleDurationNs <span class="token operator">=</span> now <span class="token operator">-</span> connection<span class="token punctuation">.</span>idleAtNanos<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>idleDurationNs <span class="token operator">></span> longestIdleDurationNs<span class="token punctuation">)</span> <span class="token punctuation">{</span>          longestIdleDurationNs <span class="token operator">=</span> idleDurationNs<span class="token punctuation">;</span>          longestIdleConnection <span class="token operator">=</span> connection<span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>longestIdleDurationNs <span class="token operator">>=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>keepAliveDurationNs          <span class="token operator">||</span> idleConnectionCount <span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>maxIdleConnections<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 如果连接存活时间大于等于 5 分钟，或者空闲的连接数量大于 5 个，则将该链接从队列中移除</span>        connections<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>longestIdleConnection<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>idleConnectionCount <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 如果空闲的连接数量大于 0，返回此连接即将到期的时间</span>        <span class="token keyword">return</span> keepAliveDurationNs <span class="token operator">-</span> longestIdleDurationNs<span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>inUseConnectionCount <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 如果没有空闲连接，则返回 5 分钟，也就是下次需要清理的间隔时间为 5 分钟</span>        <span class="token keyword">return</span> keepAliveDurationNs<span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 没有任何连接，则跳出循环</span>        cleanupRunning <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">closeQuietly</span><span class="token punctuation">(</span>longestIdleConnection<span class="token punctuation">.</span><span class="token function">socket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 马上进行下一次清理</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，这里主要通过判断连接存活时间是否大于等于 5 分钟，或者空闲的连接数量是否大于 5 个来进行连接的清理。连接是否空闲是通过关注点（1）中的 pruneAndGetAllocationCount() 方法来判断的，我们看下这个方法：</p><pre class="line-numbers language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/*ConnectionPool*/</span>  <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">pruneAndGetAllocationCount</span><span class="token punctuation">(</span>RealConnection connection<span class="token punctuation">,</span> <span class="token keyword">long</span> now<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 获得 allocations 的弱引用列表</span>    List<span class="token operator">&lt;</span>Reference<span class="token operator">&lt;</span>StreamAllocation<span class="token operator">>></span> references <span class="token operator">=</span> connection<span class="token punctuation">.</span>allocations<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 遍历 allocations 的弱引用列表</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> references<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>      Reference<span class="token operator">&lt;</span>StreamAllocation<span class="token operator">></span> reference <span class="token operator">=</span> references<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 说明 StreamAllocation 被使用，则继续下一次循环</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>reference<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">continue</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// We've discovered a leaked allocation. This is an application bug.</span>      StreamAllocation<span class="token punctuation">.</span>StreamAllocationReference streamAllocRef <span class="token operator">=</span>          <span class="token punctuation">(</span>StreamAllocation<span class="token punctuation">.</span>StreamAllocationReference<span class="token punctuation">)</span> reference<span class="token punctuation">;</span>      String message <span class="token operator">=</span> <span class="token string">"A connection to "</span> <span class="token operator">+</span> connection<span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">address</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token operator">+</span> <span class="token string">" was leaked. Did you forget to close a response body?"</span><span class="token punctuation">;</span>      Platform<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">logCloseableLeak</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> streamAllocRef<span class="token punctuation">.</span>callStackTrace<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 说明 StreamAllocation 没有被使用，则从列表中移除</span>      references<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>      connection<span class="token punctuation">.</span>noNewStreams <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 列表为空，说明都被移除了，这个时候返回 allocationCount 为 0，表示该连接是空闲的。</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>references<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        connection<span class="token punctuation">.</span>idleAtNanos <span class="token operator">=</span> now <span class="token operator">-</span> keepAliveDurationNs<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 列表不为空，返回列表的大小，大于 0 表示该连接是在使用的。</span>    <span class="token keyword">return</span> references<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该方法比较简单，主要是遍历 allocations 的弱引用列表，如果 StreamAllocation 没有被使用，则从列表中移除，最后返回该列表的大小，通过该大小即可判断是否是空闲连接，小于等于 0 才是空闲连接。</p><h2 id="2-5-（5）取出相应的数据"><a href="#2-5-（5）取出相应的数据" class="headerlink" title="2.5 （5）取出相应的数据"></a>2.5 （5）取出相应的数据</h2><pre class="line-numbers language-java"><code class="language-java">String data <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在第（4）步同步请求或者异步请求执行完都会返回 Response，这个就是最终返回的数据，可以通过它获取到 code、message、header、body 等。</p><p>这里讲下 body，点击 body() 进去是这样的：</p><pre class="line-numbers language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/*Response*/</span>  <span class="token keyword">public</span> <span class="token annotation punctuation">@Nullable</span> ResponseBody <span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> body<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到这里的 body 就是 ResponseBody，它是一个抽象类，不能被实例化，一般用它的子类 RealResponseBody 进行实例化。它是在前面讲的 “2.4.3.5 服务器请求拦截器（CallServerInterceptor）” 小节中赋值的：</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/*CallServerInterceptor*/</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>forWebSocket <span class="token operator">&amp;&amp;</span> code <span class="token operator">==</span> <span class="token number">101</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      response <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span>Util<span class="token punctuation">.</span>EMPTY_RESPONSE<span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// openResponseBody() 方法中创建了 RealResponseBody 对象返回</span>      response <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span>httpCodec<span class="token punctuation">.</span><span class="token function">openResponseBody</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果有缓存则会在缓存拦截器（CacheInterceptor）中赋值。</p><p>ResponseBody 中常用的方法有如下几种：</p><pre class="line-numbers language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/*ResponseBody*/</span>  <span class="token keyword">public</span> <span class="token keyword">final</span> String <span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    BufferedSource source <span class="token operator">=</span> <span class="token function">source</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      Charset charset <span class="token operator">=</span> Util<span class="token punctuation">.</span><span class="token function">bomAwareCharset</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> <span class="token function">charset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> source<span class="token punctuation">.</span><span class="token function">readString</span><span class="token punctuation">(</span>charset<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>      Util<span class="token punctuation">.</span><span class="token function">closeQuietly</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">final</span> InputStream <span class="token function">byteStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">source</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">inputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    <span class="token keyword">long</span> contentLength <span class="token operator">=</span> <span class="token function">contentLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>contentLength <span class="token operator">></span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IOException</span><span class="token punctuation">(</span><span class="token string">"Cannot buffer entire body for content length: "</span> <span class="token operator">+</span> contentLength<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    BufferedSource source <span class="token operator">=</span> <span class="token function">source</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      bytes <span class="token operator">=</span> source<span class="token punctuation">.</span><span class="token function">readByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>      Util<span class="token punctuation">.</span><span class="token function">closeQuietly</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>contentLength <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> contentLength <span class="token operator">!=</span> bytes<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IOException</span><span class="token punctuation">(</span><span class="token string">"Content-Length ("</span>          <span class="token operator">+</span> contentLength          <span class="token operator">+</span> <span class="token string">") and stream length ("</span>          <span class="token operator">+</span> bytes<span class="token punctuation">.</span>length          <span class="token operator">+</span> <span class="token string">") disagree"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> bytes<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，这三个方法内部都调用了 source() 来获取 BufferedSource，BufferedSource 就是 okio 提供的输入流，拿到输入流就可以将 body 数据转换为你需要的类型。例如：<br>希望返回 String，则调用 response.body().string()，适用于不超过 1 MB 的数据。<br>希望返回输入流，则调用 response.body().byteStream()，适用于超过 1 MB 的数据，例如下载文件。<br>希望返回二进制字节数组，则调用 response.body().bytes()。</p><p>需要注意的是，response.body().string() 只能调用一次，否则会抛出如下异常：</p><pre class="line-numbers language-java"><code class="language-java">W<span class="token operator">/</span>System<span class="token punctuation">.</span>err<span class="token operator">:</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>IllegalStateException<span class="token operator">:</span> closedW<span class="token operator">/</span>System<span class="token punctuation">.</span>err<span class="token operator">:</span>     at okio<span class="token punctuation">.</span>RealBufferedSource<span class="token punctuation">.</span><span class="token function">rangeEquals</span><span class="token punctuation">(</span>RealBufferedSource<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">408</span><span class="token punctuation">)</span>W<span class="token operator">/</span>System<span class="token punctuation">.</span>err<span class="token operator">:</span>     at okio<span class="token punctuation">.</span>RealBufferedSource<span class="token punctuation">.</span><span class="token function">rangeEquals</span><span class="token punctuation">(</span>RealBufferedSource<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">402</span><span class="token punctuation">)</span>W<span class="token operator">/</span>System<span class="token punctuation">.</span>err<span class="token operator">:</span>     at okhttp3<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Util<span class="token punctuation">.</span><span class="token function">bomAwareCharset</span><span class="token punctuation">(</span>Util<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">469</span><span class="token punctuation">)</span>W<span class="token operator">/</span>System<span class="token punctuation">.</span>err<span class="token operator">:</span>     at okhttp3<span class="token punctuation">.</span>ResponseBody<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span>ResponseBody<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">175</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据报错日志可以看到，是在 RealBufferedSource 类的 408 行报的错，我们跳转过去看看：</p><pre class="line-numbers language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/*RealBufferedSource*/</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">rangeEquals</span><span class="token punctuation">(</span><span class="token keyword">long</span> offset<span class="token punctuation">,</span> ByteString bytes<span class="token punctuation">,</span> <span class="token keyword">int</span> bytesOffset<span class="token punctuation">,</span> <span class="token keyword">int</span> byteCount<span class="token punctuation">)</span>      <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>closed<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"closed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//...</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，这里做了个判断，closed 为 true 就抛出该异常，继续跟踪 closed 赋值的地方：</p><pre class="line-numbers language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/*RealBufferedSource*/</span>  <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>closed<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    closed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    source<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    buffer<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，closed 唯一赋值的地方在 close() 方法中，而该方法正是 string() 方法中的 Util.closeQuietly(source); 调用的：</p><pre class="line-numbers language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/*ResponseBody*/</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">closeQuietly</span><span class="token punctuation">(</span>Closeable closeable<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>closeable <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>        closeable<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> rethrown<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> rethrown<span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ignored<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>到这里我们就明白了为什么 response.body().string() 只能调用一次的原因，即 string() 方法中获取到 String后又调用了 Util.closeQuietly(source) 方法关闭了输入流，并且标记 closed 为 true，然后第二次调用 string() 方法的时候会在 RealBufferedSource.rangeEquals() 方法进行判断，为 true 就抛出异常。</p><p>这样设计的原因是服务器返回的 body 可能会很大，所以 OkHttp 不会将其存储在内存中，只有当你需要的时候才去获取它，如果没有新的请求则无法获取 2 次。</p><h1 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h1><p>看完源码，发现  OkHttp 是一个设计得非常优秀的框架。该框架运用了很多设计模式，例如建造者模式、责任链模式等等。知道了 OkHttp 的核心是拦截器，这里采用的就是责任链模式，每个拦截器负责相应的功能，发起请求的时候由上往下依次执行每个拦截器，响应的数据则层层往上传递。</p><p>参考资料：</p><ul><li><a href="https://blog.piasy.com/2016/07/11/Understand-OkHttp/index.html" target="_blank" rel="noopener">拆轮子系列：拆 OkHttp</a></li><li><a href="https://juejin.im/post/5a704ed05188255a8817f4c9" target="_blank" rel="noopener">Android开源框架源码鉴赏：Okhttp</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android主流开源框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络编程 </tag>
            
            <tag> OkHttp </tag>
            
            <tag> 源码分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 主流开源框架（二）OkHttp 使用详解</title>
      <link href="/blog/6d0008b.html"/>
      <url>/blog/6d0008b.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近有个想法——就是把 Android 主流开源框架进行深入分析，然后写成一系列文章，包括该框架的详细使用与源码解析。目的是通过鉴赏大神的源码来了解框架底层的原理，也就是做到不仅要知其然，还要知其所以然。</p><p>这里我说下自己阅读源码的经验，我一般都是按照平时使用某个框架或者某个系统源码的使用流程入手的，首先要知道怎么使用，然后再去深究每一步底层做了什么，用了哪些好的设计模式，为什么要这么设计。</p><p>系列文章：</p><ul><li><a href="https://wildma.github.io/blog/ec018646.html">Android 主流开源框架（一）OkHttp 铺垫-HttpClient 与 HttpURLConnection 使用详解</a></li><li><a href="https://wildma.github.io/blog/6d0008b.html">Android 主流开源框架（二）OkHttp 使用详解</a></li><li>Android 主流开源框架（三）OkHttp 源码解析（更新中…）</li><li>Android 主流开源框架（四）Retrofit 使用详解（更新中…）</li><li>Android 主流开源框架（五）Retrofit 源码解析（更新中…）</li><li>更多框架持续更新中…</li></ul><p>更多干货请关注 <a href="https://github.com/wildma/AndroidNotes" target="_blank" rel="noopener">AndroidNotes</a></p><h2 id="一、OkHttp-介绍"><a href="#一、OkHttp-介绍" class="headerlink" title="一、OkHttp 介绍"></a>一、OkHttp 介绍</h2><p>上一篇介绍了 HttpClient 与 HttpURLConnection，我们知道 Google 在 Android 6.0 版本已经删除了 HttpClient 的相关代码，HttpURLConnection 用起来也比较麻烦，所以网络框架 OkHttp 也就诞生了。</p><p>OkHttp 是 Square 公司开源的网络框架，可以说是当前 Android 界最好用的网络框架了，它有如下特点：</p><ol><li>封装简单易用，支持链式调用。</li><li>同时支持同步和异步请求。</li><li>支持 HTTP/2 协议，允许对同一主机的所有请求共用同一个 socket 连接。</li><li>如果 HTTP/2 不可用, 连接池复用技术可以减少请求延迟。</li><li>支持 GZIP，减小了下载大小。</li><li>支持缓存处理，可以避免重复请求。</li><li>如果你的服务有多个 IP 地址，当第一次连接失败，OkHttp 会尝试备用地址。</li><li>OkHttp 还处理了代理服务器问题和SSL握手失败问题。</li></ol><h2 id="二、OkHttp-的使用"><a href="#二、OkHttp-的使用" class="headerlink" title="二、OkHttp 的使用"></a>二、OkHttp 的使用</h2><h3 id="2-1-使用前准备"><a href="#2-1-使用前准备" class="headerlink" title="2.1 使用前准备"></a>2.1 使用前准备</h3><ol><li>加入网络权限<br>在 AndroidManifest.xml 文件中加入如下：<pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span>uses<span class="token operator">-</span>permission android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.permission.INTERNET"</span><span class="token operator">/</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>添加 OkHttp 库的依赖<br>在当前使用的 module 下的 build.gradle 中加入如下：<pre class="line-numbers language-java"><code class="language-java">implementation <span class="token string">'com.squareup.okhttp3:okhttp:3.11.0'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h3 id="2-2-同步-GET-请求"><a href="#2-2-同步-GET-请求" class="headerlink" title="2.2 同步 GET 请求"></a>2.2 同步 GET 请求</h3><p>同步 GET 请求的步骤：</p><ol><li>创建 OkHttpClient 对象。</li><li>创建 Request 对象，然后通过 Builder() 链式调用可以设置请求 url、header、method 等。</li><li>调用 OkHttpClient 对象的 newCall() 方法创建一个 Call 对象。</li><li>调用 Call 对象的 execute() 方法发起一个请求，并获取服务器返回的数据。</li><li>Response 就是返回的数据，可以根据需求得到相应的数据格式，例如：<br>希望返回 String，则调用 response.body().string()，适用于不超过 1 MB 的数据。<br>希望返回输入流，则调用 response.body().byteStream()，适用于超过 1 MB 的数据，例如下载文件。<br>希望返回二进制字节数组，则调用 response.body().bytes()</li></ol><p>需要注意的是：</p><ol><li>同步 GET 请求需要在子线程中调用。</li><li>string() 方法只能调用一次，原因是该方法在第一次调用完就关闭了流。</li></ol><p>具体代码如下：</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">syncGetRequestByOkHttp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        OkHttpClient client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OkHttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Request request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Request<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token string">"https://www.baidu.com"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Call call <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">newCall</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>        Response response <span class="token operator">=</span> call<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">isSuccessful</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"syncGetRequestByOkHttp data-->"</span> <span class="token operator">+</span> response<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IOException</span><span class="token punctuation">(</span><span class="token string">"Unexpected code "</span> <span class="token operator">+</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打印结果：</p><pre class="line-numbers language-java"><code class="language-java">OkHttpActivity<span class="token operator">:</span> syncGetRequestByOkHttp data<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>STATUS OK<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span> <span class="token operator">&lt;</span>head<span class="token operator">></span><span class="token operator">&lt;</span>meta http<span class="token operator">-</span>equiv<span class="token operator">=</span>content<span class="token operator">-</span>type content<span class="token operator">=</span>text<span class="token operator">/</span>html<span class="token punctuation">;</span>charset<span class="token operator">=</span>utf<span class="token operator">-</span><span class="token number">8</span><span class="token operator">></span><span class="token operator">&lt;</span>meta http<span class="token operator">-</span>equiv<span class="token operator">=</span>X<span class="token operator">-</span>UA<span class="token operator">-</span>Compatible content<span class="token operator">=</span>IE<span class="token operator">=</span>Edge<span class="token operator">></span><span class="token operator">&lt;</span>meta content<span class="token operator">=</span>always name<span class="token operator">=</span>referrer<span class="token operator">></span><span class="token operator">&lt;</span>link rel<span class="token operator">=</span>stylesheet type<span class="token operator">=</span>text<span class="token operator">/</span>css href<span class="token operator">=</span>http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>s1<span class="token punctuation">.</span>bdstatic<span class="token punctuation">.</span>com<span class="token operator">/</span>r<span class="token operator">/</span>www<span class="token operator">/</span>cache<span class="token operator">/</span>bdorz<span class="token operator">/</span>baidu<span class="token punctuation">.</span>min<span class="token punctuation">.</span>css<span class="token operator">></span><span class="token operator">&lt;</span>title<span class="token operator">></span>百度一下，你就知道<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span> <span class="token operator">&lt;</span>body link<span class="token operator">=</span>#0000cc<span class="token operator">></span> 省略部分日志<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>&lt;<span class="token operator">/</span>body<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-异步-GET-请求"><a href="#2-3-异步-GET-请求" class="headerlink" title="2.3 异步 GET 请求"></a>2.3 异步 GET 请求</h3><p>异步 GET 请求与同步 GET 请求的代码差不多，区别是：</p><ol><li>将同步方法 execute() 换成异步方法 enqueue()。</li><li>异步方法不需要在子线程中执行，因为 enqueue() 方法内部已经有一个线程池去执行。</li><li>返回的数据在 onResponse() 方法中，由于内部是通过线程池去执行的，所以该方法也在子线程。如果需要操作 UI，需要使用 handler 等切换到主线程。</li></ol><p>具体代码如下：</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">asyncGetRequestByOkHttp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        OkHttpClient client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OkHttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Request request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Request<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token string">"https://www.baidu.com"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Call call <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">newCall</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>        call<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onFailure</span><span class="token punctuation">(</span>Call call<span class="token punctuation">,</span> IOException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onResponse</span><span class="token punctuation">(</span>Call call<span class="token punctuation">,</span> Response response<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">isSuccessful</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onResponse data-->"</span> <span class="token operator">+</span> response<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IOException</span><span class="token punctuation">(</span><span class="token string">"Unexpected code "</span> <span class="token operator">+</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打印结果：与同步 GET 请求一样。</p><h3 id="2-4-异步-POST-请求"><a href="#2-4-异步-POST-请求" class="headerlink" title="2.4 异步 POST 请求"></a>2.4 异步 POST 请求</h3><p>POST 请求与 GET 请求的区别是 POST 请求需要构建一个 RequestBody 来存放请求参数，然后在 Request.Builder 中调用 post 方法，并传入 RequestBody 对象。具体代码如下：</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">asyncPostRequestByOkHttp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        OkHttpClient client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OkHttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        RequestBody formBody <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormBody<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span> <span class="token string">"wildma"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">,</span> <span class="token string">"123456"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Request request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Request<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token string">"https://postman-echo.com/post"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>formBody<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Call call <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">newCall</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>        call<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onFailure</span><span class="token punctuation">(</span>Call call<span class="token punctuation">,</span> IOException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onResponse</span><span class="token punctuation">(</span>Call call<span class="token punctuation">,</span> Response response<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">isSuccessful</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onResponse data-->"</span> <span class="token operator">+</span> response<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IOException</span><span class="token punctuation">(</span><span class="token string">"Unexpected code "</span> <span class="token operator">+</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打印结果：</p><pre class="line-numbers language-java"><code class="language-java">OkHttpActivity<span class="token operator">:</span> onResponse data<span class="token operator">--</span><span class="token operator">></span><span class="token punctuation">{</span> <span class="token string">"args"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"data"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"files"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"form"</span><span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token string">"username"</span><span class="token operator">:</span> <span class="token string">"wildma"</span><span class="token punctuation">,</span>  <span class="token string">"password"</span><span class="token operator">:</span> <span class="token string">"123456"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"headers"</span><span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token string">"x-forwarded-proto"</span><span class="token operator">:</span> <span class="token string">"https"</span><span class="token punctuation">,</span>  <span class="token string">"host"</span><span class="token operator">:</span> <span class="token string">"postman-echo.com"</span><span class="token punctuation">,</span>  <span class="token string">"content-length"</span><span class="token operator">:</span> <span class="token string">"31"</span><span class="token punctuation">,</span>  <span class="token string">"content-type"</span><span class="token operator">:</span> <span class="token string">"application/x-www-form-urlencoded"</span><span class="token punctuation">,</span>  <span class="token string">"user-agent"</span><span class="token operator">:</span> <span class="token string">"Apache-HttpClient/UNAVAILABLE (java 1.4)"</span><span class="token punctuation">,</span>  <span class="token string">"x-forwarded-port"</span><span class="token operator">:</span> <span class="token string">"443"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"json"</span><span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token string">"username"</span><span class="token operator">:</span> <span class="token string">"wildma"</span><span class="token punctuation">,</span>  <span class="token string">"password"</span><span class="token operator">:</span> <span class="token string">"123456"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"url"</span><span class="token operator">:</span> <span class="token string">"https://postman-echo.com/post"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-5-异步-POST-方式上传文件"><a href="#2-5-异步-POST-方式上传文件" class="headerlink" title="2.5 异步 POST 方式上传文件"></a>2.5 异步 POST 方式上传文件</h3><p>上传文件首先需要定义上传文件的类型 MediaType，然后构建一个 File 的 RequestBody，其他与普通 POST 请求类似。<br>其中 test.txt 为 SD 卡跟目录下的文件，内容为“test post file”，需要提前放好。具体代码如下：</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">asyncPostFileByOkHttp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> MediaType MEDIA_TYPE_MARKDOWN <span class="token operator">=</span> MediaType<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"text/x-markdown; charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//test.txt 为 SD 卡跟目录下的文件，需要提前放好</span>        File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>Environment<span class="token punctuation">.</span><span class="token function">getExternalStorageDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"test.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        OkHttpClient client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OkHttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        RequestBody requestBody <span class="token operator">=</span> RequestBody<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>MEDIA_TYPE_MARKDOWN<span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">;</span>        Request request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Request<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token string">"https://api.github.com/markdown/raw"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>requestBody<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Call call <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">newCall</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>        call<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onFailure</span><span class="token punctuation">(</span>Call call<span class="token punctuation">,</span> IOException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onFailure IOException-->"</span> <span class="token operator">+</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onResponse</span><span class="token punctuation">(</span>Call call<span class="token punctuation">,</span> Response response<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">isSuccessful</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onResponse data-->"</span> <span class="token operator">+</span> response<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IOException</span><span class="token punctuation">(</span><span class="token string">"Unexpected code "</span> <span class="token operator">+</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意，由于需要操作 SD 卡数据，所以需要在 AndroidManifest.xml 文件添加读写权限，如下：</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token operator">&lt;</span>uses<span class="token operator">-</span>permission android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.permission.WRITE_EXTERNAL_STORAGE"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>uses<span class="token operator">-</span>permission android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.permission.READ_EXTERNAL_STORAGE"</span><span class="token operator">/</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果是 6.0 以上还需要动态申请权限。</p><p>打印结果：</p><pre class="line-numbers language-java"><code class="language-java">OkHttpActivity<span class="token operator">:</span> onResponse data<span class="token operator">--</span><span class="token operator">></span>test post file<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-6-异步-POST-multipart-请求"><a href="#2-6-异步-POST-multipart-请求" class="headerlink" title="2.6 异步 POST multipart 请求"></a>2.6 异步 POST multipart 请求</h3><p>MultipartBody.Builder 可以构建与 HTML 文件上传表单兼容的复杂请求体。multipart 请求体的每一部分本身就是一个请求体，可以定义自己的请求头。也就是说一个接口可能需要同时上传文件和其他参数，这时候就可以使用 MultipartBody.Builder 来构建复杂的请求体。具体代码如下：</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">asyncPostMultipartRequestByOkHttp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> String IMGUR_CLIENT_ID <span class="token operator">=</span> <span class="token string">"..."</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> MediaType MEDIA_TYPE_PNG <span class="token operator">=</span> MediaType<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"image/png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//test.png 为 SD 卡跟目录下的文件，需要提前放好</span>        File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>Environment<span class="token punctuation">.</span><span class="token function">getExternalStorageDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"test.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        OkHttpClient client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OkHttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        RequestBody requestBody <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MultipartBody<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setType</span><span class="token punctuation">(</span>MultipartBody<span class="token punctuation">.</span>FORM<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">addFormDataPart</span><span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">addFormDataPart</span><span class="token punctuation">(</span><span class="token string">"image"</span><span class="token punctuation">,</span> <span class="token string">"test.png"</span><span class="token punctuation">,</span>                        RequestBody<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>MEDIA_TYPE_PNG<span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Request request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Request<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Authorization"</span><span class="token punctuation">,</span> <span class="token string">"Client-ID "</span> <span class="token operator">+</span> IMGUR_CLIENT_ID<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token string">"https://api.imgur.com/3/image"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>requestBody<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Call call <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">newCall</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>        call<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onFailure</span><span class="token punctuation">(</span>Call call<span class="token punctuation">,</span> IOException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onFailure IOException-->"</span> <span class="token operator">+</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onResponse</span><span class="token punctuation">(</span>Call call<span class="token punctuation">,</span> Response response<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">isSuccessful</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onResponse data-->"</span> <span class="token operator">+</span> response<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IOException</span><span class="token punctuation">(</span><span class="token string">"Unexpected code "</span> <span class="token operator">+</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打印结果：<br>由于这里没有合适的测试服务器，所以请求会走到 onFailure()，如需测试请换成自己的服务器。</p><h3 id="2-7-设置超时时间"><a href="#2-7-设置超时时间" class="headerlink" title="2.7 设置超时时间"></a>2.7 设置超时时间</h3><p>发送一个请求如果没有响应则会使用超时结束 call，没有响应可能是客户端或服务器问题，例如网络慢导致请求失败，OkHttp 可以设置连接、读取和写入的超时时间。<br>如下请求 url 的延迟时间为 2 秒，这时候我设置读取的超时时间为 1 秒，最终则会请求失败走到 onFailure() 方法。具体代码如下：</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">asyncGetRequestByOkHttpAndSetTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        OkHttpClient client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OkHttpClient<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">connectTimeout</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">writeTimeout</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">readTimeout</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Request request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Request<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token string">"http://httpbin.org/delay/2"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//该 url 的延迟时间为 2 秒</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Call call <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">newCall</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>        call<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onFailure</span><span class="token punctuation">(</span>Call call<span class="token punctuation">,</span> IOException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onFailure IOException-->"</span> <span class="token operator">+</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onResponse</span><span class="token punctuation">(</span>Call call<span class="token punctuation">,</span> Response response<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">isSuccessful</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onResponse data-->"</span> <span class="token operator">+</span> response<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IOException</span><span class="token punctuation">(</span><span class="token string">"Unexpected code "</span> <span class="token operator">+</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打印结果：</p><pre class="line-numbers language-java"><code class="language-java">OkHttpActivity<span class="token operator">:</span> onFailure IOException<span class="token operator">--</span><span class="token operator">></span>java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>SocketTimeoutException<span class="token operator">:</span> timeout<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>说明 socket 超时了。</p><h3 id="2-8-取消请求"><a href="#2-8-取消请求" class="headerlink" title="2.8 取消请求"></a>2.8 取消请求</h3><p>通过 Call.cancel() 可以立即停止正在进行的 Call。如果一个线程正在写请求或读响应，它还将收到一个 IOException 异常。当一个 Call 不需要时，可以使用 Call.cancel()  节约网络资源，例如用户离开一个界面时。同步和异步调用都可以被取消。<br>如下请求 url 的延迟时间为 2 秒，这时候我在请求的同时马上取消请求。具体代码如下：</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">asyncGetRequestByOkHttpAndCancelRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        OkHttpClient client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OkHttpClient<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">connectTimeout</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">writeTimeout</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">readTimeout</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Request request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Request<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token string">"http://httpbin.org/delay/2"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//该 url 的延迟时间为 2 秒</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mCall <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">newCall</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>        mCall<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onFailure</span><span class="token punctuation">(</span>Call call<span class="token punctuation">,</span> IOException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onFailure IOException-->"</span> <span class="token operator">+</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onResponse</span><span class="token punctuation">(</span>Call call<span class="token punctuation">,</span> Response response<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">isSuccessful</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onResponse data-->"</span> <span class="token operator">+</span> response<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IOException</span><span class="token punctuation">(</span><span class="token string">"Unexpected code "</span> <span class="token operator">+</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//请求的同时马上取消请求</span>        mCall<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"asyncGetRequestByOkHttpAndCancelRequest isCanceled-->"</span> <span class="token operator">+</span> mCall<span class="token punctuation">.</span><span class="token function">isCanceled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打印结果：</p><pre class="line-numbers language-java"><code class="language-java">OkHttpActivity<span class="token operator">:</span> asyncGetRequestByOkHttpAndCancelRequest isCanceled<span class="token operator">--</span><span class="token operator">></span><span class="token boolean">true</span>OkHttpActivity<span class="token operator">:</span> onFailure IOException<span class="token operator">--</span><span class="token operator">></span>java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token operator">:</span> Canceled<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>第一行说明取消成功了，第二行说明一个线程正在写请求或读响应，这时候会走到 onFailure() 方法并收到一个 IOException 异常。</p><h2 id="三、源码"><a href="#三、源码" class="headerlink" title="三、源码"></a>三、源码</h2><p><a href="https://github.com/wildma/AndroidNotes/tree/master/app/src/main/java/com/wildma/androidnotes/okhttp" target="_blank" rel="noopener">OkHttp 的使用 demo</a></p>]]></content>
      
      
      <categories>
          
          <category> Android主流开源框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络编程 </tag>
            
            <tag> OkHttp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 主流开源框架（一）OkHttp 铺垫-HttpClient 与 HttpURLConnection 使用详解</title>
      <link href="/blog/ec018646.html"/>
      <url>/blog/ec018646.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近有个想法——就是把 Android 主流开源框架进行深入分析，然后写成一系列文章，包括该框架的详细使用与源码解析。目的是通过鉴赏大神的源码来了解框架底层的原理，也就是做到不仅要知其然，还要知其所以然。</p><p>这里我说下自己阅读源码的经验，我一般都是按照平时使用某个框架或者某个系统源码的使用流程入手的，首先要知道怎么使用，然后再去深究每一步底层做了什么，用了哪些好的设计模式，为什么要这么设计。</p><p>系列文章：</p><ul><li><a href="https://wildma.github.io/blog/ec018646.html">Android 主流开源框架（一）OkHttp 铺垫-HttpClient 与 HttpURLConnection 使用详解</a></li><li><a href="https://wildma.github.io/blog/6d0008b.html">Android 主流开源框架（二）OkHttp 使用详解</a></li><li>Android 主流开源框架（三）OkHttp 源码解析（更新中…）</li><li>Android 主流开源框架（四）Retrofit 使用详解（更新中…）</li><li>Android 主流开源框架（五）Retrofit 源码解析（更新中…）</li><li>更多框架持续更新中…</li></ul><p>更多干货请关注 <a href="https://github.com/wildma/AndroidNotes" target="_blank" rel="noopener">AndroidNotes</a></p><h2 id="一、HttpClient-与-HttpURLConnection-介绍"><a href="#一、HttpClient-与-HttpURLConnection-介绍" class="headerlink" title="一、HttpClient 与 HttpURLConnection 介绍"></a>一、HttpClient 与 HttpURLConnection 介绍</h2><h3 id="1-1-HttpClient"><a href="#1-1-HttpClient" class="headerlink" title="1.1 HttpClient"></a>1.1 HttpClient</h3><p>HttpClient 是 Apache 提供的开源库，可以用来提供高效的、最新的、功能丰富的支持 HTTP 协议的客户端编程工具包。原本 Android SDK 中是包含了 HttpClient 的，但是 Google 在 Android 6.0 版本已经删除了该库的相关代码，只能通过依赖库的方式进行使用。</p><h3 id="1-2-HttpURLConnection"><a href="#1-2-HttpURLConnection" class="headerlink" title="1.2 HttpURLConnection"></a>1.2 HttpURLConnection</h3><p>HttpURLConnection 是 java.net 包中提供用来访问 HTTP 协议的基本功能的类，它继承自 URLConnection，可用于向指定网站发送 GET 请求、POST 请求。HttpURLConnection 相对于 HttpClient 没什么封装，但也是因为这个我们可以更容易的去扩展它。</p><p>不过在 Android 2.2 版本之前，HttpURLConnection 一直存在着一些令人厌烦的 bug。比如说对一个可读的 InputStream 调用 close() 方法时，就有可能会导致连接池失效了。那么我们通常的解决办法就是直接禁用掉连接池的功能，如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">disableConnectionReuseIfNecessary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 这是一个2.2版本之前的bug</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>Build<span class="token punctuation">.</span>VERSION<span class="token punctuation">.</span>SDK<span class="token punctuation">)</span> <span class="token operator">&lt;</span> Build<span class="token punctuation">.</span>VERSION_CODES<span class="token punctuation">.</span>FROYO<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"http.keepAlive"</span><span class="token punctuation">,</span> <span class="token string">"false"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、HttpClient-的使用"><a href="#二、HttpClient-的使用" class="headerlink" title="二、HttpClient 的使用"></a>二、HttpClient 的使用</h2><h3 id="2-1-使用前准备"><a href="#2-1-使用前准备" class="headerlink" title="2.1 使用前准备"></a>2.1 使用前准备</h3><ol><li>加入网络权限<pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span>uses<span class="token operator">-</span>permission android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.permission.INTERNET"</span><span class="token operator">/</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>如果使用 Android Studio，则需要在使用的 module 下的 build.gradle 中加入如下：<pre class="line-numbers language-java"><code class="language-java">android <span class="token punctuation">{</span> useLibrary <span class="token string">'org.apache.http.legacy'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>从 Android 9 开始，默认情况下该库已从 bootclasspath 中移除且不可用于应用。<br>要继续使用 Apache HTTP 客户端，以 Android 9 及更高版本为目标的应用可以向其 AndroidManifest.xml 的  application 节点下添加以下内容（具体可看-<a href="https://developer.android.google.cn/about/versions/pie/android-9.0-changes-28" target="_blank" rel="noopener">Apache HTTP 客户端弃用</a>）：<pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span>uses<span class="token operator">-</span>library android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"org.apache.http.legacy"</span> android<span class="token operator">:</span>required<span class="token operator">=</span><span class="token string">"false"</span><span class="token operator">/</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h3 id="2-2-HttpClient-的-GET-请求"><a href="#2-2-HttpClient-的-GET-请求" class="headerlink" title="2.2 HttpClient 的 GET 请求"></a>2.2 HttpClient 的 GET 请求</h3><p>使用流程已在注释中详细描述，具体代码如下：</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">getRequestByHttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1. 创建 HttpClient 对象（DefaultHttpClient 为 HttpClient 的实现类）</span>        HttpClient httpClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultHttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2. 创建请求对象（这里是 GET 请求），参数为请求地址</span>        HttpGet httpGet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpGet</span><span class="token punctuation">(</span><span class="token string">"https://www.baidu.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//3.调用 HttpClient 对象的 execute 方法发送请求，返回 HttpResponse</span>            HttpResponse httpResponse <span class="token operator">=</span> httpClient<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>httpGet<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//4. 检查是否请求成功，状态码 200 表示成功</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>httpResponse<span class="token punctuation">.</span><span class="token function">getStatusLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//5. 调用 HttpEntity 对象的 getContent 方法获取响应数据的输入流</span>                InputStream inputStream <span class="token operator">=</span> httpResponse<span class="token punctuation">.</span><span class="token function">getEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//6. 将输入流转换成字符串</span>                String data <span class="token operator">=</span> <span class="token function">inputStream2String</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>                Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"data: "</span> <span class="token operator">+</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，inputStream2String 方法如下：</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">private</span> String <span class="token function">inputStream2String</span><span class="token punctuation">(</span>InputStream inputStream<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String data <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        BufferedReader bufferedReader <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            InputStreamReader inputStreamReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>            bufferedReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span>inputStreamReader<span class="token punctuation">)</span><span class="token punctuation">;</span>            StringBuilder stringBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String line <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>line <span class="token operator">=</span> bufferedReader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                stringBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            data <span class="token operator">=</span> stringBuilder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>TextUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//去除最后一个多余的换行符</span>                data <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>bufferedReader <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    bufferedReader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来直接调用就可以了，需要注意的是网络请求需要在子线程中调用，如下：</p><pre class="line-numbers language-java"><code class="language-java">        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">getRequestByHttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打印结果如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>STATUS OK<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span> <span class="token operator">&lt;</span>head<span class="token operator">></span><span class="token operator">&lt;</span>meta http<span class="token operator">-</span>equiv<span class="token operator">=</span>content<span class="token operator">-</span>type content<span class="token operator">=</span>text<span class="token operator">/</span>html<span class="token punctuation">;</span>charset<span class="token operator">=</span>utf<span class="token operator">-</span><span class="token number">8</span><span class="token operator">></span><span class="token operator">&lt;</span>meta http<span class="token operator">-</span>equiv<span class="token operator">=</span>X<span class="token operator">-</span>UA<span class="token operator">-</span>Compatible content<span class="token operator">=</span>IE<span class="token operator">=</span>Edge<span class="token operator">></span><span class="token operator">&lt;</span>meta content<span class="token operator">=</span>always name<span class="token operator">=</span>referrer<span class="token operator">></span><span class="token operator">&lt;</span>link rel<span class="token operator">=</span>stylesheet type<span class="token operator">=</span>text<span class="token operator">/</span>css href<span class="token operator">=</span>http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>s1<span class="token punctuation">.</span>bdstatic<span class="token punctuation">.</span>com<span class="token operator">/</span>r<span class="token operator">/</span>www<span class="token operator">/</span>cache<span class="token operator">/</span>bdorz<span class="token operator">/</span>baidu<span class="token punctuation">.</span>min<span class="token punctuation">.</span>css<span class="token operator">></span><span class="token operator">&lt;</span>title<span class="token operator">></span>百度一下，你就知道<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span> <span class="token operator">&lt;</span>body link<span class="token operator">=</span>#0000cc<span class="token operator">></span> 省略部分日志<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>&lt;<span class="token operator">/</span>body<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-HttpClient-的-POST-请求"><a href="#2-3-HttpClient-的-POST-请求" class="headerlink" title="2.3 HttpClient 的 POST 请求"></a>2.3 HttpClient 的 POST 请求</h3><p>POST 请求与 GET 请求类似，不同的是需要将请求对象 HttpGet 换成 HttpPost，然后通过 HttpPost 的 setEntity 方法设置请求参数。使用流程已在注释中详细描述，具体代码如下：</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">postRequestByHttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1. 创建 HttpClient 对象（DefaultHttpClient 为 HttpClient 的实现类）</span>        HttpClient httpClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultHttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2. 创建请求对象（这里是 POST 请求），参数为请求地址（这里用的是 postman 提供的测试地址）</span>        HttpPost httpPost <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpPost</span><span class="token punctuation">(</span><span class="token string">"https://postman-echo.com/post"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//3. 调用 HttpPost 对象的 setEntity 方法设置需要的参数</span>            List<span class="token operator">&lt;</span>NameValuePair<span class="token operator">></span> postParams <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            postParams<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BasicNameValuePair</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span> <span class="token string">"wildma"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            postParams<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BasicNameValuePair</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">,</span> <span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            httpPost<span class="token punctuation">.</span><span class="token function">setEntity</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UrlEncodedFormEntity</span><span class="token punctuation">(</span>postParams<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//4.调用 HttpClient 对象的 execute 方法发送请求，返回 HttpResponse</span>            HttpResponse httpResponse <span class="token operator">=</span> httpClient<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>httpPost<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//5. 检查是否请求成功，状态码 200 表示成功</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>httpResponse<span class="token punctuation">.</span><span class="token function">getStatusLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//6. 调用 HttpEntity 对象的 getContent 方法获取响应数据的输入流</span>                InputStream inputStream <span class="token operator">=</span> httpResponse<span class="token punctuation">.</span><span class="token function">getEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//7. 将输入流转换成字符串</span>                String data <span class="token operator">=</span> <span class="token function">inputStream2String</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>                Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"data: "</span> <span class="token operator">+</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在子线程中调用该方法，打印结果如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token punctuation">{</span> <span class="token string">"args"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"data"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"files"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"form"</span><span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token string">"username"</span><span class="token operator">:</span> <span class="token string">"wildma"</span><span class="token punctuation">,</span>  <span class="token string">"password"</span><span class="token operator">:</span> <span class="token string">"123456"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"headers"</span><span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token string">"x-forwarded-proto"</span><span class="token operator">:</span> <span class="token string">"https"</span><span class="token punctuation">,</span>  <span class="token string">"host"</span><span class="token operator">:</span> <span class="token string">"postman-echo.com"</span><span class="token punctuation">,</span>  <span class="token string">"content-length"</span><span class="token operator">:</span> <span class="token string">"31"</span><span class="token punctuation">,</span>  <span class="token string">"content-type"</span><span class="token operator">:</span> <span class="token string">"application/x-www-form-urlencoded"</span><span class="token punctuation">,</span>  <span class="token string">"user-agent"</span><span class="token operator">:</span> <span class="token string">"Apache-HttpClient/UNAVAILABLE (java 1.4)"</span><span class="token punctuation">,</span>  <span class="token string">"x-forwarded-port"</span><span class="token operator">:</span> <span class="token string">"443"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"json"</span><span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token string">"username"</span><span class="token operator">:</span> <span class="token string">"wildma"</span><span class="token punctuation">,</span>  <span class="token string">"password"</span><span class="token operator">:</span> <span class="token string">"123456"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"url"</span><span class="token operator">:</span> <span class="token string">"https://postman-echo.com/post"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、HttpURLConnection-的使用"><a href="#三、HttpURLConnection-的使用" class="headerlink" title="三、HttpURLConnection 的使用"></a>三、HttpURLConnection 的使用</h2><h3 id="3-1-使用前准备"><a href="#3-1-使用前准备" class="headerlink" title="3.1 使用前准备"></a>3.1 使用前准备</h3><p>加入网络权限</p><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span>uses<span class="token operator">-</span>permission android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.permission.INTERNET"</span><span class="token operator">/</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-2-HttpURLConnection-的-GET-请求"><a href="#3-2-HttpURLConnection-的-GET-请求" class="headerlink" title="3.2 HttpURLConnection 的 GET 请求"></a>3.2 HttpURLConnection 的 GET 请求</h3><p>使用流程已在注释中详细描述，具体代码如下：</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">getRequestByHttpURLConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//1. 创建 URL 对象</span>            URL url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">"https://www.baidu.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//2. 调用 URL 对象的 openConnection 方法获取 HttpURLConnection 实例</span>            HttpURLConnection httpURLConnection <span class="token operator">=</span> <span class="token punctuation">(</span>HttpURLConnection<span class="token punctuation">)</span> url<span class="token punctuation">.</span><span class="token function">openConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//3. 设置请求方法（这里是 GET 请求）</span>            httpURLConnection<span class="token punctuation">.</span><span class="token function">setRequestMethod</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//4. 连接</span>            httpURLConnection<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//5. 检查是否请求成功，状态码 200 表示成功</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>httpURLConnection<span class="token punctuation">.</span><span class="token function">getResponseCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//6. 调用 HttpURLConnection 对象的 getInputStream 方法获取响应数据的输入流</span>                InputStream inputStream <span class="token operator">=</span> httpURLConnection<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//7. 将输入流转换成字符串</span>                String data <span class="token operator">=</span> <span class="token function">inputStream2String</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>                Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"data: "</span> <span class="token operator">+</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在子线程中调用该方法，打印结果与 HttpClient 的 GET 请求一样。</p><h3 id="3-3-HttpURLConnection-的-POST-请求"><a href="#3-3-HttpURLConnection-的-POST-请求" class="headerlink" title="3.3 HttpURLConnection 的 POST 请求"></a>3.3 HttpURLConnection 的 POST 请求</h3><p>POST 请求与 GET 请求类似，不同的是需要将请求方法 GET 换成 POST，然后通过输出流设置请求参数，还需要设置允许输入输出，即 setDoInput(true) 与 setDoOutput(true)。使用流程已在注释中详细描述，具体代码如下：</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">postRequestByHttpURLConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//1. 创建 URL 对象</span>            URL url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">"https://postman-echo.com/post"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//2. 调用 URL 对象的 openConnection 方法获取 HttpURLConnection 实例</span>            HttpURLConnection httpURLConnection <span class="token operator">=</span> <span class="token punctuation">(</span>HttpURLConnection<span class="token punctuation">)</span> url<span class="token punctuation">.</span><span class="token function">openConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//3. 设置请求方法（这里是 POST 请求）</span>            httpURLConnection<span class="token punctuation">.</span><span class="token function">setRequestMethod</span><span class="token punctuation">(</span><span class="token string">"POST"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/*4. 设置允许输入输出*/</span>            httpURLConnection<span class="token punctuation">.</span><span class="token function">setDoInput</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            httpURLConnection<span class="token punctuation">.</span><span class="token function">setDoOutput</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/*5. 设置请求参数*/</span>            String params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"username="</span> <span class="token operator">+</span> URLEncoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"wildma"</span><span class="token punctuation">,</span> <span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&amp;password="</span> <span class="token operator">+</span> URLEncoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">,</span> <span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            OutputStream outputStream <span class="token operator">=</span> httpURLConnection<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            outputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>params<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            outputStream<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            outputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//6. 连接</span>            httpURLConnection<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//7. 检查是否请求成功，状态码 200 表示成功</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>httpURLConnection<span class="token punctuation">.</span><span class="token function">getResponseCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//8. 调用 HttpURLConnection 对象的 getInputStream 方法获取响应数据的输入流</span>                InputStream inputStream <span class="token operator">=</span> httpURLConnection<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//9. 将输入流转换成字符串</span>                String data <span class="token operator">=</span> <span class="token function">inputStream2String</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>                Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"data: "</span> <span class="token operator">+</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在子线程中调用该方法，打印结果与 HttpClient 的 POST 请求一样。</p><h2 id="四、HttpClient-与-HttpURLConnection-如何选择？"><a href="#四、HttpClient-与-HttpURLConnection-如何选择？" class="headerlink" title="四、HttpClient 与 HttpURLConnection 如何选择？"></a>四、HttpClient 与 HttpURLConnection 如何选择？</h2><p>在 Android 2.2 版本之前，HttpClient 拥有较少的 bug，因此使用它是最好的选择。</p><p>而在 Android 2.3 版本及以后，HttpURLConnection 则是最佳的选择。它的 API 简单，体积较小，因而非常适用于Android 项目。压缩和缓存机制可以有效地减少网络访问的流量，在提升速度和省电方面也起到了较大的作用。</p><p>其实参考 Google 的网络框架 Volley 也能得出结论，Volley 源码中在 Android 2.3 及以上版本，使用的是 HttpURLConnection，而在 Android 2.2 及以下版本，使用的是 HttpClient。</p><h2 id="五、源码"><a href="#五、源码" class="headerlink" title="五、源码"></a>五、源码</h2><p><a href="https://github.com/wildma/AndroidNotes/tree/master/app/src/main/java/com/wildma/androidnotes/http" target="_blank" rel="noopener">HttpClient 与 HttpURLConnection 的使用 demo</a></p>]]></content>
      
      
      <categories>
          
          <category> Android主流开源框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络编程 </tag>
            
            <tag> HttpClient </tag>
            
            <tag> HttpURLConnection </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 设备与 U 盘之间的交互</title>
      <link href="/blog/a009c79d.html"/>
      <url>/blog/a009c79d.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近需要实现一个 TV 或一体机从 U 盘读取数据显示的功能，该功能主要解决的问题是：</p><ul><li>获取 U 盘根目录</li><li>解决拔出 U 盘进程被杀死的问题</li></ul><h2 id="一、获取-U-盘根目录"><a href="#一、获取-U-盘根目录" class="headerlink" title="一、获取 U 盘根目录"></a>一、获取 U 盘根目录</h2><p>获取 U 盘根目录需要分两种情况：</p><h3 id="1-1-应用程序已经在运行，这个时候插入-U-盘。"><a href="#1-1-应用程序已经在运行，这个时候插入-U-盘。" class="headerlink" title="1.1 应用程序已经在运行，这个时候插入 U 盘。"></a>1.1 应用程序已经在运行，这个时候插入 U 盘。</h3><p>这种情况我是通过监听媒体挂载的广播来实现的，具体代码如下：<br>注册广播：</p><pre class="line-numbers language-java"><code class="language-java">        <span class="token operator">&lt;</span>receiver            android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">".USBBroadcastReceiver"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>intent<span class="token operator">-</span>filter<span class="token operator">></span>                <span class="token operator">&lt;</span>action android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.intent.action.MEDIA_MOUNTED"</span><span class="token operator">/</span><span class="token operator">></span>                <span class="token operator">&lt;</span>action android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.intent.action.MEDIA_UNMOUNTED"</span><span class="token operator">/</span><span class="token operator">></span>                <span class="token operator">&lt;</span>action android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.intent.action.MEDIA_EJECT"</span><span class="token operator">/</span><span class="token operator">></span>                <span class="token operator">&lt;</span>data android<span class="token operator">:</span>scheme<span class="token operator">=</span><span class="token string">"file"</span><span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>intent<span class="token operator">-</span>filter<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>receiver<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>监听 U 盘插入广播并获取 U 盘根目录：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">USBBroadcastReceiver</span> <span class="token keyword">extends</span> <span class="token class-name">BroadcastReceiver</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onReceive</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> Intent intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>intent <span class="token operator">==</span> null <span class="token operator">||</span> intent<span class="token punctuation">.</span><span class="token function">getAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>intent<span class="token punctuation">.</span><span class="token function">getAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> Intent<span class="token punctuation">.</span>ACTION_MEDIA_MOUNTED<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>扩展介质被插入，而且已经被挂载。                <span class="token keyword">if</span> <span class="token punctuation">(</span>intent<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    String path <span class="token operator">=</span> intent<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    String usbRealRootDirectory <span class="token operator">=</span> FileUtils<span class="token punctuation">.</span><span class="token function">getUSBRealRootDirectory</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>经测试，intent.getData().getPath(); 在一体机上获取的并不是 U 盘最终的根目录，所以通过 getUSBRealRootDirectory() 方法再一次提取最终的根目录，该方法具体如下：</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * 获取 U 盘真正根目录     *     * @param usbTempRootDirectory U 盘临时根目录     * @return U 盘真正根目录     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getUSBRealRootDirectory</span><span class="token punctuation">(</span>String usbTempRootDirectory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String realUSBRootDirectory <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        File dir <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>usbTempRootDirectory<span class="token punctuation">)</span><span class="token punctuation">;</span>        File<span class="token punctuation">[</span><span class="token punctuation">]</span> files <span class="token operator">=</span> dir<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * 注意：         * 经测试，         * TV 直接是 usbTempRootDirectory 作为 U 盘的根目录，例如：/storage/577F-85CA         * 一体机会在 U 盘的根目录（usbTempRootDirectory=/mnt/usb_storage/USB_DISK4）下再创建多个包含 "udisk" 的目录，然后其中一个作为 U 盘的根目录，例如：/mnt/usb_storage/USB_DISK4/udisk0         */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>files <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>File file <span class="token operator">:</span> files<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//如果根目录下还有包含 "udisk" 的目录，则该包含 "udisk" 的目录才是 U 盘真正的根目录</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> file<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> file<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"udisk"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    realUSBRootDirectory <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 如果根目录下没有包含 "udisk" 的目录，说明 dir 就是根目录</span>                    realUSBRootDirectory <span class="token operator">=</span> dir<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> realUSBRootDirectory<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-应用程序还未运行，U-盘就已经插入了。"><a href="#1-2-应用程序还未运行，U-盘就已经插入了。" class="headerlink" title="1.2 应用程序还未运行，U 盘就已经插入了。"></a>1.2 应用程序还未运行，U 盘就已经插入了。</h3><p>这种情况就无法通过监听广播拿到 U 盘根目录了，经查询也没找到特定 API 可以获取到，所以这里只能用反射的方法。具体如下：<br>通过反射方法获取 U 盘临时根目录</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * 获取 U 盘临时根目录（一体机会在临时目录下再创建多个包含 "udisk" 的目录，所以临时目录并不是 U 盘真正的根目录）     *     * @param context Context     * @return U 盘临时根目录集合     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">getUSBTempRootDirectory</span><span class="token punctuation">(</span>Context context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> usbTempRootDirectory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            StorageManager storageManager <span class="token operator">=</span> <span class="token punctuation">(</span>StorageManager<span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getSystemService</span><span class="token punctuation">(</span>Context<span class="token punctuation">.</span>STORAGE_SERVICE<span class="token punctuation">)</span><span class="token punctuation">;</span>            Class<span class="token operator">&lt;</span>StorageManager<span class="token operator">></span> storageManagerClass <span class="token operator">=</span> StorageManager<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>            String<span class="token punctuation">[</span><span class="token punctuation">]</span> paths <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> storageManagerClass<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"getVolumePaths"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>storageManager<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>String path <span class="token operator">:</span> paths<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Object volumeState <span class="token operator">=</span> storageManagerClass<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"getVolumeState"</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>storageManager<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//路劲包含 internal 一般是内部存储，例如 /mnt/internal_sd，需要排除</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>path<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"emulated"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>path<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"internal"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> Environment<span class="token punctuation">.</span>MEDIA_MOUNTED<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>volumeState<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    usbTempRootDirectory<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> usbTempRootDirectory<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同样，在一体机上获取的并不是 U 盘最终的根目录，所以还是通过 getUSBRealRootDirectory() 方法再一次提取最终的根目录，具体如下：</p><pre class="line-numbers language-java"><code class="language-java">        List<span class="token operator">&lt;</span>String<span class="token operator">></span> usbTempRootDirectory <span class="token operator">=</span> FileUtils<span class="token punctuation">.</span><span class="token function">getUSBTempRootDirectory</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> usbTempRootDirectory<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            String usbRealRootDirectory <span class="token operator">=</span> FileUtils<span class="token punctuation">.</span><span class="token function">getUSBRealRootDirectory</span><span class="token punctuation">(</span>usbTempRootDirectory<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、解决拔出-U-盘进程被杀死的问题"><a href="#二、解决拔出-U-盘进程被杀死的问题" class="headerlink" title="二、解决拔出 U 盘进程被杀死的问题"></a>二、解决拔出 U 盘进程被杀死的问题</h2><p>因为需要从 U 盘获取视频地址进行播放，当正在播放的时候拔出 U 盘就会出现进程被杀死的情况，报错日志如下：</p><pre class="line-numbers language-java"><code class="language-java">ProcessKiller<span class="token operator">:</span> Process com<span class="token punctuation">.</span>xxx<span class="token punctuation">.</span><span class="token function">xxx</span> <span class="token punctuation">(</span><span class="token number">2088</span><span class="token punctuation">)</span> has open file <span class="token operator">/</span>mnt<span class="token operator">/</span>usb_storage<span class="token operator">/</span>USB_DISK4<span class="token operator">/</span>udisk0<span class="token operator">/</span>xxx<span class="token punctuation">.</span>mp4ProcessKiller<span class="token operator">:</span> Sending SIGHUP to process <span class="token number">2088</span>Vold<span class="token operator">:</span> Failed to unmount <span class="token operator">/</span>mnt<span class="token operator">/</span>usb_storage<span class="token operator">/</span>USB_DISK4<span class="token operator">/</span><span class="token function">udisk0</span> <span class="token punctuation">(</span>Device or resource busy<span class="token punctuation">,</span> retries <span class="token number">1</span><span class="token punctuation">,</span> action <span class="token number">2</span><span class="token punctuation">)</span>ActivityManagerService<span class="token operator">:</span> Process com<span class="token punctuation">.</span>xxx<span class="token punctuation">.</span><span class="token function">xxx</span> <span class="token punctuation">(</span>pid <span class="token number">2088</span><span class="token punctuation">)</span> has died<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这是因为拔出 U 盘的时候，视频资源被视频播放器占用所导致的。可是我明明是做了拔出处理的，即在收到 U 盘被拔出的广播后释放视频资源，如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">USBBroadcastReceiver</span> <span class="token keyword">extends</span> <span class="token class-name">BroadcastReceiver</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onReceive</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> Intent intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>intent <span class="token operator">==</span> null <span class="token operator">||</span> intent<span class="token punctuation">.</span><span class="token function">getAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>intent<span class="token punctuation">.</span><span class="token function">getAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> Intent<span class="token punctuation">.</span>ACTION_MEDIA_UNMOUNTED<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>扩展介质存在，但是还没有被挂载。（扩展介质已被拔出）                <span class="token comment" spellcheck="true">//这里释放所有占用的资源</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>后来 debug 发现，其实在还未收到 U 盘被拔出的广播，进程就被杀死了。。。</p><p>既然不能在监听到 U 盘拔出的时候释放播放资源，那就只能换一种方法了。最后想到的方法是将播放视频的 activity 单独放到一个进程，这样即使该进程被杀死，也不会影响到整个应用奔溃。</p><p>虽然通过上面的方法解决了整个应用奔溃的问题，但是还是觉得不完美，总觉得 Android 不可能只提供了 U 盘拔出后的广播，而没有提供 U 盘将要被拔出的广播呀！经过一番查找，嗯，真香！确实有这个广播-android.intent.action.MEDIA_EJECT，该广播表示用户想要移除扩展介质，即扩展介质将要被拔出。收到这个广播释放占用的资源即可，例如视频播放器释放视频资源，文本读写需要关闭流等等。<br>完整的广播监听如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">USBBroadcastReceiver</span> <span class="token keyword">extends</span> <span class="token class-name">BroadcastReceiver</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onReceive</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> Intent intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>intent <span class="token operator">==</span> null <span class="token operator">||</span> intent<span class="token punctuation">.</span><span class="token function">getAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>intent<span class="token punctuation">.</span><span class="token function">getAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> Intent<span class="token punctuation">.</span>ACTION_MEDIA_MOUNTED<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>扩展介质被插入，而且已经被挂载。                <span class="token keyword">if</span> <span class="token punctuation">(</span>intent<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    String path <span class="token operator">=</span> intent<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    String usbRealRootDirectory <span class="token operator">=</span> FileUtils<span class="token punctuation">.</span><span class="token function">getUSBRealRootDirectory</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> Intent<span class="token punctuation">.</span>ACTION_MEDIA_EJECT<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>用户想要移除扩展介质（扩展介质将要被拔出）                <span class="token comment" spellcheck="true">//这里释放所有占用的资源</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> Intent<span class="token punctuation">.</span>ACTION_MEDIA_UNMOUNTED<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>扩展介质存在，但是还没有被挂载。（扩展介质已被拔出）                <span class="token comment" spellcheck="true">//这里做一些拔出 U 盘后的其他操作</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上就是 Android 设备与 U 盘之间的交互知识，关于获取 U 盘根目录，如果你有更好的方法欢迎交流~</p><p>相关源码：<a href="https://github.com/wildma/AndroidUSB" target="_blank" rel="noopener">AndroidUSB</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> 硬件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> U 盘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自己撸一个 Android Studio 插件</title>
      <link href="/blog/9cddebb4.html"/>
      <url>/blog/9cddebb4.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>用过 Android Studio 进行开发的人一般都使用过插件，因为使用插件可以大大提高我们的开发效率。例如我们常用的插件有：</p><ul><li><a href="https://github.com/zzz40500/GsonFormat" target="_blank" rel="noopener">GsonFormat</a>：将 json 数据转换成实体类。</li><li><a href="https://github.com/avast/android-butterknife-zelezny" target="_blank" rel="noopener">Android Butterknife Zelezny</a>：一键生成 ButterKnife 注解。</li></ul><p>都知道插件很好用，那这些插件是怎么制作的呢？这篇文章就讲下怎么制作一个 Android Studio 插件。</p><h2 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h2><ol><li>首先需要下载开发工具 IntelliJ IDEA，<a href="https://www.jetbrains.com/idea/" target="_blank" rel="noopener">点击下载</a>。</li><li>下载后点击安装，安装成功打开界面是这样的：</li></ol><p><img src="9cddebb4/1.png" alt></p><ol start="3"><li>点击 Create New Project 创建一个新的项目，因为是开发插件，所以这里选择 IntelliJ Platform Plugin，然后选择项目的 SDK，点击到 “Next” 下一步。具体如下图所示：</li></ol><p><img src="9cddebb4/2.png" alt></p><ol start="4"><li>最后填写项目名称，选择项目的存储路径，点击 “Finish” 即可。具体如下图所示：</li></ol><p><img src="9cddebb4/3.png" alt></p><ol start="5"><li>创建完成项目的结构如下图所示：</li></ol><p><img src="9cddebb4/4.png" alt></p><p>其中 plugin.xml 为插件的一些相关信息，src 用来存放编写的代码。</p><h2 id="二、编写插件"><a href="#二、编写插件" class="headerlink" title="二、编写插件"></a>二、编写插件</h2><h3 id="2-1-填写插件相关信息"><a href="#2-1-填写插件相关信息" class="headerlink" title="2.1 填写插件相关信息"></a>2.1 填写插件相关信息</h3><p>插件相关信息需要在 plugin.xml 文件中填写，具体如下图所示：</p><p><img src="9cddebb4/5.png" alt></p><p>每个标签的意思为：</p><ul><li>id：插件 id，需要唯一值</li><li>name：插件名称</li><li>version：插件版本号</li><li>vendor：插件作者信息</li><li>description：插件描述</li><li>change-notes：插件版本更新日志</li><li>idea-version：对 IntelliJ IDEA 软件支持本插件版本号，默认即可</li><li>depends：指定你的插件是哪些 IDE 可以使用。<br>例如我这里的表示 IntelliJ IDEA 与 Android Studio 可以使用，如果只想在 Android Studio 使用，则写成   <depends>com.intellij.modules.androidstudio</depends>，具体写法可参考 <a href="http://www.jetbrains.org/intellij/sdk/docs/basics/getting_started/plugin_compatibility.html" target="_blank" rel="noopener">Plugin Compatibility with IntelliJ Platform Products</a></li><li>extensions：扩展，用不到可以不改</li><li>actions：插件动作，后面创建 Action 的时候会自动配置</li></ul><p>这些信息会在搜索该插件的时候展示，例如搜索 GsonFormat ：</p><p><img src="9cddebb4/6.png" alt></p><h3 id="2-2-新建-Action"><a href="#2-2-新建-Action" class="headerlink" title="2.2 新建 Action"></a>2.2 新建 Action</h3><p>不能直接在 src 文件夹下新建 Action（原因见文末注意事项），包括后面我们插件的功能代码也不能直接放在 src 文件夹下，而是在 src 文件夹下新建一个包（方法与 Android Studio 一样），然后在这个包下新建 Action。即在包上右键点击如下选项：</p><p><img src="9cddebb4/7.png" alt></p><p>然后填写 Action 相关信息，如下图所示：</p><p><img src="9cddebb4/8.png" alt></p><ul><li>Action ID: 代表该 Action 的唯一 ID，一般的格式为：pluginName.ID</li><li>Class Name：Action 的类名</li><li>Name：插件在菜单上显示的名字</li><li>Description：这个 Action 的描述</li><li>Groups：指定该插件在 IDE 菜单栏上的位置，如下选择 EditMenu（Edit）表示该插件在 IDE 菜单栏上的 Edit 处</li><li>Anchor：指定插件在 Groups 中的哪个选项，Frist 表示在第一个选项</li><li>Keyboard Shortcuts：使用插件的快捷键</li></ul><p>点击 “OK” 后会创建一个刚刚命名的 ShowDialog 类继承 AnAction 并实现 actionPerformed 方法，而且在 plugin.xml 文件中会自动配置我们刚刚填写的 Action 信息。如下图所示：</p><p><img src="9cddebb4/9.png" alt></p><h3 id="2-3-编写-Action"><a href="#2-3-编写-Action" class="headerlink" title="2.3 编写 Action"></a>2.3 编写 Action</h3><p>我们仿照 <a href="http://www.jetbrains.org/intellij/sdk/docs/basics/getting_started/creating_an_action.html" target="_blank" rel="noopener">官方例子</a>，在 actionPerformed  方法中添加如下代码，表示点击插件的时候弹出一个dialog</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ShowDialogAction</span> <span class="token keyword">extends</span> <span class="token class-name">AnAction</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span>AnActionEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Project project <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span>PlatformDataKeys<span class="token punctuation">.</span>PROJECT<span class="token punctuation">)</span><span class="token punctuation">;</span>        String txt<span class="token operator">=</span> Messages<span class="token punctuation">.</span><span class="token function">showInputDialog</span><span class="token punctuation">(</span>project<span class="token punctuation">,</span> <span class="token string">"What is your name?"</span><span class="token punctuation">,</span> <span class="token string">"Input your name"</span><span class="token punctuation">,</span> Messages<span class="token punctuation">.</span><span class="token function">getQuestionIcon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Messages<span class="token punctuation">.</span><span class="token function">showMessageDialog</span><span class="token punctuation">(</span>project<span class="token punctuation">,</span> <span class="token string">"Hello, "</span> <span class="token operator">+</span> txt <span class="token operator">+</span> <span class="token string">"!\n I am glad to see you."</span><span class="token punctuation">,</span> <span class="token string">"Information"</span><span class="token punctuation">,</span> Messages<span class="token punctuation">.</span><span class="token function">getInformationIcon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-4-使用插件"><a href="#2-4-使用插件" class="headerlink" title="2.4 使用插件"></a>2.4 使用插件</h3><p>Action 代码完成后，点击 Run Plugin 运行项目，会自动启动一个新的 IntelliJ IDEA 项目，在这个项目中就可以使用我们刚刚制作的插件了。如下图所示：<br><img src="9cddebb4/10.png" alt></p><p><img src="9cddebb4/11.png" alt></p><p><img src="9cddebb4/12.png" alt></p><h2 id="三、生成插件"><a href="#三、生成插件" class="headerlink" title="三、生成插件"></a>三、生成插件</h2><p>点击菜单栏上的 Build  -&gt;  Prepare Plugin Module ‘xxx’ For Deployment 即可，如下图所示：</p><p><img src="9cddebb4/13.png" alt></p><p>运行完成会在项目的根目录生成一个 xxx.jar 的文件，这个就是最终生成的插件文件，如下图所示：</p><p><img src="9cddebb4/14.png" alt></p><h2 id="四、安装插件"><a href="#四、安装插件" class="headerlink" title="四、安装插件"></a>四、安装插件</h2><p>打开 Andorid Studio，点击菜单栏上的 File -&gt; Settings -&gt; Plugins -&gt; Install plugin from disk，然后选择我们刚刚生成的 jar 文件，如下图所示：</p><p><img src="9cddebb4/15.png" alt></p><p>然后点击 “OK”，重启 Andorid Studio 后即可像上面那样使用插件。</p><h2 id="五、上传插件"><a href="#五、上传插件" class="headerlink" title="五、上传插件"></a>五、上传插件</h2><p>前面生成的插件只能从本地选择安装，要想从插件库直接下载安装则需要将插件上传到插件库-<a href="https://plugins.jetbrains.com/" target="_blank" rel="noopener">JetBrains Plugins Repository</a>，打开插件库，注册账号（这里可直接使用 Github 账号授权登录），登录后选择 Upload plugin，填写相关信息，点击 Upload 即可上传。如下图所示：</p><p><img src="9cddebb4/16.png" alt></p><ul><li>License：开源许可协议，我这里选择 Apache license 2.0</li><li>Category：插件分类，我这里选择 Android</li></ul><p>出现如下界面表示上传成功，但只是上传成功，还需要等审核通过才能在插件库搜索到。</p><p><img src="9cddebb4/17.png" alt></p><p>点击上图的链接，跳转到插件详情，点击编辑可完善插件信息。具体如下图所示：</p><p><img src="9cddebb4/18.png" alt></p><p>如果在 plugin.xml 文件中没有指定插件是哪些 IDE 可以使用，也可以在这里指定。具体如下：（<strong>这种方式我试过审核没有通过，所以我自己用的是在 plugin.xml 文件中指定的方式</strong>）</p><p>进入编辑界面滑到最底部可以看到 Supported products，即支持的产品。这里默认是 勾选了 “Determine supported products by dependencies in plugin.xml”，表示根据 plugin.xml 文件中的配置项来确定支持的产品。</p><p><img src="9cddebb4/19.png" alt></p><p>这里我们不使用配置 plugin.xml 文件的方式，而是在这里手动选择。即去掉默认勾选，然后选中 Android Studio，表示插件支持在 Android Studio 中使用，其他 3 项 IntelliJ 是默认勾选的不用管，最后点击保存即可。<br><img src="9cddebb4/20.png" alt></p><p>等审核通过后，我们就可以在插件库搜索到啦！如下图所示：</p><p><img src="9cddebb4/21.png" alt></p><h2 id="六、注意事项"><a href="#六、注意事项" class="headerlink" title="六、注意事项"></a>六、注意事项</h2><p><strong>使用插件出现 NullPointerException</strong></p><ul><li>问题<br>写好插件，然后使用 Android Studio 安装插件并使用，提示<br>java.lang.NullPointerException at com.android.tools.idea.diagnostics.AndroidStudioSystemHealthMonitor.getActionName</li><li>解决<br>也就是前面 “2. 新建 Action” 那里说的，需要将所有的 Action 及其他 Java 文件都放到包下，而不是直接放在 src 目录下。</li></ul><p><strong>在菜单栏上找不到插件</strong></p><ul><li>问题<br>写完 Action，然后点击 Run Plugin 运行项目后在菜单栏上找不到插件。</li><li>解决<br>在运行项目前需要填写  plugin.xml 文件中的 id 与 name 标签，不能用默认的。<br>其实这个有点诡异，一般不上传到插件库是可以不填的，但是我用平时常用的电脑反复测试的确是有这个问题，后来换另一部电脑竟然没有这个问题了~，所以我也不知道是因为环境还是什么问题，反正你们遇到就跟我一样解决就可以了。</li></ul><h2 id="七、总结"><a href="#七、总结" class="headerlink" title="七、总结"></a>七、总结</h2><p>文章看起来好长好复杂呀！嗯，那是因为我是良心博主呀，每一步都给你们写的清清楚楚，还带截图！其实按照我的步骤执行下去，真的挺简单的，也就以下几步：</p><ol><li>下载开发工具 IntelliJ IDEA 并安装。</li><li>新建 IntelliJ Platform Plugin 项目，然后编写插件，即新建 Action。</li><li>生成插件，然后在 Andorid Studio 中安装即可使用。</li></ol><p>插件源码：<a href="https://github.com/wildma/ShowDialog" target="_blank" rel="noopener">ShowDialog</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 插件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>聊聊 Android 中的字体大小适配</title>
      <link href="/blog/7770b02.html"/>
      <url>/blog/7770b02.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>本篇文章已授权微信公众号 guolin_blog（郭霖）独家发布</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>虽然去年写的一篇文章【<a href="https://www.jianshu.com/p/1302ad5a4b04" target="_blank" rel="noopener">一种非常好用的Android屏幕适配</a>】就包含字体大小适配，但那篇文章讲的是根据不同屏幕尺寸来适配字体大小的，接下来我要聊的是字体大小适配中的其他几种场景。</p><h2 id="一、场景一"><a href="#一、场景一" class="headerlink" title="一、场景一"></a>一、场景一</h2><p>有这样一个需求，界面上需要显示一个标题文本，但是该标题的文案长度是不固定的，要求标题的文案全部显示出来，不能用省略号显示，并且标题所占的宽高是固定的。例如标题的文案为 “这是标题，该标题的名字比较长，产品要求不换行全部显示出来”，如下图所示，第一个为不符合需求的标题，第二个为符合需求的标题。</p><p><img src="7770b02/1.jpg" alt></p><p>也就是说TextView控件的宽高需要固定，然后根据标题的文案长度动态改变字体大小，也就是上图第二个标题的效果。那是怎么实现的呢？</p><p>以前的做法一般是测量TextView文本所占的宽度与TextView控件的宽度对比，动态改变TextView的字体大小，写起来即麻烦又耗性能。但是现在不用这么麻烦了，Android 8.0 新增了用来动态改变TextView字体大小的新特性 <a href="https://developer.android.com/guide/topics/ui/look-and-feel/autosizing-textview#setting-textview-autosize" target="_blank" rel="noopener">Autosizing TextViews</a>，只需要简单设置一下属性即可。</p><p>例如上图中符合需求的效果可以这样写：</p><h3 id="1-1-xml-方式"><a href="#1-1-xml-方式" class="headerlink" title="1.1 xml 方式"></a>1.1 xml 方式</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span>LinearLayout    xmlns<span class="token operator">:</span>android<span class="token operator">=</span><span class="token string">"http://schemas.android.com/apk/res/android"</span>    android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"match_parent"</span>    android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"match_parent"</span>    android<span class="token operator">:</span>gravity<span class="token operator">=</span><span class="token string">"center"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>TextView        android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"340dp"</span>        android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"50dp"</span>        android<span class="token operator">:</span>background<span class="token operator">=</span><span class="token string">"@drawable/shape_bg_008577"</span>        android<span class="token operator">:</span>gravity<span class="token operator">=</span><span class="token string">"center_vertical"</span>        android<span class="token operator">:</span>maxLines<span class="token operator">=</span><span class="token string">"1"</span>        android<span class="token operator">:</span>text<span class="token operator">=</span><span class="token string">"这是标题，该标题的名字比较长，产品要求不换行全部显示出来"</span>        android<span class="token operator">:</span>textSize<span class="token operator">=</span><span class="token string">"18sp"</span>        android<span class="token operator">:</span>autoSizeTextType<span class="token operator">=</span><span class="token string">"uniform"</span>        android<span class="token operator">:</span>autoSizeMaxTextSize<span class="token operator">=</span><span class="token string">"18sp"</span>        android<span class="token operator">:</span>autoSizeMinTextSize<span class="token operator">=</span><span class="token string">"10sp"</span>        android<span class="token operator">:</span>autoSizeStepGranularity<span class="token operator">=</span><span class="token string">"1sp"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>LinearLayout<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到TextView控件多了如下属性：</p><ul><li>autoSizeTextType：设置TextView是否支持自动改变字体大小，none表示不支持，uniform表示支持。</li><li>autoSizeMinTextSize：最小字体大小，例如设置为10sp，表示文字最多只能缩小到10sp。</li><li>autoSizeMaxTextSize：最大字体大小，例如设置为18sp，表示文字最多只能放大到18sp。</li><li>autoSizeStepGranularity：缩放粒度，即每次字体大小变化的数值，例如设置为1sp，表示每次缩小或放大的值为1sp。</li></ul><p>上面的只是针对于8.0的设备有效，如果想要兼容8.0以下设备，则需要用AppCompatTextView代替TextView，并且上面几个属性的命名空间需要用app命名空间。如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span>LinearLayout    xmlns<span class="token operator">:</span>android<span class="token operator">=</span><span class="token string">"http://schemas.android.com/apk/res/android"</span>    android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"match_parent"</span>    android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"match_parent"</span>    xmlns<span class="token operator">:</span>app<span class="token operator">=</span><span class="token string">"http://schemas.android.com/apk/res-auto"</span>    android<span class="token operator">:</span>gravity<span class="token operator">=</span><span class="token string">"center"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>v7<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>AppCompatTextView        android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"340dp"</span>        android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"50dp"</span>        android<span class="token operator">:</span>background<span class="token operator">=</span><span class="token string">"@drawable/shape_bg_008577"</span>        android<span class="token operator">:</span>gravity<span class="token operator">=</span><span class="token string">"center_vertical"</span>        android<span class="token operator">:</span>maxLines<span class="token operator">=</span><span class="token string">"1"</span>        android<span class="token operator">:</span>text<span class="token operator">=</span><span class="token string">"这是标题，该标题的名字比较长，产品要求不换行全部显示出来"</span>        android<span class="token operator">:</span>textSize<span class="token operator">=</span><span class="token string">"18sp"</span>        app<span class="token operator">:</span>autoSizeTextType<span class="token operator">=</span><span class="token string">"uniform"</span>        app<span class="token operator">:</span>autoSizeMaxTextSize<span class="token operator">=</span><span class="token string">"18sp"</span>        app<span class="token operator">:</span>autoSizeMinTextSize<span class="token operator">=</span><span class="token string">"10sp"</span>        app<span class="token operator">:</span>autoSizeStepGranularity<span class="token operator">=</span><span class="token string">"1sp"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>LinearLayout<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>肯定很多人说 “为什么自己写的时候不用AppCompatTextView也能兼容8.0以下设备呢？”，那是因为你当前的xml文件对应的Activity继承的是AppCompatActivity，如果继承的是Activity或FragmentActivity是不能达到兼容的。这一点其实官方文档 <a href="https://developer.android.com/guide/topics/ui/look-and-feel/autosizing-textview#setting-textview-autosize" target="_blank" rel="noopener">Autosizing TextViews</a> 也没有说清楚，导致很多人误解了，各位可以自己验证下。</p><h3 id="1-2-动态编码方式"><a href="#1-2-动态编码方式" class="headerlink" title="1.2 动态编码方式"></a>1.2 动态编码方式</h3><p>使用 TextViewCompat 的setAutoSizeTextTypeWithDefaults()方法设置TextView是否支持自动改变字体大小，setAutoSizeTextTypeUniformWithConfiguration()方法设置最小字体大小、最大字体大小与缩放粒度。如下所示：</p><pre class="line-numbers language-java"><code class="language-java">        TextView tvText <span class="token operator">=</span> <span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>tv_text<span class="token punctuation">)</span><span class="token punctuation">;</span>        TextViewCompat<span class="token punctuation">.</span><span class="token function">setAutoSizeTextTypeWithDefaults</span><span class="token punctuation">(</span>tvText<span class="token punctuation">,</span>TextViewCompat<span class="token punctuation">.</span>AUTO_SIZE_TEXT_TYPE_UNIFORM<span class="token punctuation">)</span><span class="token punctuation">;</span>        TextViewCompat<span class="token punctuation">.</span><span class="token function">setAutoSizeTextTypeUniformWithConfiguration</span><span class="token punctuation">(</span>tvText<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span> TypedValue<span class="token punctuation">.</span>COMPLEX_UNIT_SP<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>setAutoSizeTextTypeWithDefaults()<br>参数1为需要动态改变字体大小的TextView，参数2为是否支持自动改变字体大小的类型，AUTO_SIZE_TEXT_TYPE_UNIFORM表示支持，AUTO_SIZE_TEXT_TYPE_NONE表示不支持。</li><li>setAutoSizeTextTypeUniformWithConfiguration()<br>参数1为需要动态改变字体大小的TextView，参数2、3、4分别为最小字体大小、最大字体大小与缩放粒度，参数5为参数2、3、4的单位，例如sp 、dp、px等。</li></ul><p>同样，如果要兼容8.0以下设备，要么在xml中用AppCompatTextView代替TextView，要么当前Activity继承AppCompatActivity。</p><h3 id="1-3-小结"><a href="#1-3-小结" class="headerlink" title="1.3 小结"></a>1.3 小结</h3><p>Autosizing TextViews是Android 8.0 新增的特性，可以用来动态改变TextView字体大小。如果要兼容8.0以下设备，则需要满足以下2个条件中的<strong>其中一个</strong>。</p><ul><li>在xml中用AppCompatTextView代替TextView，并且上面几个属性的命名空间用app命名空间。</li><li>当前Activity继承AppCompatActivity，而不是Activity或FragmentActivity。</li></ul><p>Autosizing TextViews更多属性请参考 <a href="https://developer.android.com/guide/topics/ui/look-and-feel/autosizing-textview#setting-textview-autosize" target="_blank" rel="noopener">Autosizing TextViews</a></p><h2 id="二、场景二"><a href="#二、场景二" class="headerlink" title="二、场景二"></a>二、场景二</h2><p>很多人肯定遇到过这种情况，测试扔个图片过来，然后说怎么运行在这个测试机后下面的内容都挡住了（如下右图，左图为正常情况），你不是说做了屏幕适配的吗？然后你拿测试的手机一看，设置里面竟然选了 <strong>特大</strong> 字体。</p><p><img src="7770b02/2.jpg" alt></p><p>嗯… 经过这么一看基本就知道什么问题了。原因是你在xml文件写死了控件的高度，并且TextView的字体单位用的是sp，这种情况下到手机设置中改变字体大小，那么界面中的字体大小就会随系统改变。</p><p>那么我们应该怎么解决这个问题呢？这时候我们可以观察下微信的做法，经过研究发现微信的字体是不会随着系统字体大小的改变而改变的，并且微信本身是有改变字体大小功能的。微信中改变字体大小后不仅字体大小改变了，控件的宽高也会跟着改变。所以可以猜到微信的字体适配是如下方式实现的：</p><h3 id="2-1-字体大小不随系统改变"><a href="#2-1-字体大小不随系统改变" class="headerlink" title="2.1 字体大小不随系统改变"></a>2.1 字体大小不随系统改变</h3><p>想要实现字体大小不随系统改变有两种方式：<br><strong>1. xml方式</strong><br>TextView的字体单位不使用sp，而是用dp。因为sp单位的字体大小会随系统字体大小的改变而改变，而dp单位则不会。</p><p><strong>2. 动态编码方式</strong><br>字体大小是否随系统改变可以通过Configuration类的fontScale变量来控制，fontScale变量默认为1，表示字体大小不随系统字体大小的改变而改变，那么我们只需要保证fontScale始终为1即可。具体代码如下，一般放在Activity的基类BaseActivity即可。</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onConfigurationChanged</span><span class="token punctuation">(</span>Configuration newConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onConfigurationChanged</span><span class="token punctuation">(</span>newConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>newConfig<span class="token punctuation">.</span>fontScale <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//fontScale不为1，需要强制设置为1</span>            <span class="token function">getResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Resources <span class="token function">getResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Resources resources <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>resources<span class="token punctuation">.</span><span class="token function">getConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fontScale <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//fontScale不为1，需要强制设置为1</span>            Configuration newConfig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Configuration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            newConfig<span class="token punctuation">.</span><span class="token function">setToDefaults</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置成默认值，即fontScale为1</span>            resources<span class="token punctuation">.</span><span class="token function">updateConfiguration</span><span class="token punctuation">(</span>newConfig<span class="token punctuation">,</span> resources<span class="token punctuation">.</span><span class="token function">getDisplayMetrics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> resources<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>虽然两种方式都可以解决场景二的问题，但是一般都是使用动态编码方式，原因如下：</p><ul><li>若应用需要增加类似微信可以改变字体大小的功能，如果在xml中用的是dp单位，那么该功能将无法实现！</li><li>若需求改成字体大小需要随系统字体大小的改变而改变，只需要删掉该段代码即可。</li><li>官方推荐使用sp作为字体单位。</li></ul><h3 id="2-2-控件宽高尽量不要固定"><a href="#2-2-控件宽高尽量不要固定" class="headerlink" title="2.2 控件宽高尽量不要固定"></a>2.2 控件宽高尽量不要固定</h3><p>原因是如果应用需要增加类似微信可以改变字体大小的功能，如果控件宽高固定的话，调大字体会导致控件显示不下，这不是我们需要的效果。</p><h2 id="三、场景三"><a href="#三、场景三" class="headerlink" title="三、场景三"></a>三、场景三</h2><p>有这样一种情况，当你按照设计图的标注去写一个TextView控件的时候，宽高用的是wrap_content，也没有设置任何padding，但是运行在手机上该TextView所占的宽高却比设计图的要大。如下图所示，字体周围多了很多空白部分。<br><img src="7770b02/3.jpg" alt></p><p>这是因为TextView本身就含有内边距造成的，那么TextView有没有属性可以去除内边距呢？答案是有的，该属性为 includeFontPadding，设置为false表示不包含字体内边距，具体代码如下：</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token operator">&lt;</span>TextView        android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"wrap_content"</span>        android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"wrap_content"</span>        android<span class="token operator">:</span>background<span class="token operator">=</span><span class="token string">"@color/colorPrimary"</span>        android<span class="token operator">:</span>text<span class="token operator">=</span><span class="token string">"Hello"</span>        android<span class="token operator">:</span>textSize<span class="token operator">=</span><span class="token string">"50sp"</span>        android<span class="token operator">:</span>includeFontPadding<span class="token operator">=</span><span class="token string">"false"</span><span class="token operator">/</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行效果如下图中的第二个“Hello”（第一个“Hello”为普通TextView），看起来好像是可以的，但是仔细看发现还是留有一点内边距的。<br><img src="7770b02/4.jpg" alt></p><p>一般的应用可能不在乎那点内边距，但如果做的是TV上的应用就要求比较严格了，因为TV界面一般是不支持上下左右滚动的，如果设计图上的内容刚好占满屏幕，那么这些内边距就会导致个别控件显示不全。所以在这种情况下是必须要解决的，既然TextView自带属性不能解决，那就只能自定义了。具体代码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> android<span class="token punctuation">.</span>content<span class="token punctuation">.</span>Context<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>content<span class="token punctuation">.</span>res<span class="token punctuation">.</span>TypedArray<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>graphics<span class="token punctuation">.</span>Canvas<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>graphics<span class="token punctuation">.</span>Paint<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>graphics<span class="token punctuation">.</span>Rect<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>v7<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>AppCompatTextView<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>util<span class="token punctuation">.</span>AttributeSet<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NoPaddingTextView</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatTextView</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Paint   mPaint             <span class="token operator">=</span> <span class="token function">getPaint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Rect    mBounds            <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Rect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Boolean mRemoveFontPadding <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//是否去除字体内边距，true：去除 false：不去除</span>    <span class="token keyword">public</span> <span class="token function">NoPaddingTextView</span><span class="token punctuation">(</span>Context context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">NoPaddingTextView</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> AttributeSet attrs<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> attrs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">initAttributes</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> attrs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">NoPaddingTextView</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> AttributeSet attrs<span class="token punctuation">,</span> <span class="token keyword">int</span> defStyleAttr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> attrs<span class="token punctuation">,</span> defStyleAttr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">initAttributes</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> attrs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onMeasure</span><span class="token punctuation">(</span><span class="token keyword">int</span> widthMeasureSpec<span class="token punctuation">,</span> <span class="token keyword">int</span> heightMeasureSpec<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onMeasure</span><span class="token punctuation">(</span>widthMeasureSpec<span class="token punctuation">,</span> heightMeasureSpec<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mRemoveFontPadding<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">calculateTextParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">setMeasuredDimension</span><span class="token punctuation">(</span>mBounds<span class="token punctuation">.</span>right <span class="token operator">-</span> mBounds<span class="token punctuation">.</span>left<span class="token punctuation">,</span> <span class="token operator">-</span>mBounds<span class="token punctuation">.</span>top <span class="token operator">+</span> mBounds<span class="token punctuation">.</span>bottom<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onSizeChanged</span><span class="token punctuation">(</span><span class="token keyword">int</span> w<span class="token punctuation">,</span> <span class="token keyword">int</span> h<span class="token punctuation">,</span> <span class="token keyword">int</span> oldw<span class="token punctuation">,</span> <span class="token keyword">int</span> oldh<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onSizeChanged</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> h<span class="token punctuation">,</span> oldw<span class="token punctuation">,</span> oldh<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onDraw</span><span class="token punctuation">(</span>Canvas canvas<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">drawText</span><span class="token punctuation">(</span>canvas<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 初始化属性     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">initAttributes</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> AttributeSet attrs<span class="token punctuation">)</span> <span class="token punctuation">{</span>        TypedArray typedArray <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">obtainStyledAttributes</span><span class="token punctuation">(</span>attrs<span class="token punctuation">,</span> R<span class="token punctuation">.</span>styleable<span class="token punctuation">.</span>NoPaddingTextView<span class="token punctuation">)</span><span class="token punctuation">;</span>        mRemoveFontPadding <span class="token operator">=</span> typedArray<span class="token punctuation">.</span><span class="token function">getBoolean</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>styleable<span class="token punctuation">.</span>NoPaddingTextView_removeDefaultPadding<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        typedArray<span class="token punctuation">.</span><span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 计算文本参数     */</span>    <span class="token keyword">private</span> String <span class="token function">calculateTextParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String text <span class="token operator">=</span> <span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> textLength <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mPaint<span class="token punctuation">.</span><span class="token function">getTextBounds</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> textLength<span class="token punctuation">,</span> mBounds<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>textLength <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            mBounds<span class="token punctuation">.</span>right <span class="token operator">=</span> mBounds<span class="token punctuation">.</span>left<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> text<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 绘制文本     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">drawText</span><span class="token punctuation">(</span>Canvas canvas<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String text <span class="token operator">=</span> <span class="token function">calculateTextParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> mBounds<span class="token punctuation">.</span>left<span class="token punctuation">;</span>        <span class="token keyword">int</span> bottom <span class="token operator">=</span> mBounds<span class="token punctuation">.</span>bottom<span class="token punctuation">;</span>        mBounds<span class="token punctuation">.</span><span class="token function">offset</span><span class="token punctuation">(</span><span class="token operator">-</span>mBounds<span class="token punctuation">.</span>left<span class="token punctuation">,</span> <span class="token operator">-</span>mBounds<span class="token punctuation">.</span>top<span class="token punctuation">)</span><span class="token punctuation">;</span>        mPaint<span class="token punctuation">.</span><span class="token function">setAntiAlias</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mPaint<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span><span class="token function">getCurrentTextColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        canvas<span class="token punctuation">.</span><span class="token function">drawText</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">-</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>mBounds<span class="token punctuation">.</span>bottom <span class="token operator">-</span> bottom<span class="token punctuation">)</span><span class="token punctuation">,</span> mPaint<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将NoPaddingTextView需要的属性定义在attr.xml文件中，如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span>resources<span class="token operator">></span>    <span class="token operator">&lt;</span>declare<span class="token operator">-</span>styleable name<span class="token operator">=</span><span class="token string">"NoPaddingTextView"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>attr name<span class="token operator">=</span><span class="token string">"removeDefaultPadding"</span> format<span class="token operator">=</span><span class="token string">"boolean"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>declare<span class="token operator">-</span>styleable<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>resources<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>布局文件中使用，如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span>LinearLayout    xmlns<span class="token operator">:</span>android<span class="token operator">=</span><span class="token string">"http://schemas.android.com/apk/res/android"</span>    xmlns<span class="token operator">:</span>app<span class="token operator">=</span><span class="token string">"http://schemas.android.com/apk/res-auto"</span>    android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"match_parent"</span>    android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"match_parent"</span>    android<span class="token operator">:</span>gravity<span class="token operator">=</span><span class="token string">"center"</span>    android<span class="token operator">:</span>orientation<span class="token operator">=</span><span class="token string">"horizontal"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>com<span class="token punctuation">.</span>wildma<span class="token punctuation">.</span>fontadaptation<span class="token punctuation">.</span>NoPaddingTextView        android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"wrap_content"</span>        android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"wrap_content"</span>        android<span class="token operator">:</span>background<span class="token operator">=</span><span class="token string">"@color/colorPrimary"</span>        android<span class="token operator">:</span>text<span class="token operator">=</span><span class="token string">"Hello"</span>        android<span class="token operator">:</span>textSize<span class="token operator">=</span><span class="token string">"50sp"</span>        app<span class="token operator">:</span>removeDefaultPadding<span class="token operator">=</span><span class="token string">"true"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>LinearLayout<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行效果如下图中的第三个“Hello”（第一个为普通TextView，第二个为加了includeFontPadding属性的TextView），完美解决！<br><img src="7770b02/5.jpg" alt></p><p>OK！字体大小适配中最常用的三种场景都讲了，如果还有其他场景欢迎补充~</p><p>项目地址：<a href="https://github.com/wildma/FontAdaptation" target="_blank" rel="noopener">FontAdaptation</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> 适配 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字体大小适配 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 消息推送 MQTT 实战</title>
      <link href="/blog/6b52ae54.html"/>
      <url>/blog/6b52ae54.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>年初做了一款Android TV 应用，用到了MQTT。主要实现的是类似一些景区利用大屏幕实时显示景点人数，超过人数就不允许进入。即利用闸机设备监控到进景区的游客，然后通过MQTT将消息发送给大屏幕，最后大屏幕实时显示景区人数，并响应一个消息通知闸机设备已经收到了它发过来的消息（确保消息到达）。这篇文章会模拟真实的使用流程进行讲解，即闸机发布消息——服务器（代理）收到消息转发给大屏幕——大屏幕收到消息后响应回去（发布消息）——服务器收到消息转发给闸机设备。</p><h2 id="一、关于MQTT"><a href="#一、关于MQTT" class="headerlink" title="一、关于MQTT"></a>一、关于MQTT</h2><h3 id="1-1-简介"><a href="#1-1-简介" class="headerlink" title="1.1 简介"></a>1.1 简介</h3><p>MQTT（Message Queuing Telemetry Transport，消息队列遥测传输）是IBM开发的一个即时通讯协议。它是一种发布/订阅，极其简单和轻量级的消息传递协议，专为受限设备和低带宽，高延迟或不可靠的网络而设计。它的设计思想是轻巧、开放、简单、规范，易于实现。这些特点使得它对很多场景来说都是很好的选择，特别是对于受限的环境如机器与机器的通信（M2M）以及物联网环境。相对于XMPP，MQTT更加轻量级，并且占用的宽带低。</p><h3 id="1-2-特点"><a href="#1-2-特点" class="headerlink" title="1.2 特点"></a>1.2 特点</h3><p>MQTT协议有以下特点：</p><ol><li>使用发布/订阅消息模式，提供一对多的消息发布，解除应用程序耦合。</li><li>对负载内容屏蔽的消息传输。</li><li>使用 TCP/IP 提供网络连接。</li><li>有三种消息发布服务质量：<ul><li>qos为0：“至多一次”，消息发布完全依赖底层 TCP/IP 网络。会发生消息丢失或重复。这一级别可用于如下情况，环境传感器数据，丢失一次读记录无所谓，因为不久后还会有第二次发送。</li><li>qos为1：“至少一次”，确保消息到达，但消息重复可能会发生。这一级别可用于如下情况，你需要获得每一条消息，并且消息重复发送对你的使用场景无影响。</li><li>qos为2：“只有一次”，确保消息到达一次。这一级别可用于如下情况，在计费系统中，消息重复或丢失会导致不正确的结果。</li></ul></li><li>小型传输，开销很小（固定长度的头部是 2 字节），协议交换最小化，以降低网络流量。<br>使用 Last Will 和 Testament 特性通知有关各方客户端异常中断的机制。</li></ol><h3 id="1-3-MQTT体系结构"><a href="#1-3-MQTT体系结构" class="headerlink" title="1.3 MQTT体系结构"></a>1.3 MQTT体系结构</h3><p><img src="6b52ae54/1.png" alt></p><p>该体系结构图是结合文章开头说的例子画出来的，能很好的描述MQTT在实际运用中的三种身份。即进景区入口配置一台闸机设备作为发布者（Publisher），当闸机设备监控到有游客进入的时候会发布一个带主题（Topic）的消息（例如主题为“tourist_enter”）给服务器（MQTT-Broker），当服务器接收到发布过来的消息后，会进行基于主题的过滤，将消息转发给订阅了该主题的订阅者。 而景区大屏幕作为订阅者（Subscriber）,订阅的主题也是“tourist_enter”，这样就能接收到服务器转发过来的消息，收到消息后在大屏幕上实时显示当前景区人数即可。</p><p>该结构图中的闸机设备和大屏幕都是客户端，都可以进行发布和订阅。例如大屏幕收到消息后也可以发布一个消息通知闸机设备已经收到了它发过来的消息。</p><h2 id="二、MQTT服务器搭建"><a href="#二、MQTT服务器搭建" class="headerlink" title="二、MQTT服务器搭建"></a>二、MQTT服务器搭建</h2><p>想要使用MQTT，首先需要搭建一个MQTT的服务器（在公司一般是后台人员负责搭建）。一般前端人员为了方便测试都会先使用第三方提供的服务器，<a href="https://github.com/mqtt/mqtt.github.io/wiki/servers" target="_blank" rel="noopener">官方</a>推荐了很多种服务器，我这里选用的是Apollo（属于Apache ActiveMQ）。</p><ol><li><p>下载、解压<br>点击<a href="http://activemq.apache.org/apollo/download.html" target="_blank" rel="noopener">下载地址</a>，选择最适合你的操作系统的版本进行下载，我这里用的是Windows，进行如下选择：<img src="6b52ae54/2.png" alt> <img src="6b52ae54/3.png" alt>下载后进行解压，我这里解压到D盘根目录下（D:\apache-apollo-1.7.1）。</p></li><li><p>创建服务器实例<br>命令行进入解压文件的bin目录下（例如：cd D:\apache-apollo-1.7.1\bin），然后输入apollo create mybroker（其中mybroker为自定义的服务器名称）创建服务器实例。具体如下图：<img src="6b52ae54/4.png" alt><br>之后会在bin目录下生成mybroker文件夹，其中mybroker文件夹下的etc\apollo.xml文件下是配置服务器信息的文件，etc\users.properties文件包含连接MQTT服务器时用到的用户名和密码，注意这里只能修改密码（发现很多博客在没有验证的情况下就说用户名和密码都在这里修改），如果要修改用户名需要到etc\groups.properties文件下去修改。etc\groups.properties文件下的用户名与etc\users.properties文件下的密码是一一对应的，如下表示一个组中配置了两个用户分别是admin与wildma，然后这两个用户名对应的密码分别是password与123456<br><img src="6b52ae54/5.png" alt></p></li></ol><ol start="3"><li>开启服务器<br>进入mybroker文件夹下的bin目录下，输入apollo-broker.cmd run开启服务器。看到如下界面表示开启成功。</li></ol><p><img src="6b52ae54/6.png" alt></p><ol start="4"><li>验证是否安装成功<br>最后在浏览器输入<a href="http://127.0.0.1:61680/，能成功打开界面就表示安装成功了。可以用上面配置的两个用户名进行登录。" target="_blank" rel="noopener">http://127.0.0.1:61680/，能成功打开界面就表示安装成功了。可以用上面配置的两个用户名进行登录。</a></li></ol><h2 id="三、调试MQTT的客户端——mqttfx-的使用"><a href="#三、调试MQTT的客户端——mqttfx-的使用" class="headerlink" title="三、调试MQTT的客户端——mqttfx 的使用"></a>三、调试MQTT的客户端——mqttfx 的使用</h2><p>为了方便调试MQTT，我这里选用mqttfx作为闸机设备客户端。具体使用如下：</p><ol><li><p>下载<br>点击<a href="http://www.jensd.de/apps/mqttfx/" target="_blank" rel="noopener">下载地址</a>，选择最适合你的操作系统的版本进行下载。如下图：<img src="6b52ae54/7.png" alt></p></li><li><p>安装<br>下载后一路点击下一步即可安装成功，安装成功后打开软件界面。如下图：<img src="6b52ae54/8.png" alt></p></li><li><p>配置<br>点击上图中的设置，添加一个新的配置文件。分别填写配置文件名称、服务器地址（由于服务器就是本机，所以这里用本机的IP地址即可，ipconfig/all可获取IP地址）、端口号（开启服务器后会显示接受连接的地址：Accepting connections at: tcp://0.0.0.0:61613，用这里的端口号61613即可，见上文中“开启服务器”后的图片）、用户名、密码，点击OK即可。如下图：<img src="6b52ae54/9.png" alt></p></li><li><p>订阅消息<br>选择刚刚添加的配置文件“闸机设备”，点击”Connect”连接服务器。点击“Subscribe”，设置一个Topic（例如tourist_enter）,点击Topic右侧的“Subscribe”进行消息订阅。如下图：<img src="6b52ae54/10.png" alt></p></li><li><p>发布消息<br>点击“Publish”，输入刚刚订阅的Topic (tourist_enter)，输入需要发布的消息内容（tourist enter）,点击Topic右侧的“Publish”进行消息发布。如下图：<img src="6b52ae54/11.png" alt></p></li></ol><p>再返回订阅界面就能看到刚刚发布的消息，如下图：<img src="6b52ae54/12.png" alt></p><h2 id="四、Android中MQTT的使用"><a href="#四、Android中MQTT的使用" class="headerlink" title="四、Android中MQTT的使用"></a>四、Android中MQTT的使用</h2><p>Android中使用MQTT需要使用到Paho Android Service库，Paho Android Service是一个用Java编写的MQTT客户端库。<br>GitHub地址：<a href="https://github.com/eclipse/paho.mqtt.android" target="_blank" rel="noopener">https://github.com/eclipse/paho.mqtt.android</a></p><h3 id="4-1-集成"><a href="#4-1-集成" class="headerlink" title="4.1 集成"></a>4.1 集成</h3><ol><li>在module的build.gradle文件中添加依赖<pre class="line-numbers language-java"><code class="language-java">repositories <span class="token punctuation">{</span> maven <span class="token punctuation">{</span>     url <span class="token string">"https://repo.eclipse.org/content/repositories/paho-snapshots/"</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>dependencies <span class="token punctuation">{</span> compile <span class="token string">'org.eclipse.paho:org.eclipse.paho.client.mqttv3:1.1.0'</span> compile <span class="token string">'org.eclipse.paho:org.eclipse.paho.android.service:1.1.1'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>在 AndroidManifest.xml 添加限权<pre class="line-numbers language-java"><code class="language-java"> <span class="token operator">&lt;</span>uses<span class="token operator">-</span>permission android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.permission.INTERNET"</span> <span class="token operator">/</span><span class="token operator">></span> <span class="token operator">&lt;</span>uses<span class="token operator">-</span>permission android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.permission.ACCESS_NETWORK_STATE"</span> <span class="token operator">/</span><span class="token operator">></span> <span class="token operator">&lt;</span>uses<span class="token operator">-</span>permission android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.permission.WAKE_LOCK"</span> <span class="token operator">/</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>在 AndroidManifest.xml 注册Service （MyMqttService为自己写的服务，下文会讲到）<pre class="line-numbers language-java"><code class="language-java">     <span class="token operator">&lt;</span>service android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"org.eclipse.paho.android.service.MqttService"</span> <span class="token operator">/</span><span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>MqttService<span class="token operator">--</span><span class="token operator">></span>     <span class="token operator">&lt;</span>service android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"com.dongyk.service.MyMqttService"</span><span class="token operator">/</span><span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>MyMqttService<span class="token operator">--</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h3 id="4-2-具体代码"><a href="#4-2-具体代码" class="headerlink" title="4.2 具体代码"></a>4.2 具体代码</h3><h4 id="4-2-1-Android中使用MQTT最主要的就是以下几个方法："><a href="#4-2-1-Android中使用MQTT最主要的就是以下几个方法：" class="headerlink" title="4.2.1 Android中使用MQTT最主要的就是以下几个方法："></a>4.2.1 Android中使用MQTT最主要的就是以下几个方法：</h4><ul><li>connect：连接MQTT服务器，这里主要讲3个参数的方法，如下：<pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> IMqttToken <span class="token function">connect</span><span class="token punctuation">(</span>MqttConnectOptions options<span class="token punctuation">,</span> Object userContext<span class="token punctuation">,</span> IMqttActionListener callback<span class="token punctuation">)</span> <span class="token keyword">throws</span> MqttException <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>参数options：用来携带连接服务器的一系列参数，例如用户名、密码等。<br>参数userContext：可选对象，用于向回调传递上下文。一般传null即可。<br>参数callback：用来监听MQTT是否连接成功的回调</li><li>publish：发布消息，这里使用四个参数的方法，如下：<pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> IMqttDeliveryToken <span class="token function">publish</span><span class="token punctuation">(</span>String topic<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> payload<span class="token punctuation">,</span> <span class="token keyword">int</span> qos<span class="token punctuation">,</span> <span class="token keyword">boolean</span> retained<span class="token punctuation">)</span> <span class="token keyword">throws</span> MqttException<span class="token punctuation">,</span> MqttPersistenceException <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>参数topic：发布消息的主题<br>参数payload：消息的字节数组<br>参数qos：提供消息的服务质量，可传0、1或2<br>参数retained：是否在服务器保留断开连接后的最后一条消息</li><li>subscribe：订阅消息，这里主要讲2个参数的方法，如下：<pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> IMqttToken <span class="token function">subscribe</span><span class="token punctuation">(</span>String topic<span class="token punctuation">,</span> <span class="token keyword">int</span> qos<span class="token punctuation">)</span> <span class="token keyword">throws</span> MqttException<span class="token punctuation">,</span> MqttSecurityException <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>参数topic：订阅消息的主题<br>参数qos：订阅消息的服务质量，可传0、1或2</li></ul><h4 id="4-2-2-MQTT服务——MyMqttService"><a href="#4-2-2-MQTT服务——MyMqttService" class="headerlink" title="4.2.2 MQTT服务——MyMqttService"></a>4.2.2 MQTT服务——MyMqttService</h4><p>下面写一个 Service 来实现MQTT在Android运用中的connect、publish、subscribe</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>wildma<span class="token punctuation">.</span>mqttandroidclient<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>app<span class="token punctuation">.</span>Service<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>content<span class="token punctuation">.</span>Context<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>content<span class="token punctuation">.</span>Intent<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>net<span class="token punctuation">.</span>ConnectivityManager<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>net<span class="token punctuation">.</span>NetworkInfo<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Build<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Handler<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>IBinder<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Nullable<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequiresApi<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Log<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>Toast<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>eclipse<span class="token punctuation">.</span>paho<span class="token punctuation">.</span>android<span class="token punctuation">.</span>service<span class="token punctuation">.</span>MqttAndroidClient<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>eclipse<span class="token punctuation">.</span>paho<span class="token punctuation">.</span>client<span class="token punctuation">.</span>mqttv3<span class="token punctuation">.</span>IMqttActionListener<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>eclipse<span class="token punctuation">.</span>paho<span class="token punctuation">.</span>client<span class="token punctuation">.</span>mqttv3<span class="token punctuation">.</span>IMqttDeliveryToken<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>eclipse<span class="token punctuation">.</span>paho<span class="token punctuation">.</span>client<span class="token punctuation">.</span>mqttv3<span class="token punctuation">.</span>IMqttToken<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>eclipse<span class="token punctuation">.</span>paho<span class="token punctuation">.</span>client<span class="token punctuation">.</span>mqttv3<span class="token punctuation">.</span>MqttCallback<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>eclipse<span class="token punctuation">.</span>paho<span class="token punctuation">.</span>client<span class="token punctuation">.</span>mqttv3<span class="token punctuation">.</span>MqttConnectOptions<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>eclipse<span class="token punctuation">.</span>paho<span class="token punctuation">.</span>client<span class="token punctuation">.</span>mqttv3<span class="token punctuation">.</span>MqttException<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>eclipse<span class="token punctuation">.</span>paho<span class="token punctuation">.</span>client<span class="token punctuation">.</span>mqttv3<span class="token punctuation">.</span>MqttMessage<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Author       wildma * Github       https://github.com/wildma * CreateDate   2018/11/08 * Desc            ${MQTT服务} */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyMqttService</span> <span class="token keyword">extends</span> <span class="token class-name">Service</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> String TAG <span class="token operator">=</span> MyMqttService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> MqttAndroidClient  mqttAndroidClient<span class="token punctuation">;</span>    <span class="token keyword">private</span>        MqttConnectOptions mMqttConnectOptions<span class="token punctuation">;</span>    <span class="token keyword">public</span>        String HOST           <span class="token operator">=</span> <span class="token string">"tcp://192.168.0.102:61613"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//服务器地址（协议+地址+端口号）</span>    <span class="token keyword">public</span>        String USERNAME       <span class="token operator">=</span> <span class="token string">"admin"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//用户名</span>    <span class="token keyword">public</span>        String PASSWORD       <span class="token operator">=</span> <span class="token string">"password"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//密码</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String PUBLISH_TOPIC  <span class="token operator">=</span> <span class="token string">"tourist_enter"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//发布主题</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String RESPONSE_TOPIC <span class="token operator">=</span> <span class="token string">"message_arrived"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//响应主题</span>    <span class="token annotation punctuation">@RequiresApi</span><span class="token punctuation">(</span>api <span class="token operator">=</span> <span class="token number">26</span><span class="token punctuation">)</span>    <span class="token keyword">public</span>        String CLIENTID       <span class="token operator">=</span> Build<span class="token punctuation">.</span>VERSION<span class="token punctuation">.</span>SDK_INT <span class="token operator">>=</span> Build<span class="token punctuation">.</span>VERSION_CODES<span class="token punctuation">.</span>O            <span class="token operator">?</span> Build<span class="token punctuation">.</span><span class="token function">getSerial</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> Build<span class="token punctuation">.</span>SERIAL<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//客户端ID，一般以客户端唯一标识符表示，这里用设备序列号表示</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">onStartCommand</span><span class="token punctuation">(</span>Intent intent<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">,</span> <span class="token keyword">int</span> startId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onStartCommand</span><span class="token punctuation">(</span>intent<span class="token punctuation">,</span> flags<span class="token punctuation">,</span> startId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Nullable</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> IBinder <span class="token function">onBind</span><span class="token punctuation">(</span>Intent intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 开启服务     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">startService</span><span class="token punctuation">(</span>Context mContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mContext<span class="token punctuation">.</span><span class="token function">startService</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span>mContext<span class="token punctuation">,</span> MyMqttService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 发布 （模拟其他客户端发布消息）     *     * @param message 消息     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">publish</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String topic <span class="token operator">=</span> PUBLISH_TOPIC<span class="token punctuation">;</span>        Integer qos <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        Boolean retained <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//参数分别为：主题、消息的字节数组、服务质量、是否在服务器保留断开连接后的最后一条消息</span>            mqttAndroidClient<span class="token punctuation">.</span><span class="token function">publish</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span> message<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> qos<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> retained<span class="token punctuation">.</span><span class="token function">booleanValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">MqttException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 响应 （收到其他客户端的消息后，响应给对方告知消息已到达或者消息有问题等）     *     * @param message 消息     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">response</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String topic <span class="token operator">=</span> RESPONSE_TOPIC<span class="token punctuation">;</span>        Integer qos <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        Boolean retained <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//参数分别为：主题、消息的字节数组、服务质量、是否在服务器保留断开连接后的最后一条消息</span>            mqttAndroidClient<span class="token punctuation">.</span><span class="token function">publish</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span> message<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> qos<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> retained<span class="token punctuation">.</span><span class="token function">booleanValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">MqttException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 初始化     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String serverURI <span class="token operator">=</span> HOST<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//服务器地址（协议+地址+端口号）</span>        mqttAndroidClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MqttAndroidClient</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> serverURI<span class="token punctuation">,</span> CLIENTID<span class="token punctuation">)</span><span class="token punctuation">;</span>        mqttAndroidClient<span class="token punctuation">.</span><span class="token function">setCallback</span><span class="token punctuation">(</span>mqttCallback<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置监听订阅消息的回调</span>        mMqttConnectOptions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MqttConnectOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mMqttConnectOptions<span class="token punctuation">.</span><span class="token function">setCleanSession</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置是否清除缓存</span>        mMqttConnectOptions<span class="token punctuation">.</span><span class="token function">setConnectionTimeout</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置超时时间，单位：秒</span>        mMqttConnectOptions<span class="token punctuation">.</span><span class="token function">setKeepAliveInterval</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置心跳包发送间隔，单位：秒</span>        mMqttConnectOptions<span class="token punctuation">.</span><span class="token function">setUserName</span><span class="token punctuation">(</span>USERNAME<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置用户名</span>        mMqttConnectOptions<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span>PASSWORD<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置密码</span>        <span class="token comment" spellcheck="true">// last will message</span>        <span class="token keyword">boolean</span> doConnect <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        String message <span class="token operator">=</span> <span class="token string">"{\"terminal_uid\":\""</span> <span class="token operator">+</span> CLIENTID <span class="token operator">+</span> <span class="token string">"\"}"</span><span class="token punctuation">;</span>        String topic <span class="token operator">=</span> PUBLISH_TOPIC<span class="token punctuation">;</span>        Integer qos <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        Boolean retained <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">!</span>message<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token operator">!</span>topic<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 最后的遗嘱</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                mMqttConnectOptions<span class="token punctuation">.</span><span class="token function">setWill</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span> message<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> qos<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> retained<span class="token punctuation">.</span><span class="token function">booleanValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Exception Occured"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>                doConnect <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                iMqttActionListener<span class="token punctuation">.</span><span class="token function">onFailure</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>doConnect<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">doClientConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 连接MQTT服务器     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">doClientConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mqttAndroidClient<span class="token punctuation">.</span><span class="token function">isConnected</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isConnectIsNomarl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                mqttAndroidClient<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>mMqttConnectOptions<span class="token punctuation">,</span> null<span class="token punctuation">,</span> iMqttActionListener<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">MqttException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 判断网络是否连接     */</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">isConnectIsNomarl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ConnectivityManager connectivityManager <span class="token operator">=</span> <span class="token punctuation">(</span>ConnectivityManager<span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSystemService</span><span class="token punctuation">(</span>Context<span class="token punctuation">.</span>CONNECTIVITY_SERVICE<span class="token punctuation">)</span><span class="token punctuation">;</span>        NetworkInfo info <span class="token operator">=</span> connectivityManager<span class="token punctuation">.</span><span class="token function">getActiveNetworkInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>info <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> info<span class="token punctuation">.</span><span class="token function">isAvailable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            String name <span class="token operator">=</span> info<span class="token punctuation">.</span><span class="token function">getTypeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"当前网络名称："</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"没有可用网络"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/*没有可用网络的时候，延迟3秒再尝试重连*/</span>            <span class="token keyword">new</span> <span class="token class-name">Handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">postDelayed</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">doClientConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//MQTT是否连接成功的监听</span>    <span class="token keyword">private</span> IMqttActionListener iMqttActionListener <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IMqttActionListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onSuccess</span><span class="token punctuation">(</span>IMqttToken arg0<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"连接成功 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                mqttAndroidClient<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>PUBLISH_TOPIC<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//订阅主题，参数：主题、服务质量</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">MqttException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onFailure</span><span class="token punctuation">(</span>IMqttToken arg0<span class="token punctuation">,</span> Throwable arg1<span class="token punctuation">)</span> <span class="token punctuation">{</span>            arg1<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"连接失败 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">doClientConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//连接失败，重连（可关闭服务器进行模拟）</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//订阅主题的回调</span>    <span class="token keyword">private</span> MqttCallback mqttCallback <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MqttCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">messageArrived</span><span class="token punctuation">(</span>String topic<span class="token punctuation">,</span> MqttMessage message<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>            Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"收到消息： "</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getPayload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//收到消息，这里弹出Toast表示。如果需要更新UI，可以使用广播或者EventBus进行发送</span>            Toast<span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span><span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"messageArrived: "</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getPayload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Toast<span class="token punctuation">.</span>LENGTH_LONG<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//收到其他客户端的消息后，响应给对方告知消息已到达或者消息有问题等</span>            <span class="token function">response</span><span class="token punctuation">(</span><span class="token string">"message arrived"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deliveryComplete</span><span class="token punctuation">(</span>IMqttDeliveryToken arg0<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">connectionLost</span><span class="token punctuation">(</span>Throwable arg0<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"连接断开 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">doClientConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//连接断开，重连</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            mqttAndroidClient<span class="token punctuation">.</span><span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//断开连接</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">MqttException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该 MyMqttService 类的大概逻辑就是开启服务后，调用init()方法初始化各个参数，包括服务器地址、用户名、密码等等，然后调用doClientConnection()方法连接MQTT服务器，iMqttActionListener用来监听MQTT是否连接成功，连接成功则订阅主题。mqttCallback为订阅主题的回调，收到消息后会执行该回调中的messageArrived()方法，拿到消息后进行UI更新，并调用response()方法响应给对方告知消息已到达或者消息有问题等。</p><h4 id="4-2-3-开启服务"><a href="#4-2-3-开启服务" class="headerlink" title="4.2.3 开启服务"></a>4.2.3 开启服务</h4><p> 在MainActivity中开启服务，这里为了方便不做UI更新，所以就一行开启服务的代码，如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Bundle<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>v7<span class="token punctuation">.</span>app<span class="token punctuation">.</span>AppCompatActivity<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>view<span class="token punctuation">.</span>View<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>        MyMqttService<span class="token punctuation">.</span><span class="token function">startService</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//开启服务</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、模拟真实场景"><a href="#五、模拟真实场景" class="headerlink" title="五、模拟真实场景"></a>五、模拟真实场景</h2><p>还是以文章开头说的例子来讲，现在拿mqttfx客户端作为闸机设备，上面的Android代码运行后作为大屏幕。</p><ol><li><p>将大屏幕与服务器连接<br>即将大屏幕APK运行到Android TV上，没有TV可以用Android手机代替。记得代码中的发布主题设置为“tourist_enter”，响应主题设置为“message_arrived”。</p></li><li><p>将闸机设备与服务器连接<br>选择闸机设备——点击连接——发布主题设置为“tourist_enter”，如下图：<img src="6b52ae54/13.png" alt><br>切换到Subscribe界面——响应主题设置为“message_arrived”——点击Subscribe按钮进行订阅，如下图：<br><img src="6b52ae54/14.png" alt></p></li><li><p>发布<br>点击步骤2图中的Publish按钮进行发布</p></li><li><p>大屏幕收到消息<br>这时候大屏幕收到服务器转发过来的消息，就会在大屏幕上显示进场人数，并响应给对方告知消息已到达。代码中为了简单就弹个Toast表示，具体显示就不贴图了。</p></li><li><p>闸机设备收到消息<br>这时候mqttfx切换到Subscribe界面就可以看到大屏幕响应回来的消息，如下：<img src="6b52ae54/15.png" alt></p></li></ol><p>如上流程就是大概模拟我在开发中用到的MQTT使用流程，当然我的真实项目并没有那么简单，还包括各种数据和UI交互显示。希望模拟这种真实的使用流程进行讲解能让各位更好的理解MQTT的使用，有不足的请指出。</p><p>项目地址：<a href="https://github.com/wildma/MqttAndroidClient" target="_blank" rel="noopener">MqttAndroidClient</a></p><p>参考资料：</p><ul><li><a href="https://www.hivemq.com/blog/how-to-get-started-with-mqtt" target="_blank" rel="noopener">MQTT 101 – How to Get Started with the lightweight IoT Protocol</a> </li><li><a href="https://www.hivemq.com/blog/mqtt-client-library-enyclopedia-paho-android-service" target="_blank" rel="noopener">MQTT Client Library Encyclopedia – Paho Android Service</a> </li><li><a href="https://blog.csdn.net/qq_17250009/article/details/52774472" target="_blank" rel="noopener">Android APP必备高级功能，消息推送之MQTT</a> </li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MQTT </tag>
            
            <tag> 消息推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>发布自己的开源库让他人使用——基于 JitPack</title>
      <link href="/blog/febb7b68.html"/>
      <url>/blog/febb7b68.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在开发中为了方便，我们通常会使用第三方开源库，例如经常使用的图片加载库Glide（如下）。那么我们有没有想过自己也发布一个开源库让别人使用呢？虽然之前也发布过，但只是自己随便写的测试开源库，这次发布的也算是自己真正意义上可以给别人使用的开源库了吧！所以也顺便教大家怎么使用JitPack发布自己的开源库。</p><pre class="line-numbers language-java"><code class="language-java">compile <span class="token string">'com.github.bumptech.glide:glide:3.7.0'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="一、为什么选择JitPack"><a href="#一、为什么选择JitPack" class="headerlink" title="一、为什么选择JitPack"></a>一、为什么选择JitPack</h2><p>目前比较常用的Android Library仓库主要有Jcenter、Maven Central和JitPack。一开始Android Studio选择Maven Central作为默认仓库，但是后来因为上传开源库复杂度与安全方面等原因，Android Studio把默认的仓库替换成jcenter，即当你新建一个项目的时候，你会发现Android Studio已经自动在项目的build.gradle中帮你配制好了jcenter。如下：<br><img src="febb7b68/1.png" alt><br>但是前2种发布过程是比较麻烦的，需要验证、审核、踩一系列的坑等等。而JitPack发布过程那就简单多了，几分钟搞定，所以我选择了JitPack。</p><h2 id="二、使用"><a href="#二、使用" class="headerlink" title="二、使用"></a>二、使用</h2><p><strong>1 创建开源库</strong><br>新建好一个Android项目后，我们需要创建自己的开源库，如下：<br><img src="febb7b68/2.png" alt></p><p><img src="febb7b68/3.png" alt></p><p>创建完成后是这样的，如下：<br><img src="febb7b68/4.png" alt><br>注意：由于JitPack最终生成的依赖名称（如下）是以项目名称命名的，<br>所以最好一开始创建项目的时候项目名称就要命名好，也可以后续在Github上修改项目的名称。</p><pre class="line-numbers language-java"><code class="language-java">    compile <span class="token string">'com.github.wildma:idcardcamera:1.0.0'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>很多博客说需要步骤2和3，但是经过自己验证不加上也是可以的。 </p></blockquote><p><strong>2 在项目的build.gradle中添加android-maven-gradle-plugin依赖，如下：</strong><br><img src="febb7b68/5.png" alt></p><p><strong>3  在library的build.gradle中启用android-maven-gradle-plugin和配置你的group，如下：</strong><br><img src="febb7b68/6.png" alt></p><p><strong>4 将项目上传到Github</strong></p><ol><li>配置忽略文件</li><li>上传项目，如下：<br><img src="febb7b68/7.png" alt></li></ol><p><strong>5  打开项目主页，创建releases</strong></p><ol><li><p>点击releases，如下：<br><img src="febb7b68/8.png" alt></p></li><li><p>选择Releases或Tags都可以，然后点击创建。如下：<br><img src="febb7b68/9.png" alt></p></li></ol><p><strong>6  填写发布信息进行Releases或Tags代码发布</strong><br><img src="febb7b68/10.png" alt></p><p><strong>7 将项目发布到JitPack</strong></p><ol><li>进入JitPack官网 <a href="https://link.jianshu.com/?t=https://jitpack.io/" target="_blank" rel="noopener">https://jitpack.io/</a>，找到自己的项目，如下：</li></ol><p><img src="febb7b68/11.png" alt></p><ol start="2"><li>点击获取后，就会列出library的信息，并告诉你怎么使用，如下：<br><img src="febb7b68/12.png" alt></li></ol><p><strong>8 给Github仓库添加徽章</strong><br>在第7步完成后，底部会有个JitPack 1.0.0的图标(如下图)，点击它会弹出一段链接，将它复制到GitHub项目的readme.md里面去就可以显示了，效果如图中小图标，这样看起来显得高端一点。<br><img src="febb7b68/13.png" alt></p><p>OK，到这里就发布完成了，拿去你的项目中试试吧！</p><p>开源库地址：<a href="https://github.com/wildma/IDCardCamera" target="_blank" rel="noopener">IDCardCamera</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> 开源库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JitPack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 自定义相机实现身份证拍照，并加入自动对焦与图片不规则裁剪</title>
      <link href="/blog/26d11c6d.html"/>
      <url>/blog/26d11c6d.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、-前言"><a href="#一、-前言" class="headerlink" title="一、 前言"></a>一、 前言</h2><p>前段时间，应公司要求实现一个自定义相机，需要有自动对焦和图片不规则裁剪功能，其实难点主要也是这2个功能。经Google搜索，发现并没有现成的轮子。最后通过各种查找资料，自己封装了一个，效果图如下：</p><p><img src="26d11c6d/1.jpg" alt="身份证来源网络虚拟构造"></p><h2 id="二、使用"><a href="#二、使用" class="headerlink" title="二、使用"></a>二、使用</h2><p><strong>Step 1. 添加JitPack仓库</strong><br>在项目的build.gradle添加JitPack仓库</p><pre class="line-numbers language-java"><code class="language-java">allprojects <span class="token punctuation">{</span>    repositories <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        maven <span class="token punctuation">{</span> url <span class="token string">"https://jitpack.io"</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Step 2. 添加依赖</strong><br>在需要使用的module中添加依赖（最新版本见 <a href="https://github.com/wildma/WildmaIDCardCamera" target="_blank" rel="noopener">WildmaIDCardCamera</a>）</p><pre class="line-numbers language-java"><code class="language-java">dependencies <span class="token punctuation">{</span>    compile <span class="token string">'com.github.wildma:IDCardCamera:1.0.1'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>或者引用本地lib</p><pre class="line-numbers language-java"><code class="language-java">compile <span class="token function">project</span><span class="token punctuation">(</span><span class="token string">':idcardcamera'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>Step 3. 调用CameraActivity类的toCameraActivity方法打开拍照界面</strong></p><pre class="line-numbers language-java"><code class="language-java">CameraActivity<span class="token punctuation">.</span><span class="token function">toCameraActivity</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> CameraActivity<span class="token punctuation">.</span>TYPE_IDCARD_FRONT<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>Step 4. 在onActivityResult方法中获取裁剪后的图片</strong></p><pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onActivityResult</span><span class="token punctuation">(</span><span class="token keyword">int</span> requestCode<span class="token punctuation">,</span> <span class="token keyword">int</span> resultCode<span class="token punctuation">,</span> Intent data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>requestCode <span class="token operator">==</span> CameraActivity<span class="token punctuation">.</span>REQUEST_CODE <span class="token operator">&amp;&amp;</span> resultCode <span class="token operator">==</span> CameraActivity<span class="token punctuation">.</span>RESULT_CODE<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//获取图片路径，显示图片</span>            <span class="token keyword">final</span> String path <span class="token operator">=</span> CameraActivity<span class="token punctuation">.</span><span class="token function">getImagePath</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>TextUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                imageView<span class="token punctuation">.</span><span class="token function">setImageBitmap</span><span class="token punctuation">(</span>BitmapFactory<span class="token punctuation">.</span><span class="token function">decodeFile</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、功能特点"><a href="#三、功能特点" class="headerlink" title="三、功能特点"></a>三、功能特点</h2><p>自定义相机的代码我就不重复造轮子了，网上很多，我找了个UI比较不错的项目 <a href="https://github.com/smartown/CertificateCamera" target="_blank" rel="noopener">CertificateCamera</a> ，然后在该项目的基础上进行功能增加的，主要增加的内容如下：</p><ol><li>解决该项目拍照不成功的问题（该项目代码有问题，博主也一直没有去修改，这里帮他改过来了）</li><li>增加自动对焦功能</li><li>增加图片不规则裁剪功能</li></ol><h3 id="3-1-自动对焦"><a href="#3-1-自动对焦" class="headerlink" title="3.1 自动对焦"></a>3.1 自动对焦</h3><p>实现自动对焦有多种方式，这里列举下：</p><h4 id="3-1-1-使用原生API"><a href="#3-1-1-使用原生API" class="headerlink" title="3.1.1 使用原生API"></a>3.1.1 使用原生API</h4><ol><li><p>调用autoFocus方法，如下：</p><pre class="line-numbers language-java"><code class="language-java">     camera<span class="token punctuation">.</span><span class="token function">autoFocus</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Camera<span class="token punctuation">.</span>AutoFocusCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token annotation punctuation">@Override</span>         <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onAutoFocus</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> success<span class="token punctuation">,</span> Camera camera<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结论：不满足，大部分手机只对焦一次。</p></li><li><p>设置对焦模式，如下：</p><pre class="line-numbers language-java"><code class="language-java">camera<span class="token punctuation">.</span><span class="token function">getParameters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setFocusMode</span><span class="token punctuation">(</span>Camera<span class="token punctuation">.</span>Parameters<span class="token punctuation">.</span>FOCUS_MODE_CONTINUOUS_PICTURE<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或</p><pre class="line-numbers language-java"><code class="language-java">camera<span class="token punctuation">.</span><span class="token function">getParameters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setFocusMode</span><span class="token punctuation">(</span>Camera<span class="token punctuation">.</span>Parameters<span class="token punctuation">.</span>FOCUS_MODE_CONTINUOUS_VIDEO<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结论：不满足，不能兼容所有手机。</p></li></ol><h4 id="3-1-2-使用定时器"><a href="#3-1-2-使用定时器" class="headerlink" title="3.1.2 使用定时器"></a>3.1.2 使用定时器</h4><p>即使用一个定时器，每隔一段时间进行自动对焦。代码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>wildma<span class="token punctuation">.</span>idcardcamera<span class="token punctuation">.</span>camera<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>SuppressLint<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>hardware<span class="token punctuation">.</span>Camera<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>AsyncTask<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Build<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Log<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Collection<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>RejectedExecutionException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AutoFocusManager</span> <span class="token keyword">implements</span> <span class="token class-name">Camera<span class="token punctuation">.</span>AutoFocusCallback</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String TAG <span class="token operator">=</span> AutoFocusManager<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> AUTO_FOCUS_INTERVAL_MS <span class="token operator">=</span> 2000L<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Collection<span class="token operator">&lt;</span>String<span class="token operator">></span> FOCUS_MODES_CALLING_AF<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        FOCUS_MODES_CALLING_AF <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FOCUS_MODES_CALLING_AF<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>Camera<span class="token punctuation">.</span>Parameters<span class="token punctuation">.</span>FOCUS_MODE_AUTO<span class="token punctuation">)</span><span class="token punctuation">;</span>        FOCUS_MODES_CALLING_AF<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>Camera<span class="token punctuation">.</span>Parameters<span class="token punctuation">.</span>FOCUS_MODE_MACRO<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span>            useAutoFocus<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Camera             camera<span class="token punctuation">;</span>    <span class="token keyword">private</span>       <span class="token keyword">boolean</span>            stopped<span class="token punctuation">;</span>    <span class="token keyword">private</span>       <span class="token keyword">boolean</span>            focusing<span class="token punctuation">;</span>    <span class="token keyword">private</span>       AsyncTask<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token operator">></span> outstandingTask<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">AutoFocusManager</span><span class="token punctuation">(</span>Camera camera<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>camera <span class="token operator">=</span> camera<span class="token punctuation">;</span>        String currentFocusMode <span class="token operator">=</span> camera<span class="token punctuation">.</span><span class="token function">getParameters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFocusMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        useAutoFocus <span class="token operator">=</span> FOCUS_MODES_CALLING_AF<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>currentFocusMode<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//  Log.i(TAG, "Current focus mode '" + currentFocusMode + "'; use auto focus? " + useAutoFocus);</span>        <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">onAutoFocus</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> success<span class="token punctuation">,</span> Camera theCamera<span class="token punctuation">)</span> <span class="token punctuation">{</span>        focusing <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token function">autoFocusAgainLater</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@SuppressLint</span><span class="token punctuation">(</span><span class="token string">"NewApi"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">autoFocusAgainLater</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>stopped <span class="token operator">&amp;&amp;</span> outstandingTask <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            AutoFocusTask newTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AutoFocusTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>Build<span class="token punctuation">.</span>VERSION<span class="token punctuation">.</span>SDK_INT <span class="token operator">>=</span> <span class="token number">11</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    newTask<span class="token punctuation">.</span><span class="token function">executeOnExecutor</span><span class="token punctuation">(</span>AsyncTask<span class="token punctuation">.</span>THREAD_POOL_EXECUTOR<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    newTask<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                outstandingTask <span class="token operator">=</span> newTask<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RejectedExecutionException</span> ree<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Could not request auto focus"</span><span class="token punctuation">,</span> ree<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>useAutoFocus<span class="token punctuation">)</span> <span class="token punctuation">{</span>            outstandingTask <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>stopped <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>focusing<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    camera<span class="token punctuation">.</span><span class="token function">autoFocus</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    Log<span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"自动对焦"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    focusing <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> re<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// Have heard RuntimeException reported in Android 4.0.x+;</span>                    <span class="token comment" spellcheck="true">// continue?</span>                    Log<span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Unexpected exception while focusing"</span><span class="token punctuation">,</span> re<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// Try again later to keep cycle going</span>                    <span class="token function">autoFocusAgainLater</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">cancelOutstandingTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>outstandingTask <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>outstandingTask<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> AsyncTask<span class="token punctuation">.</span>Status<span class="token punctuation">.</span>FINISHED<span class="token punctuation">)</span> <span class="token punctuation">{</span>                outstandingTask<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            outstandingTask <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        stopped <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>useAutoFocus<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">cancelOutstandingTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// Doesn't hurt to call this even if not focusing</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                camera<span class="token punctuation">.</span><span class="token function">cancelAutoFocus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> re<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// Have heard RuntimeException reported in Android 4.0.x+;</span>                <span class="token comment" spellcheck="true">// continue?</span>                Log<span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Unexpected exception while cancelling focusing"</span><span class="token punctuation">,</span> re<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">AutoFocusTask</span> <span class="token keyword">extends</span> <span class="token class-name">AsyncTask</span><span class="token operator">&lt;</span>Object<span class="token punctuation">,</span> Object<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">protected</span> Object <span class="token function">doInBackground</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> voids<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>AUTO_FOCUS_INTERVAL_MS<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>            <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结论：虽然可以实现，但是你对比下手机自带的相机，发现并不是每隔一段时间进行自动对焦的，都是通过移动手机后才自动对焦的，所以这种方式是不合理的。</p><h4 id="3-1-3-使用传感器"><a href="#3-1-3-使用传感器" class="headerlink" title="3.1.3 使用传感器"></a>3.1.3 使用传感器</h4><p>即根据传感器来判断手机的运动状态，如果手机从静止状态变成运行状态后再次进入静止状态，此时就是手机的对焦时机。代码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>wildma<span class="token punctuation">.</span>idcardcamera<span class="token punctuation">.</span>camera<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>app<span class="token punctuation">.</span>Activity<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>content<span class="token punctuation">.</span>Context<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>hardware<span class="token punctuation">.</span>Sensor<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>hardware<span class="token punctuation">.</span>SensorEvent<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>hardware<span class="token punctuation">.</span>SensorEventListener<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>hardware<span class="token punctuation">.</span>SensorManager<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Log<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Calendar<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SensorControler</span> <span class="token keyword">implements</span> <span class="token class-name">SensorEventListener</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String TAG <span class="token operator">=</span> <span class="token string">"SensorControler"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> SensorManager mSensorManager<span class="token punctuation">;</span>    <span class="token keyword">private</span> Sensor        mSensor<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span>           mX<span class="token punctuation">,</span> mY<span class="token punctuation">,</span> mZ<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> lastStaticStamp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    Calendar mCalendar<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> DELEY_DURATION <span class="token operator">=</span> <span class="token number">500</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> SensorControler mInstance<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> foucsing <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//1 表示没有被锁定 0表示被锁定</span>    <span class="token keyword">boolean</span> isFocusing <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> canFocusIn <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//内部是否能够对焦控制机制</span>    <span class="token keyword">boolean</span> canFocus   <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> STATUS_NONE   <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> STATUS_STATIC <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> STATUS_MOVE   <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">private</span>             <span class="token keyword">int</span> STATUE        <span class="token operator">=</span> STATUS_NONE<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">SensorControler</span><span class="token punctuation">(</span>Context context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mSensorManager <span class="token operator">=</span> <span class="token punctuation">(</span>SensorManager<span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getSystemService</span><span class="token punctuation">(</span>Activity<span class="token punctuation">.</span>SENSOR_SERVICE<span class="token punctuation">)</span><span class="token punctuation">;</span>        mSensor <span class="token operator">=</span> mSensorManager<span class="token punctuation">.</span><span class="token function">getDefaultSensor</span><span class="token punctuation">(</span>Sensor<span class="token punctuation">.</span>TYPE_ACCELEROMETER<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// TYPE_GRAVITY</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> SensorControler <span class="token function">getInstance</span><span class="token punctuation">(</span>Context context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mInstance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            mInstance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SensorControler</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> mInstance<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">restParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        canFocus <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        mSensorManager<span class="token punctuation">.</span><span class="token function">registerListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> mSensor<span class="token punctuation">,</span>                SensorManager<span class="token punctuation">.</span>SENSOR_DELAY_NORMAL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onStop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        mSensorManager<span class="token punctuation">.</span><span class="token function">unregisterListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> mSensor<span class="token punctuation">)</span><span class="token punctuation">;</span>        canFocus <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onAccuracyChanged</span><span class="token punctuation">(</span>Sensor sensor<span class="token punctuation">,</span> <span class="token keyword">int</span> accuracy<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onSensorChanged</span><span class="token punctuation">(</span>SensorEvent event<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>sensor <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>isFocusing<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">restParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>sensor<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> Sensor<span class="token punctuation">.</span>TYPE_ACCELEROMETER<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> event<span class="token punctuation">.</span>values<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> event<span class="token punctuation">.</span>values<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> z <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> event<span class="token punctuation">.</span>values<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            mCalendar <span class="token operator">=</span> Calendar<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">long</span> stamp <span class="token operator">=</span> mCalendar<span class="token punctuation">.</span><span class="token function">getTimeInMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 1393844912</span>            <span class="token keyword">int</span> second <span class="token operator">=</span> mCalendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>SECOND<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 53</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>STATUE <span class="token operator">!=</span> STATUS_NONE<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> px <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>mX <span class="token operator">-</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> py <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>mY <span class="token operator">-</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> pz <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>mZ <span class="token operator">-</span> z<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//                Log.d(TAG, "pX:" + px + "  pY:" + py + "  pZ:" + pz + "    stamp:"</span>                <span class="token comment" spellcheck="true">//                        + stamp + "  second:" + second);</span>                <span class="token keyword">double</span> value <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>px <span class="token operator">*</span> px <span class="token operator">+</span> py <span class="token operator">*</span> py <span class="token operator">+</span> pz <span class="token operator">*</span> pz<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">></span> <span class="token number">1.4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//                    textviewF.setText("检测手机在移动..");</span>                    <span class="token comment" spellcheck="true">//                    Log.i(TAG,"mobile moving");</span>                    STATUE <span class="token operator">=</span> STATUS_MOVE<span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//                    textviewF.setText("检测手机静止..");</span>                    <span class="token comment" spellcheck="true">//                    Log.i(TAG,"mobile static");</span>                    <span class="token comment" spellcheck="true">//上一次状态是move，记录静态时间点</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>STATUE <span class="token operator">==</span> STATUS_MOVE<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        lastStaticStamp <span class="token operator">=</span> stamp<span class="token punctuation">;</span>                        canFocusIn <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>canFocusIn<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>stamp <span class="token operator">-</span> lastStaticStamp <span class="token operator">></span> DELEY_DURATION<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token comment" spellcheck="true">//移动后静止一段时间，可以发生对焦行为</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isFocusing<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                canFocusIn <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                                <span class="token comment" spellcheck="true">//                                onCameraFocus();</span>                                <span class="token keyword">if</span> <span class="token punctuation">(</span>mCameraFocusListener <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                    mCameraFocusListener<span class="token punctuation">.</span><span class="token function">onFocus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token punctuation">}</span>                                <span class="token comment" spellcheck="true">//                                Log.i(TAG,"mobile focusing");</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                    STATUE <span class="token operator">=</span> STATUS_STATIC<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                lastStaticStamp <span class="token operator">=</span> stamp<span class="token punctuation">;</span>                STATUE <span class="token operator">=</span> STATUS_STATIC<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            mX <span class="token operator">=</span> x<span class="token punctuation">;</span>            mY <span class="token operator">=</span> y<span class="token punctuation">;</span>            mZ <span class="token operator">=</span> z<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 重置参数     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">restParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        STATUE <span class="token operator">=</span> STATUS_NONE<span class="token punctuation">;</span>        canFocusIn <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        mX <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        mY <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        mZ <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 对焦是否被锁定     *     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isFocusLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>canFocus<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> foucsing <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 锁定对焦     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lockFocus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        isFocusing <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        foucsing<span class="token operator">--</span><span class="token punctuation">;</span>        Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"lockFocus"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 解锁对焦     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">unlockFocus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        isFocusing <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        foucsing<span class="token operator">++</span><span class="token punctuation">;</span>        Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"unlockFocus"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">restFoucs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        foucsing <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> CameraFocusListener mCameraFocusListener<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CameraFocusListener</span> <span class="token punctuation">{</span>        <span class="token keyword">void</span> <span class="token function">onFocus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCameraFocusListener</span><span class="token punctuation">(</span>CameraFocusListener mCameraFocusListener<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mCameraFocusListener <span class="token operator">=</span> mCameraFocusListener<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结论：完美实现，只要带传感器的手机就能兼容。</p><h3 id="3-2-图片不规则裁剪"><a href="#3-2-图片不规则裁剪" class="headerlink" title="3.2 图片不规则裁剪"></a>3.2 图片不规则裁剪</h3><p>要实现的效果如下：<br><img src="26d11c6d/2.gif" alt></p><p>由效果图可得出如下结论：</p><ol><li>需要利用drawline将四个坐标点连接起来</li><li>需要处理触摸与拖拽事件，即随着手指的移动，坐标点跟随移动。</li><li>需要处理裁剪框区域内的全透明化和区域外的半透明化的效果。</li><li>其他等等…</li></ol><p>也就是说需要很强的自定义View的能力和计算能力，所以想着还是找找现成的轮子吧。<br>经过各种Google，发现国内很难找到这种轮子，最终还是在Github上找了一个国外的，主要代码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>wildma<span class="token punctuation">.</span>idcardcamera<span class="token punctuation">.</span>cropper<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>content<span class="token punctuation">.</span>Context<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>graphics<span class="token punctuation">.</span>Bitmap<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>graphics<span class="token punctuation">.</span>Canvas<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>graphics<span class="token punctuation">.</span>Color<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>graphics<span class="token punctuation">.</span>Matrix<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>graphics<span class="token punctuation">.</span>Paint<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>graphics<span class="token punctuation">.</span>Path<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>graphics<span class="token punctuation">.</span>Point<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>graphics<span class="token punctuation">.</span>PorterDuff<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>graphics<span class="token punctuation">.</span>PorterDuffXfermode<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>graphics<span class="token punctuation">.</span>Rect<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>graphics<span class="token punctuation">.</span>Region<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Nullable<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>util<span class="token punctuation">.</span>AttributeSet<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Log<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>view<span class="token punctuation">.</span>MotionEvent<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>view<span class="token punctuation">.</span>View<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CropOverlayView</span> <span class="token keyword">extends</span> <span class="token class-name">View</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> defaultMargin <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> minDistance   <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> vertexSize    <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> gridSize      <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Bitmap bitmap<span class="token punctuation">;</span>    <span class="token keyword">private</span> Point  topLeft<span class="token punctuation">,</span> topRight<span class="token punctuation">,</span> bottomLeft<span class="token punctuation">,</span> bottomRight<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">float</span> touchDownX<span class="token punctuation">,</span> touchDownY<span class="token punctuation">;</span>    <span class="token keyword">private</span> CropPosition cropPosition<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> currentWidth  <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> currentHeight <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> minX<span class="token punctuation">,</span> maxX<span class="token punctuation">,</span> minY<span class="token punctuation">,</span> maxY<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">CropOverlayView</span><span class="token punctuation">(</span>Context context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">CropOverlayView</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> AttributeSet attrs<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> attrs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBitmap</span><span class="token punctuation">(</span>Bitmap bitmap<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>bitmap <span class="token operator">=</span> bitmap<span class="token punctuation">;</span>        <span class="token function">resetPoints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onDraw</span><span class="token punctuation">(</span>Canvas canvas<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDraw</span><span class="token punctuation">(</span>canvas<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> currentWidth <span class="token operator">||</span> <span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> currentHeight<span class="token punctuation">)</span> <span class="token punctuation">{</span>            currentWidth <span class="token operator">=</span> <span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            currentHeight <span class="token operator">=</span> <span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">resetPoints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token string">"stk"</span><span class="token punctuation">,</span> <span class="token string">"canvasSize="</span> <span class="token operator">+</span> <span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"x"</span> <span class="token operator">+</span> <span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">drawBackground</span><span class="token punctuation">(</span>canvas<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">drawVertex</span><span class="token punctuation">(</span>canvas<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">drawEdge</span><span class="token punctuation">(</span>canvas<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//        drawGrid(canvas);//裁剪框内部线条</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">resetPoints</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token string">"stk"</span><span class="token punctuation">,</span> <span class="token string">"resetPoints, bitmap="</span> <span class="token operator">+</span> bitmap<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 1. calculate bitmap size in new canvas</span>        <span class="token keyword">float</span> scaleX <span class="token operator">=</span> bitmap<span class="token punctuation">.</span><span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1.0f</span> <span class="token operator">/</span> <span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">float</span> scaleY <span class="token operator">=</span> bitmap<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1.0f</span> <span class="token operator">/</span> <span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">float</span> maxScale <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>scaleX<span class="token punctuation">,</span> scaleY<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2. determine minX , maxX if maxScale = scaleY | minY, maxY if maxScale = scaleX</span>        <span class="token keyword">int</span> minX <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxX <span class="token operator">=</span> <span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> minY <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxY <span class="token operator">=</span> <span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>maxScale <span class="token operator">==</span> scaleY<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// image very tall</span>            <span class="token keyword">int</span> bitmapInCanvasWidth <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>bitmap<span class="token punctuation">.</span><span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> maxScale<span class="token punctuation">)</span><span class="token punctuation">;</span>            minX <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> bitmapInCanvasWidth<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>            maxX <span class="token operator">=</span> <span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> minX<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// image very wide</span>            <span class="token keyword">int</span> bitmapInCanvasHeight <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>bitmap<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> maxScale<span class="token punctuation">)</span><span class="token punctuation">;</span>            minY <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> bitmapInCanvasHeight<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>            maxY <span class="token operator">=</span> <span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> minY<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>minX <span class="token operator">=</span> minX<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>minY <span class="token operator">=</span> minY<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>maxX <span class="token operator">=</span> maxX<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>maxY <span class="token operator">=</span> maxY<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>maxX <span class="token operator">-</span> minX <span class="token operator">&lt;</span> defaultMargin <span class="token operator">||</span> maxY <span class="token operator">-</span> minY <span class="token operator">&lt;</span> defaultMargin<span class="token punctuation">)</span>            defaultMargin <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// remove min</span>        <span class="token keyword">else</span>            defaultMargin <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>        Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token string">"stk"</span><span class="token punctuation">,</span> <span class="token string">"maxX - minX="</span> <span class="token operator">+</span> <span class="token punctuation">(</span>maxX <span class="token operator">-</span> minX<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token string">"stk"</span><span class="token punctuation">,</span> <span class="token string">"maxY - minY="</span> <span class="token operator">+</span> <span class="token punctuation">(</span>maxY <span class="token operator">-</span> minY<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        topLeft <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span>minX <span class="token operator">+</span> defaultMargin<span class="token punctuation">,</span> minY <span class="token operator">+</span> defaultMargin<span class="token punctuation">)</span><span class="token punctuation">;</span>        topRight <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span>maxX <span class="token operator">-</span> defaultMargin<span class="token punctuation">,</span> minY <span class="token operator">+</span> defaultMargin<span class="token punctuation">)</span><span class="token punctuation">;</span>        bottomLeft <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span>minX <span class="token operator">+</span> defaultMargin<span class="token punctuation">,</span> maxY <span class="token operator">-</span> defaultMargin<span class="token punctuation">)</span><span class="token punctuation">;</span>        bottomRight <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span>maxX <span class="token operator">-</span> defaultMargin<span class="token punctuation">,</span> maxY <span class="token operator">-</span> defaultMargin<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onMeasure</span><span class="token punctuation">(</span><span class="token keyword">int</span> widthMeasureSpec<span class="token punctuation">,</span> <span class="token keyword">int</span> heightMeasureSpec<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onMeasure</span><span class="token punctuation">(</span>widthMeasureSpec<span class="token punctuation">,</span> heightMeasureSpec<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">drawBackground</span><span class="token punctuation">(</span>Canvas canvas<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Paint paint <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Paint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        paint<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span><span class="token function">parseColor</span><span class="token punctuation">(</span><span class="token string">"#66000000"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        paint<span class="token punctuation">.</span><span class="token function">setStyle</span><span class="token punctuation">(</span>Paint<span class="token punctuation">.</span>Style<span class="token punctuation">.</span>FILL<span class="token punctuation">)</span><span class="token punctuation">;</span>        Path path <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        path<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span>topLeft<span class="token punctuation">.</span>x<span class="token punctuation">,</span> topLeft<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>        path<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span>topRight<span class="token punctuation">.</span>x<span class="token punctuation">,</span> topRight<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>        path<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span>bottomRight<span class="token punctuation">.</span>x<span class="token punctuation">,</span> bottomRight<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>        path<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span>bottomLeft<span class="token punctuation">.</span>x<span class="token punctuation">,</span> bottomLeft<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>        path<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        canvas<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        canvas<span class="token punctuation">.</span><span class="token function">clipPath</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> Region<span class="token punctuation">.</span>Op<span class="token punctuation">.</span>DIFFERENCE<span class="token punctuation">)</span><span class="token punctuation">;</span>        canvas<span class="token punctuation">.</span><span class="token function">drawColor</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span><span class="token function">parseColor</span><span class="token punctuation">(</span><span class="token string">"#66000000"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        canvas<span class="token punctuation">.</span><span class="token function">restore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">drawVertex</span><span class="token punctuation">(</span>Canvas canvas<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Paint paint <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Paint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        paint<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>WHITE<span class="token punctuation">)</span><span class="token punctuation">;</span>        paint<span class="token punctuation">.</span><span class="token function">setStyle</span><span class="token punctuation">(</span>Paint<span class="token punctuation">.</span>Style<span class="token punctuation">.</span>FILL<span class="token punctuation">)</span><span class="token punctuation">;</span>        canvas<span class="token punctuation">.</span><span class="token function">drawCircle</span><span class="token punctuation">(</span>topLeft<span class="token punctuation">.</span>x<span class="token punctuation">,</span> topLeft<span class="token punctuation">.</span>y<span class="token punctuation">,</span> vertexSize<span class="token punctuation">,</span> paint<span class="token punctuation">)</span><span class="token punctuation">;</span>        canvas<span class="token punctuation">.</span><span class="token function">drawCircle</span><span class="token punctuation">(</span>topRight<span class="token punctuation">.</span>x<span class="token punctuation">,</span> topRight<span class="token punctuation">.</span>y<span class="token punctuation">,</span> vertexSize<span class="token punctuation">,</span> paint<span class="token punctuation">)</span><span class="token punctuation">;</span>        canvas<span class="token punctuation">.</span><span class="token function">drawCircle</span><span class="token punctuation">(</span>bottomLeft<span class="token punctuation">.</span>x<span class="token punctuation">,</span> bottomLeft<span class="token punctuation">.</span>y<span class="token punctuation">,</span> vertexSize<span class="token punctuation">,</span> paint<span class="token punctuation">)</span><span class="token punctuation">;</span>        canvas<span class="token punctuation">.</span><span class="token function">drawCircle</span><span class="token punctuation">(</span>bottomRight<span class="token punctuation">.</span>x<span class="token punctuation">,</span> bottomRight<span class="token punctuation">.</span>y<span class="token punctuation">,</span> vertexSize<span class="token punctuation">,</span> paint<span class="token punctuation">)</span><span class="token punctuation">;</span>        Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token string">"stk"</span><span class="token punctuation">,</span>                <span class="token string">"vertextPoints="</span> <span class="token operator">+</span>                        topLeft<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> topRight<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> bottomRight<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> bottomLeft<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">drawEdge</span><span class="token punctuation">(</span>Canvas canvas<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Paint paint <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Paint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        paint<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>WHITE<span class="token punctuation">)</span><span class="token punctuation">;</span>        paint<span class="token punctuation">.</span><span class="token function">setStrokeWidth</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        paint<span class="token punctuation">.</span><span class="token function">setAntiAlias</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        canvas<span class="token punctuation">.</span><span class="token function">drawLine</span><span class="token punctuation">(</span>topLeft<span class="token punctuation">.</span>x<span class="token punctuation">,</span> topLeft<span class="token punctuation">.</span>y<span class="token punctuation">,</span> topRight<span class="token punctuation">.</span>x<span class="token punctuation">,</span> topRight<span class="token punctuation">.</span>y<span class="token punctuation">,</span> paint<span class="token punctuation">)</span><span class="token punctuation">;</span>        canvas<span class="token punctuation">.</span><span class="token function">drawLine</span><span class="token punctuation">(</span>topLeft<span class="token punctuation">.</span>x<span class="token punctuation">,</span> topLeft<span class="token punctuation">.</span>y<span class="token punctuation">,</span> bottomLeft<span class="token punctuation">.</span>x<span class="token punctuation">,</span> bottomLeft<span class="token punctuation">.</span>y<span class="token punctuation">,</span> paint<span class="token punctuation">)</span><span class="token punctuation">;</span>        canvas<span class="token punctuation">.</span><span class="token function">drawLine</span><span class="token punctuation">(</span>bottomRight<span class="token punctuation">.</span>x<span class="token punctuation">,</span> bottomRight<span class="token punctuation">.</span>y<span class="token punctuation">,</span> topRight<span class="token punctuation">.</span>x<span class="token punctuation">,</span> topRight<span class="token punctuation">.</span>y<span class="token punctuation">,</span> paint<span class="token punctuation">)</span><span class="token punctuation">;</span>        canvas<span class="token punctuation">.</span><span class="token function">drawLine</span><span class="token punctuation">(</span>bottomRight<span class="token punctuation">.</span>x<span class="token punctuation">,</span> bottomRight<span class="token punctuation">.</span>y<span class="token punctuation">,</span> bottomLeft<span class="token punctuation">.</span>x<span class="token punctuation">,</span> bottomLeft<span class="token punctuation">.</span>y<span class="token punctuation">,</span> paint<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">drawGrid</span><span class="token punctuation">(</span>Canvas canvas<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Paint paint <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Paint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        paint<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>WHITE<span class="token punctuation">)</span><span class="token punctuation">;</span>        paint<span class="token punctuation">.</span><span class="token function">setStrokeWidth</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        paint<span class="token punctuation">.</span><span class="token function">setAntiAlias</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> gridSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> topDistanceX <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>topLeft<span class="token punctuation">.</span>x <span class="token operator">-</span> topRight<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>gridSize <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> i<span class="token punctuation">;</span>            <span class="token keyword">int</span> topDistanceY <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token punctuation">(</span>topLeft<span class="token punctuation">.</span>y <span class="token operator">-</span> topRight<span class="token punctuation">.</span>y<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>gridSize <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            Point top <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span>                    topLeft<span class="token punctuation">.</span>x <span class="token operator">&lt;</span> topRight<span class="token punctuation">.</span>x <span class="token operator">?</span> topLeft<span class="token punctuation">.</span>x <span class="token operator">+</span> topDistanceX <span class="token operator">:</span> topLeft<span class="token punctuation">.</span>x <span class="token operator">-</span> topDistanceX<span class="token punctuation">,</span>                    topLeft<span class="token punctuation">.</span>y <span class="token operator">&lt;</span> topRight<span class="token punctuation">.</span>y <span class="token operator">?</span> topLeft<span class="token punctuation">.</span>y <span class="token operator">+</span> topDistanceY <span class="token operator">:</span> topLeft<span class="token punctuation">.</span>y <span class="token operator">-</span> topDistanceY<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> bottomDistanceX <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token punctuation">(</span>bottomLeft<span class="token punctuation">.</span>x <span class="token operator">-</span> bottomRight<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>gridSize <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> bottomDistanceY <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token punctuation">(</span>bottomLeft<span class="token punctuation">.</span>y <span class="token operator">-</span> bottomRight<span class="token punctuation">.</span>y<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>gridSize <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            Point bottom <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span>                    bottomLeft<span class="token punctuation">.</span>x <span class="token operator">&lt;</span> bottomRight<span class="token punctuation">.</span>x <span class="token operator">?</span> bottomLeft<span class="token punctuation">.</span>x <span class="token operator">+</span> bottomDistanceX <span class="token operator">:</span> bottomLeft<span class="token punctuation">.</span>x <span class="token operator">-</span> bottomDistanceX<span class="token punctuation">,</span>                    bottomLeft<span class="token punctuation">.</span>y <span class="token operator">&lt;</span> bottomRight<span class="token punctuation">.</span>y <span class="token operator">?</span> bottomLeft<span class="token punctuation">.</span>y <span class="token operator">+</span> bottomDistanceY <span class="token operator">:</span> bottomLeft<span class="token punctuation">.</span>y <span class="token operator">-</span> bottomDistanceY<span class="token punctuation">)</span><span class="token punctuation">;</span>            canvas<span class="token punctuation">.</span><span class="token function">drawLine</span><span class="token punctuation">(</span>top<span class="token punctuation">.</span>x<span class="token punctuation">,</span> top<span class="token punctuation">.</span>y<span class="token punctuation">,</span> bottom<span class="token punctuation">.</span>x<span class="token punctuation">,</span> bottom<span class="token punctuation">.</span>y<span class="token punctuation">,</span> paint<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> leftDistanceX <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token punctuation">(</span>topLeft<span class="token punctuation">.</span>x <span class="token operator">-</span> bottomLeft<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>gridSize <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> leftDistanceY <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token punctuation">(</span>topLeft<span class="token punctuation">.</span>y <span class="token operator">-</span> bottomLeft<span class="token punctuation">.</span>y<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>gridSize <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            Point left <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span>                    topLeft<span class="token punctuation">.</span>x <span class="token operator">&lt;</span> bottomLeft<span class="token punctuation">.</span>x <span class="token operator">?</span> topLeft<span class="token punctuation">.</span>x <span class="token operator">+</span> leftDistanceX <span class="token operator">:</span> topLeft<span class="token punctuation">.</span>x <span class="token operator">-</span> leftDistanceX<span class="token punctuation">,</span>                    topLeft<span class="token punctuation">.</span>y <span class="token operator">&lt;</span> bottomLeft<span class="token punctuation">.</span>y <span class="token operator">?</span> topLeft<span class="token punctuation">.</span>y <span class="token operator">+</span> leftDistanceY <span class="token operator">:</span> topLeft<span class="token punctuation">.</span>y <span class="token operator">-</span> leftDistanceY<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> rightDistanceX <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token punctuation">(</span>topRight<span class="token punctuation">.</span>x <span class="token operator">-</span> bottomRight<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>gridSize <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> rightDistanceY <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token punctuation">(</span>topRight<span class="token punctuation">.</span>y <span class="token operator">-</span> bottomRight<span class="token punctuation">.</span>y<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>gridSize <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            Point right <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span>                    topRight<span class="token punctuation">.</span>x <span class="token operator">&lt;</span> bottomRight<span class="token punctuation">.</span>x <span class="token operator">?</span> topRight<span class="token punctuation">.</span>x <span class="token operator">+</span> rightDistanceX <span class="token operator">:</span> topRight<span class="token punctuation">.</span>x <span class="token operator">-</span> rightDistanceX<span class="token punctuation">,</span>                    topRight<span class="token punctuation">.</span>y <span class="token operator">&lt;</span> bottomRight<span class="token punctuation">.</span>y <span class="token operator">?</span> topRight<span class="token punctuation">.</span>y <span class="token operator">+</span> rightDistanceY <span class="token operator">:</span> topRight<span class="token punctuation">.</span>y <span class="token operator">-</span> rightDistanceY<span class="token punctuation">)</span><span class="token punctuation">;</span>            canvas<span class="token punctuation">.</span><span class="token function">drawLine</span><span class="token punctuation">(</span>left<span class="token punctuation">.</span>x<span class="token punctuation">,</span> left<span class="token punctuation">.</span>y<span class="token punctuation">,</span> right<span class="token punctuation">.</span>x<span class="token punctuation">,</span> right<span class="token punctuation">.</span>y<span class="token punctuation">,</span> paint<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onTouchEvent</span><span class="token punctuation">(</span>MotionEvent event<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">getAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> MotionEvent<span class="token punctuation">.</span>ACTION_UP<span class="token operator">:</span>                <span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">requestDisallowInterceptTouchEvent</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> MotionEvent<span class="token punctuation">.</span>ACTION_DOWN<span class="token operator">:</span>                <span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">requestDisallowInterceptTouchEvent</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">onActionDown</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> MotionEvent<span class="token punctuation">.</span>ACTION_MOVE<span class="token operator">:</span>                <span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">requestDisallowInterceptTouchEvent</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">onActionMove</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">onActionDown</span><span class="token punctuation">(</span>MotionEvent event<span class="token punctuation">)</span> <span class="token punctuation">{</span>        touchDownX <span class="token operator">=</span> event<span class="token punctuation">.</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        touchDownY <span class="token operator">=</span> event<span class="token punctuation">.</span><span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Point touchPoint <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> event<span class="token punctuation">.</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> event<span class="token punctuation">.</span><span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> minDistance <span class="token operator">=</span> <span class="token function">distance</span><span class="token punctuation">(</span>touchPoint<span class="token punctuation">,</span> topLeft<span class="token punctuation">)</span><span class="token punctuation">;</span>        cropPosition <span class="token operator">=</span> CropPosition<span class="token punctuation">.</span>TOP_LEFT<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>minDistance <span class="token operator">></span> <span class="token function">distance</span><span class="token punctuation">(</span>touchPoint<span class="token punctuation">,</span> topRight<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            minDistance <span class="token operator">=</span> <span class="token function">distance</span><span class="token punctuation">(</span>touchPoint<span class="token punctuation">,</span> topRight<span class="token punctuation">)</span><span class="token punctuation">;</span>            cropPosition <span class="token operator">=</span> CropPosition<span class="token punctuation">.</span>TOP_RIGHT<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>minDistance <span class="token operator">></span> <span class="token function">distance</span><span class="token punctuation">(</span>touchPoint<span class="token punctuation">,</span> bottomLeft<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            minDistance <span class="token operator">=</span> <span class="token function">distance</span><span class="token punctuation">(</span>touchPoint<span class="token punctuation">,</span> bottomLeft<span class="token punctuation">)</span><span class="token punctuation">;</span>            cropPosition <span class="token operator">=</span> CropPosition<span class="token punctuation">.</span>BOTTOM_LEFT<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>minDistance <span class="token operator">></span> <span class="token function">distance</span><span class="token punctuation">(</span>touchPoint<span class="token punctuation">,</span> bottomRight<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            minDistance <span class="token operator">=</span> <span class="token function">distance</span><span class="token punctuation">(</span>touchPoint<span class="token punctuation">,</span> bottomRight<span class="token punctuation">)</span><span class="token punctuation">;</span>            cropPosition <span class="token operator">=</span> CropPosition<span class="token punctuation">.</span>BOTTOM_RIGHT<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">distance</span><span class="token punctuation">(</span>Point src<span class="token punctuation">,</span> Point dst<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>src<span class="token punctuation">.</span>x <span class="token operator">-</span> dst<span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>src<span class="token punctuation">.</span>y <span class="token operator">-</span> dst<span class="token punctuation">.</span>y<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">onActionMove</span><span class="token punctuation">(</span>MotionEvent event<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> deltaX <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> touchDownX<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> deltaY <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> touchDownY<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>cropPosition<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> TOP_LEFT<span class="token operator">:</span>                <span class="token function">adjustTopLeft</span><span class="token punctuation">(</span>deltaX<span class="token punctuation">,</span> deltaY<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> TOP_RIGHT<span class="token operator">:</span>                <span class="token function">adjustTopRight</span><span class="token punctuation">(</span>deltaX<span class="token punctuation">,</span> deltaY<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> BOTTOM_LEFT<span class="token operator">:</span>                <span class="token function">adjustBottomLeft</span><span class="token punctuation">(</span>deltaX<span class="token punctuation">,</span> deltaY<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> BOTTOM_RIGHT<span class="token operator">:</span>                <span class="token function">adjustBottomRight</span><span class="token punctuation">(</span>deltaX<span class="token punctuation">,</span> deltaY<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        touchDownX <span class="token operator">=</span> event<span class="token punctuation">.</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        touchDownY <span class="token operator">=</span> event<span class="token punctuation">.</span><span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">adjustTopLeft</span><span class="token punctuation">(</span><span class="token keyword">int</span> deltaX<span class="token punctuation">,</span> <span class="token keyword">int</span> deltaY<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> newX <span class="token operator">=</span> topLeft<span class="token punctuation">.</span>x <span class="token operator">+</span> deltaX<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>newX <span class="token operator">&lt;</span> minX<span class="token punctuation">)</span>            newX <span class="token operator">=</span> minX<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>newX <span class="token operator">></span> maxX<span class="token punctuation">)</span>            newX <span class="token operator">=</span> maxX<span class="token punctuation">;</span>        <span class="token keyword">int</span> newY <span class="token operator">=</span> topLeft<span class="token punctuation">.</span>y <span class="token operator">+</span> deltaY<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>newY <span class="token operator">&lt;</span> minY<span class="token punctuation">)</span>            newY <span class="token operator">=</span> minY<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>newY <span class="token operator">></span> maxY<span class="token punctuation">)</span>            newY <span class="token operator">=</span> maxY<span class="token punctuation">;</span>        topLeft<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>newX<span class="token punctuation">,</span> newY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">adjustTopRight</span><span class="token punctuation">(</span><span class="token keyword">int</span> deltaX<span class="token punctuation">,</span> <span class="token keyword">int</span> deltaY<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> newX <span class="token operator">=</span> topRight<span class="token punctuation">.</span>x <span class="token operator">+</span> deltaX<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>newX <span class="token operator">></span> maxX<span class="token punctuation">)</span>            newX <span class="token operator">=</span> maxX<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>newX <span class="token operator">&lt;</span> minX<span class="token punctuation">)</span>            newX <span class="token operator">=</span> minX<span class="token punctuation">;</span>        <span class="token keyword">int</span> newY <span class="token operator">=</span> topRight<span class="token punctuation">.</span>y <span class="token operator">+</span> deltaY<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>newY <span class="token operator">&lt;</span> minY<span class="token punctuation">)</span>            newY <span class="token operator">=</span> minY<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>newY <span class="token operator">></span> maxY<span class="token punctuation">)</span>            newY <span class="token operator">=</span> maxY<span class="token punctuation">;</span>        topRight<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>newX<span class="token punctuation">,</span> newY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">adjustBottomLeft</span><span class="token punctuation">(</span><span class="token keyword">int</span> deltaX<span class="token punctuation">,</span> <span class="token keyword">int</span> deltaY<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> newX <span class="token operator">=</span> bottomLeft<span class="token punctuation">.</span>x <span class="token operator">+</span> deltaX<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>newX <span class="token operator">&lt;</span> minX<span class="token punctuation">)</span>            newX <span class="token operator">=</span> minX<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>newX <span class="token operator">></span> maxX<span class="token punctuation">)</span>            newX <span class="token operator">=</span> maxX<span class="token punctuation">;</span>        <span class="token keyword">int</span> newY <span class="token operator">=</span> bottomLeft<span class="token punctuation">.</span>y <span class="token operator">+</span> deltaY<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>newY <span class="token operator">></span> maxY<span class="token punctuation">)</span>            newY <span class="token operator">=</span> maxY<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>newY <span class="token operator">&lt;</span> minY<span class="token punctuation">)</span>            newY <span class="token operator">=</span> minY<span class="token punctuation">;</span>        bottomLeft<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>newX<span class="token punctuation">,</span> newY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">adjustBottomRight</span><span class="token punctuation">(</span><span class="token keyword">int</span> deltaX<span class="token punctuation">,</span> <span class="token keyword">int</span> deltaY<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> newX <span class="token operator">=</span> bottomRight<span class="token punctuation">.</span>x <span class="token operator">+</span> deltaX<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>newX <span class="token operator">></span> maxX<span class="token punctuation">)</span>            newX <span class="token operator">=</span> maxX<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>newX <span class="token operator">&lt;</span> minX<span class="token punctuation">)</span>            newX <span class="token operator">=</span> minX<span class="token punctuation">;</span>        <span class="token keyword">int</span> newY <span class="token operator">=</span> bottomRight<span class="token punctuation">.</span>y <span class="token operator">+</span> deltaY<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>newY <span class="token operator">></span> maxY<span class="token punctuation">)</span>            newY <span class="token operator">=</span> maxY<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>newY <span class="token operator">&lt;</span> minY<span class="token punctuation">)</span>            newY <span class="token operator">=</span> minY<span class="token punctuation">;</span>        bottomRight<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>newX<span class="token punctuation">,</span> newY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">crop</span><span class="token punctuation">(</span>CropListener cropListener<span class="token punctuation">,</span> <span class="token keyword">boolean</span> needStretch<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>topLeft <span class="token operator">==</span> null<span class="token punctuation">)</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// calculate bitmap size in new canvas</span>        <span class="token keyword">float</span> scaleX <span class="token operator">=</span> bitmap<span class="token punctuation">.</span><span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1.0f</span> <span class="token operator">/</span> <span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">float</span> scaleY <span class="token operator">=</span> bitmap<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1.0f</span> <span class="token operator">/</span> <span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">float</span> maxScale <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>scaleX<span class="token punctuation">,</span> scaleY<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// re-calculate coordinate in original bitmap</span>        Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token string">"stk"</span><span class="token punctuation">,</span> <span class="token string">"maxScale="</span> <span class="token operator">+</span> maxScale<span class="token punctuation">)</span><span class="token punctuation">;</span>        Point bitmapTopLeft <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>topLeft<span class="token punctuation">.</span>x <span class="token operator">-</span> minX<span class="token punctuation">)</span> <span class="token operator">*</span> maxScale<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>topLeft<span class="token punctuation">.</span>y <span class="token operator">-</span> minY<span class="token punctuation">)</span> <span class="token operator">*</span> maxScale<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Point bitmapTopRight <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>topRight<span class="token punctuation">.</span>x <span class="token operator">-</span> minX<span class="token punctuation">)</span> <span class="token operator">*</span> maxScale<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>topRight<span class="token punctuation">.</span>y <span class="token operator">-</span> minY<span class="token punctuation">)</span> <span class="token operator">*</span> maxScale<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Point bitmapBottomLeft <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>bottomLeft<span class="token punctuation">.</span>x <span class="token operator">-</span> minX<span class="token punctuation">)</span> <span class="token operator">*</span> maxScale<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>bottomLeft<span class="token punctuation">.</span>y <span class="token operator">-</span> minY<span class="token punctuation">)</span> <span class="token operator">*</span> maxScale<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Point bitmapBottomRight <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>bottomRight<span class="token punctuation">.</span>x <span class="token operator">-</span> minX<span class="token punctuation">)</span> <span class="token operator">*</span> maxScale<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>bottomRight<span class="token punctuation">.</span>y <span class="token operator">-</span> minY<span class="token punctuation">)</span> <span class="token operator">*</span> maxScale<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token string">"stk"</span><span class="token punctuation">,</span> <span class="token string">"bitmapPoints="</span>                <span class="token operator">+</span> bitmapTopLeft<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span>                <span class="token operator">+</span> bitmapTopRight<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span>                <span class="token operator">+</span> bitmapBottomRight<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span>                <span class="token operator">+</span> bitmapBottomLeft<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Bitmap output <span class="token operator">=</span> Bitmap<span class="token punctuation">.</span><span class="token function">createBitmap</span><span class="token punctuation">(</span>bitmap<span class="token punctuation">.</span><span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> bitmap<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> Bitmap<span class="token punctuation">.</span>Config<span class="token punctuation">.</span>ARGB_8888<span class="token punctuation">)</span><span class="token punctuation">;</span>        Canvas canvas <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Canvas</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span>        Paint paint <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Paint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 1. draw path</span>        Path path <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        path<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span>bitmapTopLeft<span class="token punctuation">.</span>x<span class="token punctuation">,</span> bitmapTopLeft<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>        path<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span>bitmapTopRight<span class="token punctuation">.</span>x<span class="token punctuation">,</span> bitmapTopRight<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>        path<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span>bitmapBottomRight<span class="token punctuation">.</span>x<span class="token punctuation">,</span> bitmapBottomRight<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>        path<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span>bitmapBottomLeft<span class="token punctuation">.</span>x<span class="token punctuation">,</span> bitmapBottomLeft<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>        path<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        canvas<span class="token punctuation">.</span><span class="token function">drawPath</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> paint<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2. draw original bitmap</span>        paint<span class="token punctuation">.</span><span class="token function">setXfermode</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PorterDuffXfermode</span><span class="token punctuation">(</span>PorterDuff<span class="token punctuation">.</span>Mode<span class="token punctuation">.</span>SRC_IN<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        canvas<span class="token punctuation">.</span><span class="token function">drawBitmap</span><span class="token punctuation">(</span>bitmap<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> paint<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3. cut</span>        Rect cropRect <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Rect</span><span class="token punctuation">(</span>                Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>bitmapTopLeft<span class="token punctuation">.</span>x<span class="token punctuation">,</span> bitmapBottomLeft<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span>                Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>bitmapTopLeft<span class="token punctuation">.</span>y<span class="token punctuation">,</span> bitmapTopRight<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span>                Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>bitmapBottomRight<span class="token punctuation">.</span>x<span class="token punctuation">,</span> bitmapTopRight<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span>                Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>bitmapBottomRight<span class="token punctuation">.</span>y<span class="token punctuation">,</span> bitmapBottomLeft<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Bitmap cut <span class="token operator">=</span> Bitmap<span class="token punctuation">.</span><span class="token function">createBitmap</span><span class="token punctuation">(</span>                output<span class="token punctuation">,</span>                cropRect<span class="token punctuation">.</span>left<span class="token punctuation">,</span>                cropRect<span class="token punctuation">.</span>top<span class="token punctuation">,</span>                cropRect<span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                cropRect<span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>needStretch<span class="token punctuation">)</span> <span class="token punctuation">{</span>            cropListener<span class="token punctuation">.</span><span class="token function">onFinish</span><span class="token punctuation">(</span>cut<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 4. re-calculate coordinate in cropRect</span>            Point cutTopLeft <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Point cutTopRight <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Point cutBottomLeft <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Point cutBottomRight <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cutTopLeft<span class="token punctuation">.</span>x <span class="token operator">=</span> bitmapTopLeft<span class="token punctuation">.</span>x <span class="token operator">></span> bitmapBottomLeft<span class="token punctuation">.</span>x <span class="token operator">?</span> bitmapTopLeft<span class="token punctuation">.</span>x <span class="token operator">-</span> bitmapBottomLeft<span class="token punctuation">.</span>x <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            cutTopLeft<span class="token punctuation">.</span>y <span class="token operator">=</span> bitmapTopLeft<span class="token punctuation">.</span>y <span class="token operator">></span> bitmapTopRight<span class="token punctuation">.</span>y <span class="token operator">?</span> bitmapTopLeft<span class="token punctuation">.</span>y <span class="token operator">-</span> bitmapTopRight<span class="token punctuation">.</span>y <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            cutTopRight<span class="token punctuation">.</span>x <span class="token operator">=</span> bitmapTopRight<span class="token punctuation">.</span>x <span class="token operator">></span> bitmapBottomRight<span class="token punctuation">.</span>x <span class="token operator">?</span> cropRect<span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> cropRect<span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>bitmapBottomRight<span class="token punctuation">.</span>x <span class="token operator">-</span> bitmapTopRight<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>            cutTopRight<span class="token punctuation">.</span>y <span class="token operator">=</span> bitmapTopLeft<span class="token punctuation">.</span>y <span class="token operator">></span> bitmapTopRight<span class="token punctuation">.</span>y <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>bitmapTopLeft<span class="token punctuation">.</span>y <span class="token operator">-</span> bitmapTopRight<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>            cutBottomLeft<span class="token punctuation">.</span>x <span class="token operator">=</span> bitmapTopLeft<span class="token punctuation">.</span>x <span class="token operator">></span> bitmapBottomLeft<span class="token punctuation">.</span>x <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>bitmapTopLeft<span class="token punctuation">.</span>x <span class="token operator">-</span> bitmapBottomLeft<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>            cutBottomLeft<span class="token punctuation">.</span>y <span class="token operator">=</span> bitmapBottomLeft<span class="token punctuation">.</span>y <span class="token operator">></span> bitmapBottomRight<span class="token punctuation">.</span>y <span class="token operator">?</span> cropRect<span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> cropRect<span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>bitmapBottomRight<span class="token punctuation">.</span>y <span class="token operator">-</span> bitmapBottomLeft<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>            cutBottomRight<span class="token punctuation">.</span>x <span class="token operator">=</span> bitmapTopRight<span class="token punctuation">.</span>x <span class="token operator">></span> bitmapBottomRight<span class="token punctuation">.</span>x <span class="token operator">?</span> cropRect<span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>bitmapBottomRight<span class="token punctuation">.</span>x <span class="token operator">-</span> bitmapTopRight<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token operator">:</span> cropRect<span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cutBottomRight<span class="token punctuation">.</span>y <span class="token operator">=</span> bitmapBottomLeft<span class="token punctuation">.</span>y <span class="token operator">></span> bitmapBottomRight<span class="token punctuation">.</span>y <span class="token operator">?</span> cropRect<span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>bitmapBottomRight<span class="token punctuation">.</span>y <span class="token operator">-</span> bitmapBottomLeft<span class="token punctuation">.</span>y<span class="token punctuation">)</span> <span class="token operator">:</span> cropRect<span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token string">"stk"</span><span class="token punctuation">,</span> cut<span class="token punctuation">.</span><span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"x"</span> <span class="token operator">+</span> cut<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token string">"stk"</span><span class="token punctuation">,</span> <span class="token string">"cutPoints="</span>                    <span class="token operator">+</span> cutTopLeft<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span>                    <span class="token operator">+</span> cutTopRight<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span>                    <span class="token operator">+</span> cutBottomRight<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span>                    <span class="token operator">+</span> cutBottomLeft<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">float</span> width <span class="token operator">=</span> cut<span class="token punctuation">.</span><span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">float</span> height <span class="token operator">=</span> cut<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">float</span><span class="token punctuation">[</span><span class="token punctuation">]</span> src <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">float</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>cutTopLeft<span class="token punctuation">.</span>x<span class="token punctuation">,</span> cutTopLeft<span class="token punctuation">.</span>y<span class="token punctuation">,</span> cutTopRight<span class="token punctuation">.</span>x<span class="token punctuation">,</span> cutTopRight<span class="token punctuation">.</span>y<span class="token punctuation">,</span> cutBottomRight<span class="token punctuation">.</span>x<span class="token punctuation">,</span> cutBottomRight<span class="token punctuation">.</span>y<span class="token punctuation">,</span> cutBottomLeft<span class="token punctuation">.</span>x<span class="token punctuation">,</span> cutBottomLeft<span class="token punctuation">.</span>y<span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token keyword">float</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dst <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">float</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> width<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> height<span class="token punctuation">}</span><span class="token punctuation">;</span>            Matrix matrix <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Matrix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            matrix<span class="token punctuation">.</span><span class="token function">setPolyToPoly</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> dst<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Bitmap stretch <span class="token operator">=</span> Bitmap<span class="token punctuation">.</span><span class="token function">createBitmap</span><span class="token punctuation">(</span>cut<span class="token punctuation">.</span><span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cut<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Bitmap<span class="token punctuation">.</span>Config<span class="token punctuation">.</span>ARGB_8888<span class="token punctuation">)</span><span class="token punctuation">;</span>            Canvas stretchCanvas <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Canvas</span><span class="token punctuation">(</span>stretch<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//            stretchCanvas.drawBitmap(cut, matrix, null);</span>            stretchCanvas<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>matrix<span class="token punctuation">)</span><span class="token punctuation">;</span>            stretchCanvas<span class="token punctuation">.</span><span class="token function">drawBitmapMesh</span><span class="token punctuation">(</span>cut<span class="token punctuation">,</span> WIDTH_BLOCK<span class="token punctuation">,</span> HEIGHT_BLOCK<span class="token punctuation">,</span> <span class="token function">generateVertices</span><span class="token punctuation">(</span>cut<span class="token punctuation">.</span><span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cut<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> null<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>            cropListener<span class="token punctuation">.</span><span class="token function">onFinish</span><span class="token punctuation">(</span>stretch<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> WIDTH_BLOCK  <span class="token operator">=</span> <span class="token number">40</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> HEIGHT_BLOCK <span class="token operator">=</span> <span class="token number">40</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">float</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">generateVertices</span><span class="token punctuation">(</span><span class="token keyword">int</span> widthBitmap<span class="token punctuation">,</span> <span class="token keyword">int</span> heightBitmap<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">float</span><span class="token punctuation">[</span><span class="token punctuation">]</span> vertices <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">float</span><span class="token punctuation">[</span><span class="token punctuation">(</span>WIDTH_BLOCK <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>HEIGHT_BLOCK <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">float</span> widthBlock <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span> widthBitmap <span class="token operator">/</span> WIDTH_BLOCK<span class="token punctuation">;</span>        <span class="token keyword">float</span> heightBlock <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span> heightBitmap <span class="token operator">/</span> HEIGHT_BLOCK<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> HEIGHT_BLOCK<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> WIDTH_BLOCK<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                vertices<span class="token punctuation">[</span>i <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>HEIGHT_BLOCK <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>j <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> j <span class="token operator">*</span> widthBlock<span class="token punctuation">;</span>                vertices<span class="token punctuation">[</span>i <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>HEIGHT_BLOCK <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>j <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">*</span> heightBlock<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token keyword">return</span> vertices<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>github地址：<a href="https://github.com/wildma/WildmaIDCardCamera" target="_blank" rel="noopener">WildmaIDCardCamera</a></p><p>参考资料：</p><ul><li><a href="https://github.com/smartown/CertificateCamera" target="_blank" rel="noopener">CertificateCamera</a> </li><li><a href="https://github.com/leanh215/PhotoPolygonCropper" target="_blank" rel="noopener">PhotoPolygonCropper</a></li><li><a href="https://github.com/WellerV/SweetCamera" target="_blank" rel="noopener">SweetCamera</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> 开源库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 相机 </tag>
            
            <tag> 身份证拍照 </tag>
            
            <tag> 自动对焦 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一个非常好用的 Android 图片选择框架</title>
      <link href="/blog/a81abbe.html"/>
      <url>/blog/a81abbe.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>几乎每个APP都需要图片选择和裁剪功能，因为涉及到相机和存储，所以该功能还是要考虑很多兼容性的。这也是github上有一大堆图片选择框架的原因，但是你会发现github上找的图片选择框架并不是简单的只有图片选择， 它还包含视频选择、视频录制、图片压缩等等一大堆功能。其实你只需要一个头像选择的功能，那些框架很多功能你根本用不到，而且代码至少也几十个类，后期有问题改起来也是麻烦事。所以我就封装了一个代码及其简洁的图片选择框架，没有任何多余的功能，涉及的主要功能类只有3个，使用也是非常简单。<br>效果图如下：<img src="a81abbe/1.jpg" alt="效果图.jpg"></p><h2 id="一、功能特点"><a href="#一、功能特点" class="headerlink" title="一、功能特点"></a>一、功能特点</h2><ul><li>支持通过拍照获取图片</li><li>支持通过相册获取图片</li><li>支持图片裁剪</li><li>支持仿IOS底部弹出选择菜单ActionSheet效果</li><li>支持6.0动态授予权限</li><li>解决图片有黑边问题</li><li>解决7.0调用相机报FileUriExposedException的问题</li><li>解决小米miui系统调用系统裁剪图片功能crash问题</li><li>解决华为设备裁剪框为圆形的问题</li></ul><h2 id="二、使用"><a href="#二、使用" class="headerlink" title="二、使用"></a>二、使用</h2><p><strong>Step 1. 添加JitPack仓库</strong><br>在项目的build.gradle添加JitPack仓库</p><pre class="line-numbers language-java"><code class="language-java">allprojects <span class="token punctuation">{</span>    repositories <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        maven <span class="token punctuation">{</span> url <span class="token string">"https://jitpack.io"</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Step 2. 添加依赖</strong><br>在需要使用的module中添加依赖（最新版本见 <a href="https://github.com/wildma/PictureSelector" target="_blank" rel="noopener">PictureSelector</a>）</p><pre class="line-numbers language-java"><code class="language-java">dependencies <span class="token punctuation">{</span>    compile <span class="token string">'com.github.wildma:PictureSelector:1.1.3'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>或者引用本地lib</p><pre class="line-numbers language-java"><code class="language-java">compile <span class="token function">project</span><span class="token punctuation">(</span><span class="token string">':pictureselector'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>Step 3. 拍照或者从相册选择图片</strong></p><pre class="line-numbers language-java"><code class="language-java">        <span class="token comment" spellcheck="true">/**         * create()方法参数一是上下文，在activity中传activity.this，在fragment中传fragment.this。参数二为请求码，用于结果回调onActivityResult中判断         * selectPicture()方法参数分别为 是否裁剪、裁剪后图片的宽(单位px)、裁剪后图片的高、宽比例、高比例。都不传则默认为裁剪，宽200，高200，宽高比例为1：1。         */</span>        PictureSelector                <span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>MainActivity<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> PictureSelector<span class="token punctuation">.</span>SELECT_REQUEST_CODE<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">selectPicture</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Step 4. 获取图片地址进行显示</strong></p><pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onActivityResult</span><span class="token punctuation">(</span><span class="token keyword">int</span> requestCode<span class="token punctuation">,</span> <span class="token keyword">int</span> resultCode<span class="token punctuation">,</span> Intent data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onActivityResult</span><span class="token punctuation">(</span>requestCode<span class="token punctuation">,</span> resultCode<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*结果回调*/</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>requestCode <span class="token operator">==</span> PictureSelector<span class="token punctuation">.</span>SELECT_REQUEST_CODE<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                String picturePath <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">getStringExtra</span><span class="token punctuation">(</span>PictureSelector<span class="token punctuation">.</span>PICTURE_PATH<span class="token punctuation">)</span><span class="token punctuation">;</span>                mIvImage<span class="token punctuation">.</span><span class="token function">setImageBitmap</span><span class="token punctuation">(</span>BitmapFactory<span class="token punctuation">.</span><span class="token function">decodeFile</span><span class="token punctuation">(</span>picturePath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/*如果使用 Glide 加载图片，则需要禁止 Glide 从缓存中加载，因为裁剪后保存的图片地址是相同的*/</span>                <span class="token comment" spellcheck="true">/*RequestOptions requestOptions = RequestOptions                        .circleCropTransform()                        .diskCacheStrategy(DiskCacheStrategy.NONE)                        .skipMemoryCache(true);                Glide.with(this).load(picturePath).apply(requestOptions).into(mIvImage);*/</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h2><p>每个类的注释我都写的很清楚了，所以这里只贴出主要的图片工具类，其他可以到我的Github上查看源码（见文末）。<br>选择图片工具类：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>wildma<span class="token punctuation">.</span>pictureselector<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>app<span class="token punctuation">.</span>Activity<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>content<span class="token punctuation">.</span>Context<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>content<span class="token punctuation">.</span>Intent<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>graphics<span class="token punctuation">.</span>Bitmap<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>graphics<span class="token punctuation">.</span>BitmapFactory<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>net<span class="token punctuation">.</span>Uri<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Build<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>provider<span class="token punctuation">.</span>MediaStore<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>v4<span class="token punctuation">.</span>content<span class="token punctuation">.</span>FileProvider<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>Toast<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileNotFoundException<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Author       wildma * Github       https://github.com/wildma * CreateDate   2018/6/10 * Desc            ${选择图片工具类} * 使用方法： * 1. 调用getByCamera()、getByAlbum()可通过拍照或相册获取图片 * 2. 在onActivityResult中调用本工具类的onActivityResult方法处理通过相册或拍照获取的图片 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PictureSelectUtils</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> GET_BY_ALBUM  <span class="token operator">=</span> <span class="token number">0x11</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//相册标记</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> GET_BY_CAMERA <span class="token operator">=</span> <span class="token number">0x12</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//拍照标记</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> CROP          <span class="token operator">=</span> <span class="token number">0x13</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//裁剪标记</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Uri takePictureUri<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//拍照图片uri</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Uri cropPictureTempUri<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//裁剪图片uri</span>    <span class="token comment" spellcheck="true">/**     * 通过相册获取图片     * @param activity     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getByAlbum</span><span class="token punctuation">(</span>Activity activity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Intent intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span>Intent<span class="token punctuation">.</span>ACTION_PICK<span class="token punctuation">,</span>                MediaStore<span class="token punctuation">.</span>Images<span class="token punctuation">.</span>Media<span class="token punctuation">.</span>EXTERNAL_CONTENT_URI<span class="token punctuation">)</span><span class="token punctuation">;</span>        intent<span class="token punctuation">.</span><span class="token function">setType</span><span class="token punctuation">(</span><span class="token string">"image/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        activity<span class="token punctuation">.</span><span class="token function">startActivityForResult</span><span class="token punctuation">(</span>intent<span class="token punctuation">,</span> GET_BY_ALBUM<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token operator">/</span><span class="token operator">*</span><span class="token operator">*</span>     <span class="token operator">*</span> 通过拍照获取图片     <span class="token operator">*</span> <span class="token annotation punctuation">@param</span> activity     <span class="token operator">*</span><span class="token operator">/</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getByCamera</span><span class="token punctuation">(</span>Activity activity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        takePictureUri <span class="token operator">=</span> <span class="token function">createImagePathUri</span><span class="token punctuation">(</span>activity<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>takePictureUri <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Intent i <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span>MediaStore<span class="token punctuation">.</span>ACTION_IMAGE_CAPTURE<span class="token punctuation">)</span><span class="token punctuation">;</span>            i<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span>MediaStore<span class="token punctuation">.</span>EXTRA_OUTPUT<span class="token punctuation">,</span> takePictureUri<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出路径（拍照后的保存路径）</span>            activity<span class="token punctuation">.</span><span class="token function">startActivityForResult</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> GET_BY_CAMERA<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            Toast<span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span>activity<span class="token punctuation">,</span> <span class="token string">"无法保存到相册"</span><span class="token punctuation">,</span> Toast<span class="token punctuation">.</span>LENGTH_LONG<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 创建一个图片地址uri,用于保存拍照后的照片     *     * @param activity     * @return          图片的uri     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Uri <span class="token function">createImagePathUri</span><span class="token punctuation">(</span>Activity activity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            FileUtils<span class="token punctuation">.</span><span class="token function">createOrExistsDir</span><span class="token punctuation">(</span>Constant<span class="token punctuation">.</span>DIR_ROOT<span class="token punctuation">)</span><span class="token punctuation">;</span>            StringBuffer buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String pathName <span class="token operator">=</span> buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>Constant<span class="token punctuation">.</span>DIR_ROOT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>Constant<span class="token punctuation">.</span>APP_NAME<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">".jpg"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>pathName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Build<span class="token punctuation">.</span>VERSION<span class="token punctuation">.</span>SDK_INT <span class="token operator">>=</span> Build<span class="token punctuation">.</span>VERSION_CODES<span class="token punctuation">.</span>N<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//解决Android 7.0 拍照出现FileUriExposedException的问题</span>                String authority <span class="token operator">=</span> activity<span class="token punctuation">.</span><span class="token function">getPackageName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">".fileProvider"</span><span class="token punctuation">;</span>                takePictureUri <span class="token operator">=</span> FileProvider<span class="token punctuation">.</span><span class="token function">getUriForFile</span><span class="token punctuation">(</span>activity<span class="token punctuation">,</span> authority<span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                takePictureUri <span class="token operator">=</span> Uri<span class="token punctuation">.</span><span class="token function">fromFile</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Toast<span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span>activity<span class="token punctuation">,</span> <span class="token string">"无法保存到相册"</span><span class="token punctuation">,</span> Toast<span class="token punctuation">.</span>LENGTH_LONG<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> takePictureUri<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 处理拍照或相册获取的图片，默认大小480*480，比例1:1     * @param activity      上下文     * @param requestCode   请求码     * @param resultCode    结果码     * @param data          Intent     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Bitmap <span class="token function">onActivityResult</span><span class="token punctuation">(</span>Activity activity<span class="token punctuation">,</span> <span class="token keyword">int</span> requestCode<span class="token punctuation">,</span> <span class="token keyword">int</span> resultCode<span class="token punctuation">,</span> Intent data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">onActivityResult</span><span class="token punctuation">(</span>activity<span class="token punctuation">,</span> requestCode<span class="token punctuation">,</span> resultCode<span class="token punctuation">,</span> data<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 处理拍照或相册获取的图片     * @param activity      上下文     * @param requestCode   请求码     * @param resultCode    结果码     * @param data          Intent     * @param w             输出宽     * @param h             输出高     * @param aspectX       宽比例     * @param aspectY       高比例     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Bitmap <span class="token function">onActivityResult</span><span class="token punctuation">(</span>Activity activity<span class="token punctuation">,</span> <span class="token keyword">int</span> requestCode<span class="token punctuation">,</span> <span class="token keyword">int</span> resultCode<span class="token punctuation">,</span> Intent data<span class="token punctuation">,</span>                                          <span class="token keyword">int</span> w<span class="token punctuation">,</span> <span class="token keyword">int</span> h<span class="token punctuation">,</span> <span class="token keyword">int</span> aspectX<span class="token punctuation">,</span> <span class="token keyword">int</span> aspectY<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Bitmap bm <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>resultCode <span class="token operator">==</span> Activity<span class="token punctuation">.</span>RESULT_OK<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Uri uri <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>requestCode<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">case</span> GET_BY_ALBUM<span class="token operator">:</span>                    uri <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    activity<span class="token punctuation">.</span><span class="token function">startActivityForResult</span><span class="token punctuation">(</span><span class="token function">crop</span><span class="token punctuation">(</span>uri<span class="token punctuation">,</span> w<span class="token punctuation">,</span> h<span class="token punctuation">,</span> aspectX<span class="token punctuation">,</span> aspectY<span class="token punctuation">)</span><span class="token punctuation">,</span> CROP<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> GET_BY_CAMERA<span class="token operator">:</span>                    uri <span class="token operator">=</span> takePictureUri<span class="token punctuation">;</span>                    activity<span class="token punctuation">.</span><span class="token function">startActivityForResult</span><span class="token punctuation">(</span><span class="token function">crop</span><span class="token punctuation">(</span>uri<span class="token punctuation">,</span> w<span class="token punctuation">,</span> h<span class="token punctuation">,</span> aspectX<span class="token punctuation">,</span> aspectY<span class="token punctuation">)</span><span class="token punctuation">,</span> CROP<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> CROP<span class="token operator">:</span>                    bm <span class="token operator">=</span> <span class="token function">dealCrop</span><span class="token punctuation">(</span>activity<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> bm<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 裁剪,默认裁剪输出480*480，比例1:1     * @param uri   图片的uri     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Intent <span class="token function">crop</span><span class="token punctuation">(</span>Uri uri<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">crop</span><span class="token punctuation">(</span>uri<span class="token punctuation">,</span> <span class="token number">480</span><span class="token punctuation">,</span> <span class="token number">480</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 裁剪，例如：输出100*100大小的图片，宽高比例是1:1     * @param uri     图片的uri     * @param w       输出宽     * @param h       输出高     * @param aspectX 宽比例     * @param aspectY 高比例     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Intent <span class="token function">crop</span><span class="token punctuation">(</span>Uri uri<span class="token punctuation">,</span> <span class="token keyword">int</span> w<span class="token punctuation">,</span> <span class="token keyword">int</span> h<span class="token punctuation">,</span> <span class="token keyword">int</span> aspectX<span class="token punctuation">,</span> <span class="token keyword">int</span> aspectY<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>w <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> h <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            w <span class="token operator">=</span> h <span class="token operator">=</span> <span class="token number">480</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>aspectX <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> aspectY <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            aspectX <span class="token operator">=</span> aspectY <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Intent intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token string">"com.android.camera.action.CROP"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        intent<span class="token punctuation">.</span><span class="token function">setDataAndType</span><span class="token punctuation">(</span>uri<span class="token punctuation">,</span> <span class="token string">"image/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        intent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span><span class="token string">"crop"</span><span class="token punctuation">,</span> <span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        intent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span><span class="token string">"aspectX"</span><span class="token punctuation">,</span> aspectX<span class="token punctuation">)</span><span class="token punctuation">;</span>        intent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span><span class="token string">"aspectY"</span><span class="token punctuation">,</span> aspectY<span class="token punctuation">)</span><span class="token punctuation">;</span>        intent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span><span class="token string">"outputX"</span><span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span>        intent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span><span class="token string">"outputY"</span><span class="token punctuation">,</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">/</span><span class="token operator">*</span>解决图片有黑边问题<span class="token operator">*</span><span class="token operator">/</span>        intent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span><span class="token string">"scale"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        intent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span><span class="token string">"scaleUpIfNeeded"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*解决跳转到裁剪提示“图片加载失败”问题*/</span>        intent<span class="token punctuation">.</span><span class="token function">addFlags</span><span class="token punctuation">(</span>Intent<span class="token punctuation">.</span>FLAG_GRANT_READ_URI_PERMISSION<span class="token punctuation">)</span><span class="token punctuation">;</span>        intent<span class="token punctuation">.</span><span class="token function">addFlags</span><span class="token punctuation">(</span>Intent<span class="token punctuation">.</span>FLAG_GRANT_WRITE_URI_PERMISSION<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*解决小米miui系统调用系统裁剪图片功能camera.action.CROP后崩溃或重新打开app的问题*/</span>        StringBuffer buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String pathName <span class="token operator">=</span> buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"file:///"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>FileUtils<span class="token punctuation">.</span><span class="token function">getRootPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>File<span class="token punctuation">.</span>separator<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>Constant<span class="token punctuation">.</span>APP_NAME<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">".temp.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cropPictureTempUri <span class="token operator">=</span> Uri<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>pathName<span class="token punctuation">)</span><span class="token punctuation">;</span>        intent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span>MediaStore<span class="token punctuation">.</span>EXTRA_OUTPUT<span class="token punctuation">,</span> cropPictureTempUri<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出路径(裁剪后的保存路径)</span>        <span class="token comment" spellcheck="true">// 输出格式</span>        intent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span><span class="token string">"outputFormat"</span><span class="token punctuation">,</span> <span class="token string">"JPEG"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 不启用人脸识别</span>        intent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span><span class="token string">"noFaceDetection"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//是否将数据保留在Bitmap中返回</span>        intent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span><span class="token string">"return-data"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> intent<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 处理裁剪，获取裁剪后的图片     * @param context   上下文     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Bitmap <span class="token function">dealCrop</span><span class="token punctuation">(</span>Context context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Bitmap bitmap <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            bitmap <span class="token operator">=</span> BitmapFactory<span class="token punctuation">.</span><span class="token function">decodeStream</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getContentResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">openInputStream</span><span class="token punctuation">(</span>cropPictureTempUri<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> bitmap<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>github地址：<a href="https://github.com/wildma/PictureSelector" target="_blank" rel="noopener">PictureSelector</a><br>ps：如果对你有帮助，点下 star 就是对我最大的认可。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> 开源库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图片选择 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>详细讲解 Android Studio 中使用 Git——结合 GitLab</title>
      <link href="/blog/13aaf42f.html"/>
      <url>/blog/13aaf42f.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文已授权微信公众号《鸿洋》原创首发，转载请注明出处。</p></blockquote><h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>以前项目版本管理工具一直用的都是SVN，现在换成Git，并且项目托管平台使用的是GitLab。虽然经常用GitHub，但是却很少使用到分支，因为都是自己在写，也不用开发版与发布版、打Tag那些，所以这篇文章主要讲下GitLab与Git的使用。这篇文章还是会按我以前的写作风格，写的通俗易懂，并且全程自己操作一遍，目的是为了初学者也能看懂。</p><h2 id="二、简介"><a href="#二、简介" class="headerlink" title="二、简介"></a>二、简介</h2><ul><li>Git：Git是一个开源的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。简单说，它就是一个管理项目版本的工具。</li><li>GitLab：GitLab 是一个用于仓库管理系统的开源项目，使用Git作为代码管理工具，并在此基础上搭建起来的web服务。简单说，GitLab的性质是和GitHub一样的，都是用来存储项目的仓库。</li></ul><h2 id="三、准备Git"><a href="#三、准备Git" class="headerlink" title="三、准备Git"></a>三、准备Git</h2><h3 id="3-1-安装Git"><a href="#3-1-安装Git" class="headerlink" title="3.1 安装Git"></a>3.1 安装Git</h3><p>下载地址：<a href="http://git-scm.com/download/" target="_blank" rel="noopener">http://git-scm.com/download/</a><br>安装步骤：双击安装，按默认选项一路下去即可。<br>安装完成后，在开始菜单里找到“Git”–&gt;“Git Bash”，出现如下图，就说明Git安装成功！<img src="13aaf42f/1.png" alt></p><h3 id="3-2-配置信息"><a href="#3-2-配置信息" class="headerlink" title="3.2 配置信息"></a>3.2 配置信息</h3><p>在上图命令行中输入你的用户名与邮箱</p><pre class="line-numbers language-java"><code class="language-java">$ git config <span class="token operator">--</span>global user<span class="token punctuation">.</span>name <span class="token string">"Your Name"</span>$ git config <span class="token operator">--</span>global user<span class="token punctuation">.</span>email <span class="token string">"email@example.com"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>命令中的 –global 参数表示你这台机器上所有的Git仓库都会使用这个配置。</p><h3 id="3-3-Android-Studio中配置Git"><a href="#3-3-Android-Studio中配置Git" class="headerlink" title="3.3 Android Studio中配置Git"></a>3.3 Android Studio中配置Git</h3><p>在Android Studio中点击Settings–&gt;Version Control –&gt; Git，然后在Path To Git executable上输入你刚刚安装Git的位置，最后点击Test按钮出现Git executed successfully说明配置成功，如下图：<img src="13aaf42f/2.png" alt></p><h2 id="四、GitLab使用"><a href="#四、GitLab使用" class="headerlink" title="四、GitLab使用"></a>四、GitLab使用</h2><h3 id="4-1-注册账号"><a href="#4-1-注册账号" class="headerlink" title="4.1 注册账号"></a>4.1 注册账号</h3><p>这里说下注册账号的时候需要注意的事项。<br>如果注册账号的时候提示如下错误</p><pre class="line-numbers language-java"><code class="language-java">there was an error with the reCAPTCHA<span class="token punctuation">,</span>please solve the reCAPTCHA again<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>那是因为注册时需要验证码验证，就是reCAPTCHA，是一个图形验证码。但是这个验证码需要翻Q才能看得到，否则你一直都注册不了。如图：<img src="13aaf42f/3.png" alt></p><h3 id="4-2-GitLab账户配置SSH-Keys"><a href="#4-2-GitLab账户配置SSH-Keys" class="headerlink" title="4.2 GitLab账户配置SSH Keys"></a>4.2 GitLab账户配置SSH Keys</h3><h4 id="4-2-1-首先需要检查你电脑是否已经有-SSH-Keys"><a href="#4-2-1-首先需要检查你电脑是否已经有-SSH-Keys" class="headerlink" title="4.2.1 首先需要检查你电脑是否已经有 SSH Keys"></a>4.2.1 首先需要检查你电脑是否已经有 SSH Keys</h4><p>在Git Bash 客户端，输入如下代码：</p><pre class="line-numbers language-java"><code class="language-java">$ cd <span class="token operator">~</span><span class="token operator">/</span><span class="token punctuation">.</span>ssh$ ls<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如下说明已经存在，存在就可以忽略步骤4.2.2，直接进入步骤4.2.3<br><img src="13aaf42f/4.png" alt></p><h4 id="4-2-2-创建一个-SSH-Keys"><a href="#4-2-2-创建一个-SSH-Keys" class="headerlink" title="4.2.2 创建一个 SSH Keys"></a>4.2.2 创建一个 SSH Keys</h4><p>在Git Bash 客户端，输入如下代码：</p><pre class="line-numbers language-java"><code class="language-java">$ ssh<span class="token operator">-</span>keygen <span class="token operator">-</span>t rsa <span class="token operator">-</span>C <span class="token string">"your_email"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后根据提示进行相应操作，如下图所示：<br>第一个Enter表示Keys存储的位置，默认按回车键即可。第二个和第三个Enter表示Push文件的时候要输入的密码，不需要密码就默认按回车键即可，然后出现如图底部信息就说明创建成功了！<br><img src="13aaf42f/5.png" alt></p><h4 id="4-2-3-GitLab配置SSH-Keys"><a href="#4-2-3-GitLab配置SSH-Keys" class="headerlink" title="4.2.3 GitLab配置SSH Keys"></a>4.2.3 GitLab配置SSH Keys</h4><p>进入上图所示存储 id_rsa.pub 的文件夹拷贝该文件中的内容，然后登录你的GitLab账号，点击网页右上角的头像–&gt;Settings，点击左边菜单栏的 SSH Keys 进入页面添加 SSH key。如下操作：<img src="13aaf42f/6.png" alt><br><img src="13aaf42f/7.png" alt></p><h3 id="4-3-创建项目"><a href="#4-3-创建项目" class="headerlink" title="4.3 创建项目"></a>4.3 创建项目</h3><p>在GitLab网站点击导航条上的 “+” 即可进入创建项目的页面，然后根据提示填写相应信息，如下图：<img src="13aaf42f/8.png" alt></p><p><img src="13aaf42f/9.png" alt></p><ul><li>Project path：项目路径</li><li>Project name：项目名称</li><li>Project description (optional)：项目描述（可选项）</li><li>Visibility Level：可见登记，Private表示私有的，只有你自己或者组内的成员能访问，Internal表示所有登录的用户，Public表示公开的，所有人都可以访问。</li></ul><p>创建完成后是这样的：<img src="13aaf42f/10.png" alt></p><h2 id="五、Android-Studio中使用Git"><a href="#五、Android-Studio中使用Git" class="headerlink" title="五、Android Studio中使用Git"></a>五、Android Studio中使用Git</h2><h3 id="5-1-将项目上传到GitLab"><a href="#5-1-将项目上传到GitLab" class="headerlink" title="5.1 将项目上传到GitLab"></a>5.1 将项目上传到GitLab</h3><p>本地已创建好的项目为WildmaGit</p><h4 id="5-1-1-配置忽略文件"><a href="#5-1-1-配置忽略文件" class="headerlink" title="5.1.1 配置忽略文件"></a>5.1.1 配置忽略文件</h4><p>Android Studio创建项目后会自动生成.gitignore文件，这个文件可以用来忽略那些不用加入到仓库的文件。项目根目录下与module目录下都会生成该文件，如下：<img src="13aaf42f/11.png" alt></p><p>一般情况下我们只需要将项目根目录下的/.idea/workspace.xml与/.idea/libraries改成.idea即可，其他没有特殊要求就用默认的。如下：<br>修改前：<img src="13aaf42f/12.png" alt><br>修改后：<img src="13aaf42f/13.png" alt></p><h4 id="5-1-2-初始化本地Git仓库"><a href="#5-1-2-初始化本地Git仓库" class="headerlink" title="5.1.2 初始化本地Git仓库"></a>5.1.2 初始化本地Git仓库</h4><p>点击Android Studio顶部菜单栏上的VCS–&gt;Import into Version Control–&gt;Create Git Repository，如图：<img src="13aaf42f/14.png" alt></p><p>然后选择需要初始化的项目根目录，如图：<img src="13aaf42f/15.png" alt></p><p>初始化之后发现文件名由原来的白色变成了红色，这表示文件已经被git跟踪了，但是并没有添加到仓库中。如图：<img src="13aaf42f/16.png" alt></p><h4 id="5-1-3-将本地Git仓库已与远程仓库进行关联"><a href="#5-1-3-将本地Git仓库已与远程仓库进行关联" class="headerlink" title="5.1.3 将本地Git仓库已与远程仓库进行关联"></a>5.1.3 将本地Git仓库已与远程仓库进行关联</h4><p>打开项目文件夹，在该文件夹中打开Git Bash。输入如下命令后就代表本地Git仓库已与远程仓库进行关联了。</p><pre class="line-numbers language-java"><code class="language-java">git remote add origin git<span class="token annotation punctuation">@gitlab</span><span class="token punctuation">.</span>com<span class="token operator">:</span>wildma<span class="token operator">/</span>WildmaGit<span class="token punctuation">.</span>git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>具体步骤见下图：<img src="13aaf42f/17.png" alt><br><img src="13aaf42f/18.png" alt></p><p>其中 <a href="mailto:git@gitlab.com" target="_blank" rel="noopener">git@gitlab.com</a>:wildma/WildmaGit.git 为我们项目的远程地址，可以到我们前面创建项目中复制，如下：<br><img src="13aaf42f/19.png" alt></p><h4 id="5-1-4-添加文件"><a href="#5-1-4-添加文件" class="headerlink" title="5.1.4 添加文件"></a>5.1.4 添加文件</h4><p>选中项目的根目录，点击Android Studio顶部菜单栏上的VCS–&gt;Git–&gt;Add…，如下图：<img src="13aaf42f/20.png" alt></p><p>添加文件后发现文件名由原来的红色变成了绿色，说明已经将文件添加进仓库了。如下图：<img src="13aaf42f/21.png" alt></p><h4 id="5-1-5-提交文件"><a href="#5-1-5-提交文件" class="headerlink" title="5.1.5 提交文件"></a>5.1.5 提交文件</h4><p>每次提交前需要先更新项目，原因是如果是多人合作的项目，需要先将远程仓库中他人提交的最新代码更新到本地仓库。如图：<img src="13aaf42f/22.png" alt></p><p>然后选中Merge，点击OK，如果本地代码与远程代码有冲突就会弹出冲突提示，根据需求Merge即可，如图：<img src="13aaf42f/23.png" alt></p><p>Update后就可以提交文件了，选中项目的根目录，点击Android Studio顶部菜单栏上的VCS–&gt;Git–&gt;Commit Directory…，如图：<img src="13aaf42f/24.png" alt></p><p>然后会弹出如下提交框，这里可以选择你要提交的文件和填写提交信息，如图：<img src="13aaf42f/25.png" alt></p><p>提交文件后发现文件名由原来的绿色又变成了最开始的白色，说明已经将文件提交上仓库了。如图：<img src="13aaf42f/26.png" alt></p><h4 id="5-1-6-将提交的文件推送到远程仓库"><a href="#5-1-6-将提交的文件推送到远程仓库" class="headerlink" title="5.1.6 将提交的文件推送到远程仓库"></a>5.1.6 将提交的文件推送到远程仓库</h4><p>选中项目的根目录，点击Android Studio顶部菜单栏上的VCS–&gt;Git–&gt;Push…，如下图：<img src="13aaf42f/27.png" alt></p><p>然后会弹出如下推送框<img src="13aaf42f/28.png" alt></p><p>点击Push后，就可以在GitLab上看到刚刚推送的内容了。如下图：<img src="13aaf42f/29.png" alt></p><h3 id="5-2-从GitLab上clone项目"><a href="#5-2-从GitLab上clone项目" class="headerlink" title="5.2 从GitLab上clone项目"></a>5.2 从GitLab上clone项目</h3><p>首先到GitLab上复制项目的地址，如图：<img src="13aaf42f/30.png" alt></p><p>然后点击Android Studio顶部菜单栏上的VCS–&gt;Checkout from Version Control–&gt;Git ，如图：<img src="13aaf42f/31.png" alt></p><p>最后填写相应的信息即可，如下图：</p><ul><li>Git Repository URL：填写刚刚复制的项目地址</li><li>Parent Directory：项目路径</li><li>Directory Name：项目文件夹名称</li></ul><p><img src="13aaf42f/32.png" alt></p><p>点击clone后，项目就clone下来了！</p><h3 id="5-3-分支管理"><a href="#5-3-分支管理" class="headerlink" title="5.3 分支管理"></a>5.3 分支管理</h3><h4 id="5-3-1-分支策略"><a href="#5-3-1-分支策略" class="headerlink" title="5.3.1 分支策略"></a>5.3.1 分支策略</h4><p>在实际开发中，我们会用到很多分支。这里说下各分支的作用。</p><ul><li>master分支：最稳定的分支，保存需要发布的版本，不在该分支上做任何开发。</li><li>dev分支：开发分支，保存最新的代码，平时开发就在该分支上。当某个版本开发完成后就合并到master分支，然后在master分支进行版本发布。</li><li>bug分支：用来修复bug的分支，一般是线上版出现bug的时候，从master分支创建一个新的bug分支进行bug修复，修复完成合并到master分支和dev分支（保证master分支与dev分支同步），然后删除该bug分支。</li></ul><p>实际开发中我主要用到这三个分支，当然每个人都不同，有些人还会细分到功能分支，预发分支。其中master分支与dev分支都需要推送到远程，为了其他成员能共同开发，bug分支则放在本地即可，你自己修复完bug删掉即可。</p><h4 id="5-3-2-分支操作"><a href="#5-3-2-分支操作" class="headerlink" title="5.3.2 分支操作"></a>5.3.2 分支操作</h4><ol><li>创建分支<br>点击Android Studio顶部菜单栏上的VCS–&gt;Git–&gt;Branches…，如图：<img src="13aaf42f/33.png" alt></li></ol><p>然后选择New Branch，输入分支的名字，例如“dev”，如图：<img src="13aaf42f/34.png" alt></p><p><img src="13aaf42f/35.png" alt></p><p>点击OK，分支dev就创建成功了，并且默认切换到该分支。重复上面的步骤可以看到当前分支显示的是dev，如图：<img src="13aaf42f/36.png" alt></p><ol start="2"><li>推送分支到远程<br>这时候我们在dev分支上修改内容，然后按照前面说的提交文件（步骤5.1.5），将提交的文件推送到远程仓库（步骤5.1.6）即可。如图：<img src="13aaf42f/37.png" alt> <img src="13aaf42f/38.png" alt></li></ol><p>点击push，然后就可以到Gitlab上看到我们刚刚推送的dev分支了，如图：<img src="13aaf42f/39.png" alt></p><ol start="3"><li>切换分支<br>dev分支上版本V1.0开发完了，需要将代码合并到master上进行发布。因为当前在dev分支，所以需要先切换到master分支，点击Android Studio顶部菜单栏上的VCS–&gt;Git–&gt;Branches…，打开Git Branches窗口，然后选择本地分支栏下的master-&gt;origin/master，然后点击Checkout。如图：<img src="13aaf42f/40.png" alt></li></ol><ol start="4"><li>合并分支<br>第三步已经将分支切换到master了，现在进行分支合并。点击Android Studio顶部菜单栏上的VCS–&gt;Git–&gt;Branches…，打开Git Branches窗口，然后选择远程分支栏下的origin/dev，然后点击Merge。如图：<img src="13aaf42f/41.png" alt></li></ol><p>这个时候到GitLab上却发现master分支上并没有合并到dev分支修改的内容，那是因为刚刚只是将远程dev分支的内容合并到本地master分支，本地master分支还没有push到远程，push一下就可以啦~ 如图：<img src="13aaf42f/42.png" alt></p><p>这个时候发现GitLab上master分支与dev分支是保持一致的了。然后将最新的master分支打包发布即可！</p><ol start="5"><li>删除分支<br>删除本地分支：<br>点击Android Studio顶部菜单栏上的VCS–&gt;Git–&gt;Branches…，打开Git Branches窗口，选中本地dev分支，选择Delete即可。如图：<img src="13aaf42f/43.png" alt></li></ol><p>删除远程分支：<br>点击Android Studio顶部菜单栏上的VCS–&gt;Git–&gt;Branches…，打开Git Branches窗口，选中远程dev分支，选择Delete即可。如图：<img src="13aaf42f/44.png" alt></p><h3 id="5-4-标签-Tag-管理"><a href="#5-4-标签-Tag-管理" class="headerlink" title="5.4 标签(Tag)管理"></a>5.4 标签(Tag)管理</h3><p>标签一般是用于标记某个发布的版本， 例如你发布了版本v1.0，这个时候会打一个v1.0的Tag，主要是方便以后查看和管理某个版本的代码。</p><ol><li>创建标签<br>点击Android Studio顶部菜单栏上的VCS–&gt;Git–&gt;Tag…，如图：<img src="13aaf42f/45.png" alt></li></ol><p>然后填写Tag名称与Tag信息，点击Create Tag即可创建本地标签。其中Commit可填写以前某次提交记录的id，表示在该次提交上打Tag。如果不填表示Tag打在最新提交的commit上。如图：<img src="13aaf42f/46.png" alt></p><ol start="2"><li>推送标签到远程<br>点击Android Studio顶部菜单栏上的VCS–&gt;Git–&gt;Push…，如图：<br><img src="13aaf42f/47.png" alt></li></ol><p>然后弹出Push框，选中Push Tags，点击Push即可推送到远程。如图：<br><img src="13aaf42f/48.png" alt></p><p>最后到GitLab就可以看到刚刚创建的Tag了，如图：<br><img src="13aaf42f/49.png" alt></p><ol start="3"><li>checkout某个标签的代码<br>点击Android Studio顶部菜单栏上的VCS–&gt;Git–&gt;Branches…，如图：<img src="13aaf42f/50.png" alt></li></ol><p>然后选择Checkout Tag or Revision…，最后在弹出的Checkout框中填入Tag的名称即可。如图：<img src="13aaf42f/51.png" alt><br><img src="13aaf42f/52.png" alt></p><ol start="4"><li>删除标签<br>在Android Studio中没找到删除Tag的操作，所以这里用Git命令。（有发现的小伙伴可以告诉我）</li></ol><p>查看本地标签：</p><pre class="line-numbers language-java"><code class="language-java">git tag<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>删除本地标签：</p><pre class="line-numbers language-java"><code class="language-java">git tag <span class="token operator">-</span>d tagName<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>删除远程标签：</p><pre class="line-numbers language-java"><code class="language-java">git push origin <span class="token operator">:</span>refs<span class="token operator">/</span>tags<span class="token operator">/</span>tagName<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>以上命令需要在Android Studio自带的命令行中输入，如图：<img src="13aaf42f/53.png" alt></p><p>希望这种图文结合的方式大家都能看懂吧！写的不好的地方请多交流~</p><p>项目地址：<a href="https://gitlab.com/wildma/WildmaGit" target="_blank" rel="noopener">WildmaGit</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> GitLab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一种非常好用的 Android 屏幕适配</title>
      <link href="/blog/3cf1e1de.html"/>
      <url>/blog/3cf1e1de.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>更新：由于该适配方案越来越多人使用，也有很多人遇到不太理解的问题。所以为了大家更好的使用，我将文章很多内容更新了，老用户可以重新看下整篇文章。主要更新的内容是使用方法跟以前不同了，以前是不改变最小宽度基准值，根据 UI 图来计算布局中设置的值。现在改成最小宽度基准值与设计图一致，然后设计图标注多少 dp 就写多少 dp，非常方便。还整理了评论区比较多人问到的问题作统一回答。</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>网上关于屏幕适配的文章已经铺天盖地了，为什么我还要讲？因为网上现在基本都是使用 <strong>屏幕分辨率限定符</strong> 进行适配，即每种屏幕分辨率的设备需要定义一套 dimens.xml 文件。由于不同分辨率的设备太多了，而且有些设备还有虚拟按键（例如华为手机），这样就还需要每个有虚拟按键的设备加多一套 dimens.xml 文件，再加上平板那些你会发现 dimens.xml 文件所占的体积已经超过2M了！这绝对不是我们想要的。</p><p>我这里要讲的是使用 <strong>sw<n>dp限定符，即 smallestWidth（最小宽度） 限定符</n></strong> 来进行适配，使用这种方式只需要少量 dimens.xml 文件即可达到适配，而且根本不用考虑虚拟按键的问题。如果只适配手机，dimens.xml 文件所占的体积只有 100 多 KB，即使加上平板和 TV，也就500多KB，完全可以接收。这种方案已经在自己多个项目中应用过了，经过几十台手机测试过，基本不会出现适配有问题的情况。制作生成对应 dimens.xml 文件插件（后面会讲）的作者也说过他在待过的两家大公司实践过，所以请放心使用。</p><h2 id="一、为什么要进行屏幕适配？"><a href="#一、为什么要进行屏幕适配？" class="headerlink" title="一、为什么要进行屏幕适配？"></a>一、为什么要进行屏幕适配？</h2><p>关于为什么要进行屏幕适配，什么是 dp、dpi 这些概念我就不去一一讲解了，网上很多文章。这里我推荐几篇讲的比较好的：</p><ul><li><a href="https://blog.csdn.net/zhaokaiqiang1992/article/details/45419023" target="_blank" rel="noopener">Android屏幕适配全攻略(最权威的官方适配指导)</a></li><li><a href="https://www.jianshu.com/p/ec5a1a30694b" target="_blank" rel="noopener">Android 屏幕适配：最全面的解决方案</a></li><li><a href="https://blog.csdn.net/lmj623565791/article/details/45460089" target="_blank" rel="noopener">Android 屏幕适配方案</a></li></ul><h2 id="二、屏幕分辨率限定符与-smallestWidth-限定符适配原理"><a href="#二、屏幕分辨率限定符与-smallestWidth-限定符适配原理" class="headerlink" title="二、屏幕分辨率限定符与 smallestWidth 限定符适配原理"></a>二、屏幕分辨率限定符与 smallestWidth 限定符适配原理</h2><h3 id="2-1-屏幕分辨率限定符适配原理"><a href="#2-1-屏幕分辨率限定符适配原理" class="headerlink" title="2.1 屏幕分辨率限定符适配原理"></a>2.1 屏幕分辨率限定符适配原理</h3><p>屏幕分辨率限定符适配需要在 res 文件夹下创建各种屏幕分辨率对应的 values-xxx 文件夹，如下图：<br><img src="3cf1e1de/1.png" alt></p><p>然后根据一个基准分辨率，例如基准分辨率为 1280x720，将宽度分成 720 份，取值为 1px~720px，将高度分成 1280 份，取值为 1px~1280px，生成各种分辨率对应的 dimens.xml 文件。如下分别为分辨率 1280x720 与 1920x1080 所对应的横向dimens.xml 文件：<br><img src="3cf1e1de/2.png" alt></p><p>假设设计图上的一个控件的宽度为 720px，那么布局中就写 android:layout_width=”@dimen/x720” ，当运行程序的时候，系统会根据设备的分辨率去寻找对应的 dimens.xml 文件。例如运行在分辨率为 1280x720 的设备上，系统会自动找到对应的 values-1280x720 文件夹下的 lay_x.xml 文件，由上图可知 x720 对应的值为<br> 720.px，可铺满该屏幕宽度。运行在分辨率为 1920x1080 的设备上，系统会自动找到对应的 values-1920x1080 文件夹下的 lay_x.xml 文件，由上图可知 x720 对应的值为 1080.0px，可铺满该屏幕宽度。这样就达到了屏幕适配的要求！</p><h3 id="2-2-smallestWidth-限定符-适配原理"><a href="#2-2-smallestWidth-限定符-适配原理" class="headerlink" title="2.2 smallestWidth 限定符 适配原理"></a>2.2 smallestWidth 限定符 适配原理</h3><p> smallestWidth 限定符适配原理与屏幕分辨率限定符适配原理一样，系统都是根据限定符去寻找对应的 dimens.xml 文件。例如程序运行在最小宽度为 360dp 的设备上，系统会自动找到对应的 values-sw360dp 文件夹下的 dimens.xml 文件。区别就在于屏幕分辨率限定符适配是拿 px 值等比例缩放，而 smallestWidth 限定符适配是拿 dp 值来等比缩放而已。需要注意的是“最小宽度”是不区分方向的，即无论是宽度还是高度，哪一边小就认为哪一边是“最小宽度”。如下分别为最小宽度为 360dp 与最小宽度为 640dp 所对应的 dimens.xml 文件：<br><img src="3cf1e1de/3.png" alt></p><ul><li>获取设备最小宽度代码为：<pre class="line-numbers language-java"><code class="language-java">      DisplayMetrics dm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DisplayMetrics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">getWindowManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDefaultDisplay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMetrics</span><span class="token punctuation">(</span>dm<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> heightPixels <span class="token operator">=</span> ScreenUtils<span class="token punctuation">.</span><span class="token function">getScreenHeight</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> widthPixels <span class="token operator">=</span> ScreenUtils<span class="token punctuation">.</span><span class="token function">getScreenWidth</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">float</span> density <span class="token operator">=</span> dm<span class="token punctuation">.</span>density<span class="token punctuation">;</span>      <span class="token keyword">float</span> heightDP <span class="token operator">=</span> heightPixels <span class="token operator">/</span> density<span class="token punctuation">;</span>      <span class="token keyword">float</span> widthDP <span class="token operator">=</span> widthPixels <span class="token operator">/</span> density<span class="token punctuation">;</span>      <span class="token keyword">float</span> smallestWidthDP<span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>widthDP <span class="token operator">&lt;</span> heightDP<span class="token punctuation">)</span> <span class="token punctuation">{</span>          smallestWidthDP <span class="token operator">=</span> widthDP<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>          smallestWidthDP <span class="token operator">=</span> heightDP<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>ScreenUtils——&gt;<a href="https://github.com/wildma/ScreenAdaptation/blob/master/app/src/main/java/com/wildma/androidscreenadaptation/utils/ScreenUtils.java" target="_blank" rel="noopener">ScreenUtils</a></li></ul><h2 id="三、为什么选择-smallestWidth-限定符适配？"><a href="#三、为什么选择-smallestWidth-限定符适配？" class="headerlink" title="三、为什么选择 smallestWidth 限定符适配？"></a>三、为什么选择 smallestWidth 限定符适配？</h2><p>既然原理都一样，都需要多套 dimens.xml 文件，那为什么要选择 smallestWidth 限定符适配呢？</p><ol><li>屏幕分辨率限定符适配是根据屏幕分辨率的，Android 设备分辨率一大堆，而且还要考虑虚拟键盘，这样就需要大量的 dimens.xml 文件。因为无论手机屏幕的像素多少，密度多少，90% 的手机的最小宽度都为 360dp，所以采用 smallestWidth 限定符适配只需要少量 dimens.xml 文件即可。</li><li>屏幕分辨率限定符适配采用的是 px 单位，而 smallestWidth 限定符适配采用的单位是 dp 和 sp，dp 和 sp 是google 推荐使用的计量单位。又由于很多应用要求字体大小随系统改变，所以字体单位使用 sp 也更灵活。</li><li>屏幕分辨率限定符适配需要设备分辨率与 values-xx 文件夹完全匹配才能达到适配，而 smallestWidth 限定符适配寻找 dimens.xml 文件的原理是从大往小找，例如设备的最小宽度为 360dp，就会先去找 values-360dp，发现没有则会向下找 values-320dp，如果还是没有才找默认的 values 下的 demens.xml 文件，所以即使没有完全匹配也能达到不错的适配效果。</li></ol><h2 id="四、使用步骤"><a href="#四、使用步骤" class="headerlink" title="四、使用步骤"></a>四、使用步骤</h2><h3 id="4-1-以设计图最小宽度（单位为-dp）作为基准值，生成所有设备对应的-dimens-xml-文件"><a href="#4-1-以设计图最小宽度（单位为-dp）作为基准值，生成所有设备对应的-dimens-xml-文件" class="headerlink" title="4.1 以设计图最小宽度（单位为 dp）作为基准值，生成所有设备对应的 dimens.xml 文件"></a>4.1 以设计图最小宽度（单位为 dp）作为基准值，生成所有设备对应的 dimens.xml 文件</h3><p>这些文件当然不会手动去写，网上已经有大神提供了自动生成这些文件的插件 <a href="https://plugins.jetbrains.com/plugin/10058-screenmatch" target="_blank" rel="noopener">ScreenMatch</a>。但是这个插件还是有点问题的：</p><ul><li>默认没有适配最小宽度为 320dp 的设备。其实自己测试还是有很多设备最小宽度是 320dp 的，所以需要加上。</li><li>最小宽度为 392.7272 与 411.4285 的手机不能达到完全适配。原因是该插件的默认值都是取整的，即 392.7272 与 411.4285 在插件中写的是 392 与 411。</li></ul><p>基于以上问题，我在该插件的源码上优化生成了新的插件 <a href="https://github.com/wildma/ScreenAdaptation/blob/master/ScreenMatch.jar" target="_blank" rel="noopener">ScreenMatch</a>，由于插件库已经有原作者的插件了，所以我就不重复造轮子上传到插件库了，你直接用本地安装的方式安装即可。</p><p>工具使用步骤：</p><ol><li>在 Android Studio 中安装 ScreenMatch 插件<br>下载插件 <a href="https://github.com/wildma/ScreenAdaptation/raw/master/ScreenMatch.jar" target="_blank" rel="noopener">ScreenMatch</a> 到本地，点击菜单栏上的 File -&gt; Settings -&gt; Plugins -&gt; Install plugin from disk，然后选择我们刚刚下载的插件，最后点击 “OK”，重启 Andorid Studio 即可。如下图所示：</li></ol><p><img src="3cf1e1de/4.png" alt></p><ol start="2"><li>在项目的默认 values 文件夹中需要一份 dimens.xml 文件<br>我在 <a href="https://github.com/wildma/ScreenAdaptation/blob/master/app/src/main/res/values/dimens.xml" target="_blank" rel="noopener">github 源码</a>已经提供了一份，直接复制过来即可。</li></ol><p><img src="3cf1e1de/5.png" alt></p><ol start="3"><li>执行生成<br>插件安装好后，在项目的任意目录或文件上右键，选择 ScreenMatch 选项。如下图：</li></ol><p><img src="3cf1e1de/6.png" alt></p><p>然后选择在哪个 module 下执行适配。即基于哪个 module 下的 res/values/dimens.xml 文件作为基准 dimens.xml 文件，生成的其他尺寸 dimens.xml 文件放在哪个 module 下。例如选择 app，然后点击 OK ，出现如下界面表示生成文件成功。如下图：</p><p><img src="3cf1e1de/7.png" alt></p><p>然后再看看 res 目录下会自动生成一堆 dimens.xml 文件，如下图：</p><p><img src="3cf1e1de/8.png" alt></p><p>通过上面的步骤就已经生成了所有设备对应的 dimens.xml 文件。</p><ol start="4"><li>根据设计图填写最小宽度基准值，并填写需要适配的设备最小宽度 dp 值</li></ol><p>步骤 3 是以插件默认的最小宽度基准值为 360dp，适配的设备最小宽度为<br>320,360,384,392.7272,400,410,411.4285,432,480,533,592,600,640,662,720,768,800,811,820,960,961,1024,1280,1365（包含了平板和 TV ）生成的文件，但实际情况要根据设计图和需求设置。</p><p>例如设计图的最小宽度为 375dp，则需要更改最小宽度基准值为 375dp。如果项目只需要适配手机的话，适配的设备最小宽度保留 320,360,384,392.7272,400,410,411.4285,432,480 即可，若发现手机还有其他最小宽度自行加上即可，也麻烦把该最小宽度提供给我，我们一起来完善该份适配。</p><p>以上修改需要在配置文件里修改，即 screenMatch.properties 文件，该配置文件是执行完上面第 3 步后自动生成在项目的跟目录下的。如下图：<br><img src="3cf1e1de/9.png" alt></p><p>打开配置文件，修改下图中 1、3、4 的值即可。(图中单位均为 dp)<br>1：最小宽度基准值，填写设计图的最小宽度值即可。<br>2：插件默认适配的最小宽度值，即默认情况下会生成如下值的 dimens.xml 文件。<br>3：需要适配的最小宽度值（如果是小数，则保留4位小数。例如 392.727272…，则取 392.7272），即你想生成哪些 dimens.xml 文件。<br>4：忽略不需要适配的最小宽度值，即忽略掉插件默认生成的 dimens.xml 文件。</p><p><img src="3cf1e1de/10.png" alt></p><p>配置文件修改完成后，重新执行第 3 步，生成新的 dimens.xml 文件。</p><p>当然！如果你的设计图也是标准的 360dp，那么上面的步骤你可以忽略。直接复制我 github 上你需要的 dimens.xml 文件到你的项目即可，<strong>默认的 values 文件夹下也需要一份</strong>。</p><h3 id="4-2-根据设计图标注，在布局写上对应的值。"><a href="#4-2-根据设计图标注，在布局写上对应的值。" class="headerlink" title="4.2 根据设计图标注，在布局写上对应的值。"></a>4.2 根据设计图标注，在布局写上对应的值。</h3><p><strong>设计图标注多少 dp，布局中就写多少 dp ，非常方便！</strong></p><ul><li>大多数 UI 设计师提供设计图有如下几种方式：<br>上传到蓝湖：显示多少 dp 就写多少 dp。<br>psd 源文件：用像素大厨查看，显示多少 dp 就写多少 dp（注意像素大厨需要选择与设计图对应的dpi 进行显示）<br>dp 单位的设计图：标注多少 dp 就写多少 dp。<br>px 单位的设计图：叫 UI 设计师标注为 dp 单位或跟她要 psd 源文件，如果都不行，那自己算吧！</li></ul><ul><li>举例：例如设计图上一个Button 的宽为 360dp，高为 50dp，字体大小为 15 sp，在布局中则这样使用：</li></ul><pre class="line-numbers language-java"><code class="language-java">    <span class="token operator">&lt;</span>Button        android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"@dimen/dp_360"</span>        android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"@dimen/dp_50"</span>        android<span class="token operator">:</span>textSize<span class="token operator">=</span><span class="token string">"@dimen/sp_15"</span><span class="token operator">/</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>代码中动态设置 dp 或 sp：<br>如果需要在代码中动态设置 dp 或 sp，则需要通过 getDimension（）方法获取对应资源文件下的 dp 或 sp 值再设置（具体参考 github 上的 demo）。如下：</p><pre class="line-numbers language-java"><code class="language-java">      <span class="token comment" spellcheck="true">/*获取sp值*/</span>      <span class="token keyword">float</span> pxValue <span class="token operator">=</span> <span class="token function">getResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDimension</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>dimen<span class="token punctuation">.</span>sp_15<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取对应资源文件下的sp值</span>      <span class="token keyword">int</span> spValue <span class="token operator">=</span> ConvertUtils<span class="token punctuation">.</span><span class="token function">px2sp</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> pxValue<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将px值转换成sp值</span>      mTvShowParams<span class="token punctuation">.</span><span class="token function">setTextSize</span><span class="token punctuation">(</span>spValue<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置文字大小</span>      <span class="token comment" spellcheck="true">/*获取dp值*/</span>      <span class="token keyword">float</span> pxValue2 <span class="token operator">=</span> <span class="token function">getResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDimension</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>dimen<span class="token punctuation">.</span>dp_360<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取对应资源文件下的dp值</span>      <span class="token keyword">int</span> dpValue <span class="token operator">=</span> ConvertUtils<span class="token punctuation">.</span><span class="token function">px2dp</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> pxValue2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将px值转换成dp值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="4-3-使用步骤总结"><a href="#4-3-使用步骤总结" class="headerlink" title="4.3 使用步骤总结"></a>4.3 使用步骤总结</h3><p>说了这么多，其实只需要简单的 2 步：</p><ol><li>以设计图最小宽度（单位为 dp）作为基准值，利用插件生成所有设备对应的 dimens.xml 文件</li><li>根据设计图标注，标注多少 dp，布局中就写多少dp，格式为@dimen/dp_XX。</li></ol><h2 id="五、怎么适配其他-module"><a href="#五、怎么适配其他-module" class="headerlink" title="五、怎么适配其他 module?"></a>五、怎么适配其他 module?</h2><ul><li>问题：在项目的其他 module 中怎么实现适配？难道也要多套 dimens 文件？</li><li>解决：并不需要多套 dimens 文件，只需要在 values 文件夹下有一套与 app module 一样的 dimens 文件即可达到适配。因为经过编译，所有 module 中的 dimen 数据都会统一归类到主 module（即 app module）中的 values/dimens.xml 文件中了，然后系统又会根据你设置的值去找对应 values-swxxxdp 文件夹下的dimens.xml 文件中的值。</li><li>验证：将我 github 上的 demo 分别运行在不同 widthDP 的设备上（用模拟器即可），然后观察显示的效果会发现确实是这样的。</li></ul><h2 id="六、常见问题汇总"><a href="#六、常见问题汇总" class="headerlink" title="六、常见问题汇总"></a>六、常见问题汇总</h2><h3 id="6-1-为什么宽度适配了，高度有时候没有完全适配？"><a href="#6-1-为什么宽度适配了，高度有时候没有完全适配？" class="headerlink" title="6.1 为什么宽度适配了，高度有时候没有完全适配？"></a>6.1 为什么宽度适配了，高度有时候没有完全适配？</h3><p>因为各种屏幕高宽比并不是固定的，有16:9、4:3，还有全面屏的19.5:9等等，如果强行将宽高都适配那只会导致布局变形。</p><p>例如一个控件的宽高为360dp和640dp，如果将它显示在宽高为360dp和640dp的设备上是正常铺满整个屏幕的，但是显示在宽高为360dp和780dp的设备上高度则不能铺满，如果你让高度铺满，而宽度又保持不变，那就会出现变形的情况。所以这也就是为什么目前市面上的屏幕适配方案只能以宽或高一个维度去适配，另一个方向用滑动或权重的方式去适配的原因。</p><p>那你为什么说高度也能适配呢？<br>这里说的高度也能适配指的是在不同分辨率和密度的手机上能达到等比缩放的适配，其他屏幕适配方案也是一样的。</p><h3 id="6-2-如何同时适配横竖屏？"><a href="#6-2-如何同时适配横竖屏？" class="headerlink" title="6.2 如何同时适配横竖屏？"></a>6.2 如何同时适配横竖屏？</h3><ul><li><p>方案一：（不推荐）<br>计算出设备宽度和高度的dp值，然后生成对应的宽高 dimens.xml 文件。然后去掉所有 values-swXXXdp 目录上的s，即改为 values-wXXXdp。这样设备不管横竖屏都能找到对应的 values-wXXXdp 目录下的  dimens.xml 文件了。 虽然也能达到一定程度的适配，但是这样会增加很多 dimens.xml 文件，而且使用竖屏的设计图显示出来的效果也不够好。</p></li><li><p>方案二：（推荐）<br>因为横屏时宽高变化太大，想要横屏时也能完全适配，那就只能让设计师出一套横屏的设计图，然后单独写一套横屏的布局文件。</p></li></ul><p>注意：smallestWidth 限定符适配的效果是让不同分辨率和密度的设备上能达到以设计图等比缩放的适配，如果设备与设计图相差太大时并不能达到很好的适配效果，需要单独出图，其他屏幕适配方案也是一样的。</p><h3 id="6-3-如何适配平板、TV？"><a href="#6-3-如何适配平板、TV？" class="headerlink" title="6.3 如何适配平板、TV？"></a>6.3 如何适配平板、TV？</h3><p>同横屏道理一样，平板、TV 与手机的宽高差距太大，想要平板、TV 也能完全适配，那就只能让设计师出一套平板、TV 的设计图，然后单独写一套平板、TV 的布局文件。</p><p>注意：再说一遍，smallestWidth 限定符适配的效果是让不同分辨率和密度的设备上能达到以设计图等比缩放的适配，如果设备与设计图相差太大时并不能达到很好的适配效果，需要单独出图，其他屏幕适配方案也是一样的。</p><p>github 地址：<a href="https://github.com/wildma/ScreenAdaptation" target="_blank" rel="noopener">ScreenAdaptation</a></p><p>参考资料：</p><ul><li><a href="https://blog.csdn.net/zhaokaiqiang1992/article/details/45419023" target="_blank" rel="noopener">Android屏幕适配全攻略(最权威的官方适配指导)</a><ul><li><a href="https://www.jianshu.com/p/ec5a1a30694b" target="_blank" rel="noopener">Android 屏幕适配：最全面的解决方案</a></li><li><a href="https://blog.csdn.net/lmj623565791/article/details/45460089" target="_blank" rel="noopener">Android 屏幕适配方案</a></li><li><a href="https://blog.csdn.net/fesdgasdgasdg/article/details/78108169" target="_blank" rel="noopener">Android dp方式的屏幕适配工具使用(Android Studio插件方式)</a></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> 适配 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 屏幕适配 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 友盟统计的集成与使用（包含多渠道打包配置）</title>
      <link href="/blog/2e8cc733.html"/>
      <url>/blog/2e8cc733.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>app上线后，一般公司都希望跟踪app在市场上的使用情况。包括新增用户、活跃用户、渠道信息、错误信息等，还有例如商城类的app，需要跟踪用户最喜欢浏览哪种类型的店铺或商品。这些都可以通过集成友盟统计来轻松实现。</p><p>（小提示：由于截的都是大图，可能显示比较模糊，需要查看清晰图片则鼠标点击图片放大即可）</p><h2 id="一、集成"><a href="#一、集成" class="headerlink" title="一、集成"></a>一、集成</h2><h3 id="1-1-获取Appkey"><a href="#1-1-获取Appkey" class="headerlink" title="1.1 获取Appkey"></a>1.1 获取Appkey</h3><p>集成友盟SDK之前，首先需要到<a href="http://www.umeng.com/" target="_blank" rel="noopener">友盟官网</a>注册并且添加新应用，获取Appkey（一般公司项目不需要自己申请账号，跟项目经理要即可）。每个应用对应的Appkey是唯一的，如下：<br><img src="2e8cc733/1.png" alt></p><h3 id="1-2-导入SDK"><a href="#1-2-导入SDK" class="headerlink" title="1.2 导入SDK"></a>1.2 导入SDK</h3><p>有两种方法：（本Demo中采用第二种方法）</p><ul><li><p>方法一：下载SDK，将解压出来的jar包复制到工程libs/目录下。<br>下载地址：<a href="http://mobile.umeng.com/custom_sdk" target="_blank" rel="noopener">http://mobile.umeng.com/custom_sdk</a><br>只需要下载Analytics SDK即可，如下：<br><img src="2e8cc733/2.png" alt></p></li><li><p>方法二：添加SDK在maven中心库的线上依赖<br>1、在app的builde.gradle中添加依赖</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*友盟统计需要的最新版本组件化基础库和统计SDK*/</span>compile <span class="token string">'com.umeng.sdk:common:latest.integration'</span>compile <span class="token string">'com.umeng.sdk:analytics:latest.integration'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果无法正常集成，则需要在项目的builde.gradle中添加如下配置：</p><pre class="line-numbers language-java"><code class="language-java">allprojects <span class="token punctuation">{</span>  repositories <span class="token punctuation">{</span>          <span class="token function">mavenCentral</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="1-3-在AndroidManifest-xml中添加权限、配置Appkey与渠道（Channel）"><a href="#1-3-在AndroidManifest-xml中添加权限、配置Appkey与渠道（Channel）" class="headerlink" title="1.3 在AndroidManifest.xml中添加权限、配置Appkey与渠道（Channel）"></a>1.3 在AndroidManifest.xml中添加权限、配置Appkey与渠道（Channel）</h3><p>1、添加权限</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>友盟统计所需权限<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>uses<span class="token operator">-</span>permission android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.permission.ACCESS_NETWORK_STATE"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>uses<span class="token operator">-</span>permission<span class="token operator">></span>    <span class="token operator">&lt;</span>uses<span class="token operator">-</span>permission android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.permission.ACCESS_WIFI_STATE"</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>uses<span class="token operator">-</span>permission android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.permission.INTERNET"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>uses<span class="token operator">-</span>permission<span class="token operator">></span>    <span class="token operator">&lt;</span>uses<span class="token operator">-</span>permission android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.permission.READ_PHONE_STATE"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>uses<span class="token operator">-</span>permission<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、配置Appkey</p><pre class="line-numbers language-java"><code class="language-java">        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>value的值填写你在友盟后台申请的应用Appkey<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>meta<span class="token operator">-</span>data android<span class="token operator">:</span>value<span class="token operator">=</span><span class="token string">"5a910933f29d986f35000064"</span> android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"UMENG_APPKEY"</span><span class="token operator">/</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>3、配置渠道<br>由于一般会有多个渠道，所以这里的渠道名称不能写死，应该设置成动态的，如下：</p><pre class="line-numbers language-java"><code class="language-java">        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>value的值填写渠道名称，例如yingyongbao。这里设置动态渠道名称变量<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>meta<span class="token operator">-</span>data android<span class="token operator">:</span>value<span class="token operator">=</span><span class="token string">"${UMENG_CHANNEL_VALUE}"</span> android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"UMENG_CHANNEL"</span><span class="token operator">/</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在app的builde.gradle中配置需要的渠道（这里只测试应用宝、豌豆荚、小米），对应上面的渠道名称变量。</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/*配置渠道*/</span>    productFlavors <span class="token punctuation">{</span>        yingyongbao <span class="token punctuation">{</span>            manifestPlaceholders <span class="token operator">=</span> <span class="token punctuation">[</span>UMENG_CHANNEL_VALUE<span class="token operator">:</span> <span class="token string">"yingyongbao"</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span>        wandoujia <span class="token punctuation">{</span>            manifestPlaceholders <span class="token operator">=</span> <span class="token punctuation">[</span>UMENG_CHANNEL_VALUE<span class="token operator">:</span> <span class="token string">"wandoujia"</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span>        xiaomi <span class="token punctuation">{</span>            manifestPlaceholders <span class="token operator">=</span> <span class="token punctuation">[</span>UMENG_CHANNEL_VALUE<span class="token operator">:</span> <span class="token string">"xiaomi"</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>完整AndroidManifest.xml如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span>manifest <span class="token keyword">package</span><span class="token operator">=</span><span class="token string">"com.wildma.umenganalytics"</span>        xmlns<span class="token operator">:</span>android<span class="token operator">=</span><span class="token string">"http://schemas.android.com/apk/res/android"</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>友盟统计所需权限<span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span>uses<span class="token operator">-</span>permission android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.permission.ACCESS_NETWORK_STATE"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>uses<span class="token operator">-</span>permission<span class="token operator">></span>  <span class="token operator">&lt;</span>uses<span class="token operator">-</span>permission android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.permission.ACCESS_WIFI_STATE"</span> <span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span>uses<span class="token operator">-</span>permission android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.permission.INTERNET"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>uses<span class="token operator">-</span>permission<span class="token operator">></span>  <span class="token operator">&lt;</span>uses<span class="token operator">-</span>permission android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.permission.READ_PHONE_STATE"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>uses<span class="token operator">-</span>permission<span class="token operator">></span>  <span class="token operator">&lt;</span>application      android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">".MyApplication"</span>      android<span class="token operator">:</span>allowBackup<span class="token operator">=</span><span class="token string">"true"</span>      android<span class="token operator">:</span>icon<span class="token operator">=</span><span class="token string">"@mipmap/ic_launcher"</span>      android<span class="token operator">:</span>label<span class="token operator">=</span><span class="token string">"@string/app_name"</span>      android<span class="token operator">:</span>supportsRtl<span class="token operator">=</span><span class="token string">"true"</span>      android<span class="token operator">:</span>theme<span class="token operator">=</span><span class="token string">"@style/AppTheme"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>activity android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">".MainActivity"</span><span class="token operator">></span>          <span class="token operator">&lt;</span>intent<span class="token operator">-</span>filter<span class="token operator">></span>              <span class="token operator">&lt;</span>action android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.intent.action.MAIN"</span><span class="token operator">/</span><span class="token operator">></span>              <span class="token operator">&lt;</span>category android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.intent.category.LAUNCHER"</span><span class="token operator">/</span><span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token operator">/</span>intent<span class="token operator">-</span>filter<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>activity<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>友盟统计配置Appkey与Channel<span class="token operator">--</span><span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>value的值填写你在友盟后台申请的应用Appkey<span class="token operator">--</span><span class="token operator">></span>      <span class="token operator">&lt;</span>meta<span class="token operator">-</span>data android<span class="token operator">:</span>value<span class="token operator">=</span><span class="token string">"5a910933f29d986f35000064"</span> android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"UMENG_APPKEY"</span><span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>value的值填写渠道名称，例如yingyongbao。这里设置动态渠道变量<span class="token operator">--</span><span class="token operator">></span>      <span class="token operator">&lt;</span>meta<span class="token operator">-</span>data android<span class="token operator">:</span>value<span class="token operator">=</span><span class="token string">"${UMENG_CHANNEL_VALUE}"</span> android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"UMENG_CHANNEL"</span><span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>application<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>manifest<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>完整app的builde.gradle如下：</p><pre class="line-numbers language-java"><code class="language-java">apply plugin<span class="token operator">:</span> <span class="token string">'com.android.application'</span>android <span class="token punctuation">{</span>  compileSdkVersion <span class="token number">26</span>  buildToolsVersion <span class="token string">"26.0.2"</span>  defaultConfig <span class="token punctuation">{</span>      applicationId <span class="token string">"com.wildma.umenganalytics"</span>      minSdkVersion <span class="token number">14</span>      targetSdkVersion <span class="token number">26</span>      versionCode <span class="token number">1</span>      versionName <span class="token string">"1.0"</span>      testInstrumentationRunner <span class="token string">"android.support.test.runner.AndroidJUnitRunner"</span>  <span class="token punctuation">}</span>  buildTypes <span class="token punctuation">{</span>      release <span class="token punctuation">{</span>          minifyEnabled <span class="token boolean">false</span>          proguardFiles <span class="token function">getDefaultProguardFile</span><span class="token punctuation">(</span><span class="token string">'proguard-android.txt'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'proguard-rules.pro'</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//签名信息配置</span>  signingConfigs <span class="token punctuation">{</span>      release <span class="token punctuation">{</span>          storeFile <span class="token function">file</span><span class="token punctuation">(</span><span class="token string">"./keystore/UMengAnalyticsKeystore.jks"</span><span class="token punctuation">)</span>          keyAlias <span class="token string">"UMengAnalyticsKeystore"</span>          storePassword <span class="token string">"123456"</span>          keyPassword <span class="token string">"123456"</span>      <span class="token punctuation">}</span>      debug <span class="token punctuation">{</span>          storeFile <span class="token function">file</span><span class="token punctuation">(</span><span class="token string">"./keystore/debug.keystore"</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/*配置渠道*/</span>  productFlavors <span class="token punctuation">{</span>      yingyongbao <span class="token punctuation">{</span>          manifestPlaceholders <span class="token operator">=</span> <span class="token punctuation">[</span>UMENG_CHANNEL_VALUE<span class="token operator">:</span> <span class="token string">"yingyongbao"</span><span class="token punctuation">]</span>      <span class="token punctuation">}</span>      wandoujia <span class="token punctuation">{</span>          manifestPlaceholders <span class="token operator">=</span> <span class="token punctuation">[</span>UMENG_CHANNEL_VALUE<span class="token operator">:</span> <span class="token string">"wandoujia"</span><span class="token punctuation">]</span>      <span class="token punctuation">}</span>      xiaomi <span class="token punctuation">{</span>          manifestPlaceholders <span class="token operator">=</span> <span class="token punctuation">[</span>UMENG_CHANNEL_VALUE<span class="token operator">:</span> <span class="token string">"xiaomi"</span><span class="token punctuation">]</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>dependencies <span class="token punctuation">{</span>  compile <span class="token function">fileTree</span><span class="token punctuation">(</span>dir<span class="token operator">:</span> <span class="token string">'libs'</span><span class="token punctuation">,</span> include<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'*.jar'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token function">androidTestCompile</span><span class="token punctuation">(</span><span class="token string">'com.android.support.test.espresso:espresso-core:2.2.2'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      exclude group<span class="token operator">:</span> <span class="token string">'com.android.support'</span><span class="token punctuation">,</span> module<span class="token operator">:</span> <span class="token string">'support-annotations'</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  compile <span class="token string">'com.android.support:appcompat-v7:26.0.0-alpha1'</span>  testCompile <span class="token string">'junit:junit:4.12'</span>  <span class="token comment" spellcheck="true">/*友盟统计需要的最新版本组件化基础库和统计SDK*/</span>  compile <span class="token string">'com.umeng.sdk:common:latest.integration'</span>  compile <span class="token string">'com.umeng.sdk:analytics:latest.integration'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="1-4-添加初始化方法"><a href="#1-4-添加初始化方法" class="headerlink" title="1.4 添加初始化方法"></a>1.4 添加初始化方法</h3><p>在项目工程的自定义application中的onCreate方法中添加以下方法：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyApplication</span> <span class="token keyword">extends</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * 初始化common库         * 参数1:上下文，必须的参数，不能为空         * 参数2:友盟 app key，非必须参数，如果Manifest文件中已配置app key，该参数可以传空，则使用Manifest中配置的app key，否则该参数必须传入         * 参数3:友盟 channel，非必须参数，如果Manifest文件中已配置channel，该参数可以传空，则使用Manifest中配置的channel，否则该参数必须传入，channel命名请详见channel渠道命名规范         * 参数4:设备类型，必须参数，传参数为UMConfigure.DEVICE_TYPE_PHONE则表示手机；传参数为UMConfigure.DEVICE_TYPE_BOX则表示盒子；默认为手机         * 参数5:Push推送业务的secret，需要集成Push功能时必须传入Push的secret，否则传空         */</span>        <span class="token comment" spellcheck="true">//如果AndroidManifest.xml清单配置中没有设置appkey和channel，则可以在这里设置</span>        <span class="token comment" spellcheck="true">//        UMConfigure.init(this, "58edcfeb310c93091c000be2", "Umeng", UMConfigure.DEVICE_TYPE_PHONE, "1fe6a20054bcef865eeb0991ee84525b");</span>        UMConfigure<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> UMConfigure<span class="token punctuation">.</span>DEVICE_TYPE_PHONE<span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过上面的步骤，友盟统计就已经集成好了，下面来看看它各种统计的使用。</p><h2 id="二、使用"><a href="#二、使用" class="headerlink" title="二、使用"></a>二、使用</h2><h3 id="2-1-Session统计"><a href="#2-1-Session统计" class="headerlink" title="2.1 Session统计"></a>2.1 Session统计</h3><p>即启动数据的统计（包括新增用户、活跃用户、启动次数、使用时长等基本数据）</p><p>需要在每个Activity的onResume方法中调用 MobclickAgent.onResume(Context),<br>onPause方法中调用 MobclickAgent.onPause(Context)，如下：</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onResume</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onResume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        MobclickAgent<span class="token punctuation">.</span><span class="token function">onResume</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onPause</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onPause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        MobclickAgent<span class="token punctuation">.</span><span class="token function">onPause</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>确保在所有的Activity中都调用 MobclickAgent.onResume() 和onPause()方法。</p></li><li><p>如果Activity之间有继承或者控制关系请不要同时在父和子Activity中重复添加nPause和nResume方法，否则会造成重复统计。例如在BaseActivity中添加过，则它的子类就不需要添加了。</p></li><li><p>当应用在后台运行超过30秒（默认）再回到前端，将被认为是两个独立的session(启动)，例如用户回到home，或进入其他程序，经过一段时间后再返回之前的应用。可通过接口：setSessionContinueMillis(long interval) 来自定义这个间隔（参数单位为毫秒）。</p></li><li><p>如果开发者调用kill或者exit之类的方法杀死进程，请务必在此之前调用onKillProcess(Context context)方法，用来保存统计数据。</p></li></ul><p>安装app启动后。在友盟后台就可以看到统计的数据了。如下：</p><p>新增用户、启动次数、日活等数据：<br><img src="2e8cc733/3.png" alt><br>渠道分析数据：<br><img src="2e8cc733/4.png" alt></p><h3 id="2-2-自定义事件统计"><a href="#2-2-自定义事件统计" class="headerlink" title="2.2 自定义事件统计"></a>2.2 自定义事件统计</h3><p>自定义事件可以实现在应用程序中埋点来统计用户的点击行为。例如我们的应用是商城类的，就需要统计用户是喜欢进入“nike”店铺，还是“new banlance”店铺。自定义事件目前包括”计数事件”和”计算事件”，这里主要讲下计数事件。</p><p>1、首先需要在友盟后台添加自定义事件：设置-事件-手工添加-添加事件。如下：<br><img src="2e8cc733/5.png" alt></p><p>2、在需要监听自定义事件的地方添加代码，如下模拟点击进入”nike“店铺。<br>第二个参数为当前统计的事件ID，需要与友盟后台设置的事件ID一致（即上图的事件ID）。</p><pre class="line-numbers language-java"><code class="language-java">MobclickAgent<span class="token punctuation">.</span><span class="token function">onEvent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"nike"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//参数二为当前统计的事件ID</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3、运行app，触发该事件后。在友盟后台就可以看到统计的数据了。如下：<br>其中消息数量即为事件被触发的次数。<br><img src="2e8cc733/6.png" alt></p><h3 id="2-3-错误统计"><a href="#2-3-错误统计" class="headerlink" title="2.3 错误统计"></a>2.3 错误统计</h3><p>错误分析是友盟为移动开发者提供的Crash收集和分析工具，帮助开发者监测App在移动设备上的运行状况，及时发现并解决错误，提升App的稳定性。</p><p>Android统计SDK从V4.6版本开始内建错误统计，不需要开发者再手动集成。<br>SDK通过Thread.UncaughtExceptionHandler 捕获程序崩溃日志，并在程序下次启动时发送到服务器。 如不需要错误统计功能，可通过此方法关闭</p><pre class="line-numbers language-java"><code class="language-java">MobclickAgent<span class="token punctuation">.</span><span class="token function">setCatchUncaughtExceptions</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果开发者自己捕获了错误，需要上传到【友盟+】服务器可以调用下面方法：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">reportError</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> String error<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//或  </span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">reportError</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> Throwable e<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>现在我在demo中模拟一次错误，如下：</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * 模拟错误     * @param view     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createError</span><span class="token punctuation">(</span>View view<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再到友盟后台查看错误，如下：<br><img src="2e8cc733/7.png" alt></p><h3 id="2-4-其他统计"><a href="#2-4-其他统计" class="headerlink" title="2.4 其他统计"></a>2.4 其他统计</h3><p>上面三个统计是比较常用的统计，还有很多统计，例如账号统计、页面统计等就不一一列举了。有需求的可以参考<a href="http://dev.umeng.com/sdk_integate/android_sdk/analytics_doc#1" target="_blank" rel="noopener">友盟统计集成文档</a></p><p>本文demo源码地址：<a href="https://github.com/wildma/UMengAnalytics" target="_blank" rel="noopener">https://github.com/wildma/UMengAnalytics</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> 第三方集成 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 友盟统计 </tag>
            
            <tag> 多渠道打包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>带你通俗易懂的理解——线程、多线程与线程池</title>
      <link href="/blog/7ac296bb.html"/>
      <url>/blog/7ac296bb.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、进程与线程"><a href="#一、进程与线程" class="headerlink" title="一、进程与线程"></a>一、进程与线程</h2><ul><li><strong>进程</strong>：进程就是正在执行的程序。</li><li><strong>线程</strong>：是程序执行的一条路径, 一个进程中可以包含多条线程。<br>通俗理解：例如你打开微信就是打开一个进程，在微信里面和好友视频聊天就是开启了一条线程。</li><li><strong>两者之间的关系</strong>：<br>一个进程里面可以有多条线程，至少有一条线程。<br>一条线程一定会在一个进程里面。</li></ul><p>关于进程与线程的讲解，这篇文章讲的挺好的–&gt;<a href="http://www.ruanyifeng.com/blog/2013/04/processes_and_threads.html" target="_blank" rel="noopener">进程与线程的一个简单解释</a></p><h2 id="二、创建线程的三种方式"><a href="#二、创建线程的三种方式" class="headerlink" title="二、创建线程的三种方式"></a>二、创建线程的三种方式</h2><h3 id="2-1-继承Thread"><a href="#2-1-继承Thread" class="headerlink" title="2.1 继承Thread"></a>2.1 继承Thread</h3><p>1、定义一个类MyThread继承Thread，并重写run方法。<br>2、将要执行的代码写在run方法中。<br>3、创建该类的实例，并调用start()方法开启线程。<br>代码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> String TAG <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3、创建该类的实例，并调用start()方法开启线程。</span>        MyThread myThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        myThread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//1、定义一个类MyThread继承Thread，并重写run方法。</span>    <span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//2、将执行的代码写在run方法中。</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"线程名字:"</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">+</span> <span class="token string">"  i="</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-实现Runnable接口"><a href="#2-2-实现Runnable接口" class="headerlink" title="2.2 实现Runnable接口"></a>2.2 实现Runnable接口</h3><p>1、定义一个类MyRunnable实现Runnable接口，并重写run方法。<br>2、将要执行的代码写在run方法中。<br>3、创建Thread对象, 传入MyRunnable的实例，并调用start()方法开启线程。<br>代码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> String TAG <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3、创建Thread对象, 传入MyRunnable的实例，并调用start()方法开启线程。</span>        Thread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyRunnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//1、定义一个类MyRunnable实现Runnable接口，并重写run方法。</span>    <span class="token keyword">class</span> <span class="token class-name">MyRunnable</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//2、将执行的代码写在run方法中。</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"线程名字:"</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"  i="</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-实现Callable接口"><a href="#2-3-实现Callable接口" class="headerlink" title="2.3 实现Callable接口"></a>2.3 实现Callable接口</h3><p>Callable是类似于Runnable的接口，实现Callable接口的类和实现Runnable的类都是可被其它线程执行的任务。</p><p>1、自定义一个类MyCallable实现Callable接口，并重写call()方法<br>2、将要执行的代码写在call()方法中<br>3、创建线程池对象，调用submit()方法执行MyCallable任务，并返回Future对象<br>4、调用Future对象的get()方法获取call()方法执行完后的值<br>代码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> String TAG <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3、创建线程池对象，调用submit()方法执行MyCallable任务，并返回Future对象</span>        ExecutorService pool <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newSingleThreadExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Future<span class="token operator">&lt;</span>Integer<span class="token operator">></span> f1 <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyCallable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4、调用Future对象的get()方法获取call()方法执行完后的值</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"sum="</span> <span class="token operator">+</span> f1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ExecutionException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//关闭线程池</span>        pool<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//1、自定义一个类MyCallable实现Callable接口，并重写call()方法</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyCallable</span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> Integer <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//2、将要执行的代码写在call()方法中</span>            <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                sum <span class="token operator">+=</span> i<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> sum<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、创建线程的三种方式对比"><a href="#三、创建线程的三种方式对比" class="headerlink" title="三、创建线程的三种方式对比"></a>三、创建线程的三种方式对比</h2><h3 id="3-1-继承Thread类与实现Runnable接口的区别"><a href="#3-1-继承Thread类与实现Runnable接口的区别" class="headerlink" title="3.1 继承Thread类与实现Runnable接口的区别"></a>3.1 继承Thread类与实现Runnable接口的区别</h3><p>我们都知道java支持单继承，多实现。实现Runnable接口还可以继承其他类，而使用继承Thread就不能继承其他类了。所以当你想创建一个线程又希望继承其他类的时候就该选择实现Runnable接口的方式。</p><h3 id="3-2-实现Callable接口与Runnable接口的区别"><a href="#3-2-实现Callable接口与Runnable接口的区别" class="headerlink" title="3.2 实现Callable接口与Runnable接口的区别"></a>3.2 实现Callable接口与Runnable接口的区别</h3><p>Callable执行的方法是call() ，而Runnable执行的方法是run()。<br> call() 方法有返回值还能抛出异常， run() 方法则没有没有返回值，也不能抛出异常。</p><h2 id="四、多线程"><a href="#四、多线程" class="headerlink" title="四、多线程"></a>四、多线程</h2><h3 id="4-1-概念"><a href="#4-1-概念" class="headerlink" title="4.1 概念"></a>4.1 概念</h3><p>一个进程中开启了不止一个线程。</p><h3 id="4-2-多线程的优缺点"><a href="#4-2-多线程的优缺点" class="headerlink" title="4.2 多线程的优缺点"></a>4.2 多线程的优缺点</h3><ul><li><p><strong>优点</strong><br>1、提高CPU的使用率<br>例如朋友圈发表图片，当你上传9张图片的时候，如果开启一个线程用同步的方式一张张上传图片，假设每次上传图片的线程只占用了CPU 1%d的资源，剩下的99%资源就浪费了。但是如果你开启9个线程同时上传图片，CPU就可以使用9%的资源了。<br>2、提高程序的工作效率<br>还是拿朋友圈发表图片来说，假设开启一个线程上传一张图片的时间是1秒，那么同步的方式上传9张就需要9秒，但是你开启9个线程同时上传图片，那么就只需要1秒就完成了。</p></li><li><p><strong>缺点</strong><br>1、如果有大量的线程,会影响性能,因为CPU需要在它们之间切换。<br>2、更多的线程需要更多的内存空间。<br>3、多线程操作可能会出现线程安全或者死锁等问题。</p></li></ul><h3 id="4-3-多线程并行和并发的区别"><a href="#4-3-多线程并行和并发的区别" class="headerlink" title="4.3 多线程并行和并发的区别"></a>4.3 多线程并行和并发的区别</h3><ul><li><p><strong>概念</strong><br>并行：多个处理器或者多核处理器同时执行多个不同的任务。<br>并发：一个处理器处理多个任务。</p></li><li><p><strong>打个比喻</strong><br>并行就是一个人用他的左手喂女儿吃饭，同时用右手喂儿子吃饭。<br>并发就是一个人先喂女儿吃一口饭，接着喂儿子吃一口，然后再喂女儿吃一口，轮流喂。</p></li><li><p><strong>举个多线程并发操作同一数据出现线程安全的例子</strong><br>利用多线程上传9张图片，并提示还剩几张图片未上传。代码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> String TAG <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//开启2条线程上传图片</span>      MyRunnable myRunnable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyRunnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>myRunnable<span class="token punctuation">,</span> <span class="token string">"线程1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>myRunnable<span class="token punctuation">,</span> <span class="token string">"线程2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyRunnable</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>      <span class="token keyword">private</span> <span class="token keyword">int</span> imgNum <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//图片数量</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>imgNum <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token keyword">break</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>              <span class="token keyword">try</span> <span class="token punctuation">{</span>                  Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//模拟上传一张图片需要1秒钟的时间</span>              <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>              Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"正在上传图片...，还剩"</span> <span class="token operator">+</span> imgNum<span class="token operator">--</span> <span class="token operator">+</span> <span class="token string">"张图片未上传"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>打印结果如下：</p><p><img src="7ac296bb/1.jpg" alt><br>由图可知，图片数量出现了负数，显然是错误的。</p><p>原因：<br>出现这种错误的原因是有多个线程在操作共享的数据。即一个线程在操作共享数据的过程中CPU切换到其他线程又对该数据进行操作，这就是所谓的多线程并发。</p><p>解决：<br>把操作数据的那段代码用synchronized进行同步, 这样就能保证在同一时刻只能有一个线程能够访问。<br>代码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> String TAG <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//开启2条线程上传图片</span>        MyRunnable myRunnable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyRunnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>myRunnable<span class="token punctuation">,</span> <span class="token string">"线程1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>myRunnable<span class="token punctuation">,</span> <span class="token string">"线程2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyRunnable</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> imgNum <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//图片数量</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>MyRunnable<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//加上synchronized进行同步，保证在同一时刻只能有一个线程能够访问。</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>imgNum <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//模拟上传一张图片需要1秒钟的时间</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"正在上传图片...，还剩"</span> <span class="token operator">+</span> imgNum<span class="token operator">--</span> <span class="token operator">+</span> <span class="token string">"张图片未上传"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打印结果如下：</p><p><img src="7ac296bb/2.jpg" alt></p><h2 id="五、线程池"><a href="#五、线程池" class="headerlink" title="五、线程池"></a>五、线程池</h2><h3 id="5-1-关于线程池"><a href="#5-1-关于线程池" class="headerlink" title="5.1 关于线程池"></a>5.1 关于线程池</h3><p>前面举的朋友圈发表图片的多线程例子中，为了提高CPU的使用率和程序的工作效率就需要创建9个线程来上传图片。但是线程的创建和销毁是非常耗CPU和内存的，因为它涉及到要与操作系统进行交互。这样就可能导致创建与销毁线程的开销比实际业务还大，而线程池就能很好的解决这些问题。线程池里的每一个线程结束后，并不会销毁（可以设置超时销毁），而是回到线程池中成为空闲状态，等待下一个对象来使用。</p><h3 id="5-2-使用线程池的优点"><a href="#5-2-使用线程池的优点" class="headerlink" title="5.2 使用线程池的优点"></a>5.2 使用线程池的优点</h3><p>1、减少创建与销毁线程带来的性能开销。<br>2、可控制最大并发线程数，避免过多资源竞争而导致系统内存消耗完。<br>3、能更好的控制线程的开启与回收，并且能定时执行任务。</p><h3 id="5-3-线程池中重要的几个类"><a href="#5-3-线程池中重要的几个类" class="headerlink" title="5.3 线程池中重要的几个类"></a>5.3 线程池中重要的几个类</h3><ul><li><strong>Executor</strong>：java中线程池的顶级接口，可以称它为一个执行器，通过查看源码也知道，他只有一个简单的方法execute(Runnable command)，就是用来执行提交的任务。源码如下：<br>【Executor.java】<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Executor</span> <span class="token punctuation">{</span>  <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span>Runnable command<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><strong>ExecutorService</strong>：Executor的子类，也是真正的线程池接口。它提供了提交任务和关闭线程池等方法。调用submit方法提交任务还可以返回一个Future对象，利用该对象可以了解任务执行情况，获得任务的执行结果或取消任务。</li><li><strong>Executors</strong>：由于线程池配置比较复杂，自己配置的线程池可能性能不是最好的。Executors就是用来方便创建各种常用线程池的工具类。</li><li><strong>ThreadPoolExecutor</strong>：ExecutorService的默认实现，Executors创建各种线程池的时候内部其实就是调用了ThreadPoolExecutor的构造方法。下面通过查看源码验证。<br>例如随便创建一个线程池：<pre class="line-numbers language-java"><code class="language-java">ExecutorService newCachedThreadPool <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>点击newCachedThreadPool()进去，里面确实调用了ThreadPoolExecutor的构造方法，如下：<br>【Executor.java】<pre class="line-numbers language-java"><code class="language-java">  <span class="token keyword">public</span> <span class="token keyword">static</span> ExecutorService <span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">,</span>                                    60L<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span>                                    <span class="token keyword">new</span> <span class="token class-name">SynchronousQueue</span><span class="token operator">&lt;</span>Runnable<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="5-4-ThreadPoolExecutor构造函数参数说明"><a href="#5-4-ThreadPoolExecutor构造函数参数说明" class="headerlink" title="5.4 ThreadPoolExecutor构造函数参数说明"></a>5.4 ThreadPoolExecutor构造函数参数说明</h3><p>下面从源码中拿一个参数最完整的来讲解，如下：<br>【ThreadPoolExecutor.java】</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token function">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token keyword">int</span> corePoolSize<span class="token punctuation">,</span>                              <span class="token keyword">int</span> maximumPoolSize<span class="token punctuation">,</span>                              <span class="token keyword">long</span> keepAliveTime<span class="token punctuation">,</span>                              TimeUnit unit<span class="token punctuation">,</span>                              BlockingQueue<span class="token operator">&lt;</span>Runnable<span class="token operator">></span> workQueue<span class="token punctuation">,</span>                              ThreadFactory threadFactory<span class="token punctuation">,</span>                              RejectedExecutionHandler handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>corePoolSize</strong>：核心线程数，如果运行的线程数少于corePoolSize，当有新的任务过来时会创建新的线程来执行这个任务，即使线程池中有其他空闲的线程。</li><li><strong>maximumPoolSize</strong>：线程池中允许的最大线程数。</li><li><strong>keepAliveTime</strong>：如果线程数多于核心线程数，那么这些多出来的线程如果空闲时间超过keepAliveTime将会被终止。</li><li><strong>unit</strong>：keepAliveTime参数的时间单位。</li><li><strong>workQueue</strong>：任务队列，通过线程池的execute方法会将任务Runnable存储在队列中。</li><li><strong>threadFactory</strong>：线程工厂，用来创建新线程。</li><li><strong>handler</strong>：添加任务出错时的策略捕获器，默认是ThreadPoolExecutor.AbortPolicy ，即添加任务出错就直接抛出异常 。</li></ul><h3 id="5-5-四种线程池"><a href="#5-5-四种线程池" class="headerlink" title="5.5 四种线程池"></a>5.5 四种线程池</h3><ul><li><strong>newFixedThreadPool</strong>：创建固定大小的线程池，这样可以控制线程最大并发数，超出的线程会在队列中等待。如果线程池中的某个线程由于异常而结束，线程池则会再补充一条新线程。<br>例子：创建线程数为3的线程池<pre class="line-numbers language-java"><code class="language-java">      ExecutorService newFixedThreadPool <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">final</span> <span class="token keyword">int</span> finalI <span class="token operator">=</span> i<span class="token punctuation">;</span>          newFixedThreadPool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token annotation punctuation">@Override</span>              <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token keyword">try</span> <span class="token punctuation">{</span>                      Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"线程名字:"</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"  i="</span> <span class="token operator">+</span> finalI<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>打印结果：</li></ul><p><img src="7ac296bb/3.jpg" alt><br>由打印结果可知，10个任务始终在3个线程中执行。</p><ul><li><p><strong>newSingleThreadExecutor</strong>：创建一个单线程的线程池，即这个线程池永远只有一个线程在运行，这样能保证所有任务按指定顺序来执行。如果这个线程异常结束，那么会有一个新的线程来替代它。<br>例子：</p><pre class="line-numbers language-java"><code class="language-java">      ExecutorService newSingleThreadExecutor <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newSingleThreadExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">final</span> <span class="token keyword">int</span> finalI <span class="token operator">=</span> i<span class="token punctuation">;</span>          newSingleThreadExecutor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token annotation punctuation">@Override</span>              <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token keyword">try</span> <span class="token punctuation">{</span>                      Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"线程名字:"</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"  i="</span> <span class="token operator">+</span> finalI<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打印结果：<br><img src="7ac296bb/4.jpg" alt><br>由打印结果可知，10个任务始终在1个线程中执行。</p></li><li><p><strong>newCachedThreadPool</strong>：创建带有缓存的线程池，在执行新的任务时，当线程池中有之前创建的可用线程就重用之前的线程，否则就新建一条线程。如果线程池中的线程在60秒未被使用，就会将它从线程池中移除。<br>例子：</p><pre class="line-numbers language-java"><code class="language-java">      ExecutorService newCachedThreadPool <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">final</span> <span class="token keyword">int</span> finalI <span class="token operator">=</span> i<span class="token punctuation">;</span>          newCachedThreadPool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token annotation punctuation">@Override</span>              <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"线程名字:"</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"  i="</span> <span class="token operator">+</span> finalI<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="7ac296bb/5.jpg" alt><br>由打印结果可知，线程1出现了很多次，说明有重用之前创建的线程。</p></li><li><p><strong>newScheduledThreadPool</strong>：创建定时和周期性执行的线程池。</p><pre class="line-numbers language-java"><code class="language-java">      ScheduledExecutorService newScheduledThreadPool <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newScheduledThreadPool</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/**       * 延迟2秒执行任务       */</span>      newScheduledThreadPool<span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token annotation punctuation">@Override</span>          <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"线程名字:"</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"定时任务"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/**       * 延迟1秒后每2秒执行一次任务       */</span>      newScheduledThreadPool<span class="token punctuation">.</span><span class="token function">scheduleAtFixedRate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token annotation punctuation">@Override</span>          <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"线程名字:"</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"周期性任务"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><img src="7ac296bb/6.jpg" alt><br>由打印结果可知，定时任务是2秒后执行任务，周期性任务是延迟1秒后每2秒执行一次任务。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> Java 并发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Thread </tag>
            
            <tag> 线程 </tag>
            
            <tag> 多线程 </tag>
            
            <tag> 线程池 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一步一步教你集成腾讯浏览服务 X5 内核</title>
      <link href="/blog/71dca980.html"/>
      <url>/blog/71dca980.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>腾讯浏览服务（TBS，Tencent Browsing Service）整合腾讯底层浏览技术和腾讯平台资源及能力，提供整体浏览服务解决方案。（来自-<a href="https://x5.tencent.com/tbs/product/tbs.html" target="_blank" rel="noopener">腾讯浏览服务</a>） 通俗点讲就是系统webview的增强版。我在项目中选择它来替代系统webview的主要原因是：</p><ol><li>速度快：相比系统webview的网页打开速度有30+%的提升；</li><li>省流量：使用云端优化技术使流量节省20+%；</li><li>解决系统webview播放视频不能全屏的问题；<br>其他更多优势见-<a href="https://x5.tencent.com/tbs/guide/sdkInit.html" target="_blank" rel="noopener">TBS(腾讯浏览服务)的优势</a></li></ol><h2 id="一、集成"><a href="#一、集成" class="headerlink" title="一、集成"></a>一、集成</h2><h3 id="1-1-导入jar包"><a href="#1-1-导入jar包" class="headerlink" title="1.1 导入jar包"></a>1.1 导入jar包</h3><p>（1）下载SDK，下载地址：<a href="https://x5.tencent.com/tbs/sdk.html" target="_blank" rel="noopener">https://x5.tencent.com/tbs/sdk.html</a> （选择第一个完整版即可-“Android SDK（3.5完整版）”）<br>（2）将下载的 SDK中的 jar 包放到工程的libs目录下，如图：<br><img src="71dca980/1.jpg" alt></p><h3 id="1-2-导入so库"><a href="#1-2-导入so库" class="headerlink" title="1.2 导入so库"></a>1.2 导入so库</h3><p>（1）下载Demo, 下载地址：<a href="https://x5.tencent.com/tbs/sdk.html" target="_blank" rel="noopener">https://x5.tencent.com/tbs/sdk.html</a> （选择“SDK接入示例-Android Studio”下载即可）<br>（2）将下载的Demo中的so库-liblbs.so拷贝到项目相应目录下，如图：</p><p><img src="71dca980/2.jpg" alt></p><p>x5暂时不提供64位so文件，为了保证64位手机能正常加载x5内核。需要在app.build文件的defaultConfig{}中添加如下配置：</p><pre class="line-numbers language-java"><code class="language-java">        ndk <span class="token punctuation">{</span>            abiFilters <span class="token string">"armeabi"</span><span class="token punctuation">,</span> <span class="token string">"armeabi-v7a"</span><span class="token punctuation">,</span> <span class="token string">"x86"</span><span class="token punctuation">,</span> <span class="token string">"mips"</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>配置后如图：</p><p><img src="71dca980/3.jpg" alt></p><h3 id="1-3-AndroidManifest-xml里加入权限"><a href="#1-3-AndroidManifest-xml里加入权限" class="headerlink" title="1.3 AndroidManifest.xml里加入权限"></a>1.3 AndroidManifest.xml里加入权限</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span>uses<span class="token operator">-</span>permission android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.permission.WRITE_EXTERNAL_STORAGE"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>uses<span class="token operator">-</span>permission android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.permission.ACCESS_NETWORK_STATE"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>uses<span class="token operator">-</span>permission android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.permission.ACCESS_WIFI_STATE"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>uses<span class="token operator">-</span>permission android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.permission.INTERNET"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>uses<span class="token operator">-</span>permission android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.permission.READ_PHONE_STATE"</span> <span class="token operator">/</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-4-在Application中预加载X5内核"><a href="#1-4-在Application中预加载X5内核" class="headerlink" title="1.4 在Application中预加载X5内核"></a>1.4 在Application中预加载X5内核</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAplication</span> <span class="token keyword">extends</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">initX5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 初始化X5     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">initX5</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//x5內核初始化回调</span>        QbSdk<span class="token punctuation">.</span>PreInitCallback cb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QbSdk<span class="token punctuation">.</span>PreInitCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onViewInitFinished</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> arg0<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>                <span class="token comment" spellcheck="true">//x5內核初始化完成的回调，为true表示x5内核加载成功，否则表示x5内核加载失败，会自动切换到系统内核。</span>                Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"app"</span><span class="token punctuation">,</span> <span class="token string">" onViewInitFinished is "</span> <span class="token operator">+</span> arg0<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCoreInitFinished</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//x5内核初始化接口</span>        QbSdk<span class="token punctuation">.</span><span class="token function">initX5Environment</span><span class="token punctuation">(</span><span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cb<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-5-配置兼容视频播放"><a href="#1-5-配置兼容视频播放" class="headerlink" title="1.5 配置兼容视频播放"></a>1.5 配置兼容视频播放</h3><p>需要全屏播放视频或者享受页面视频的完整播放体验，则需要在页面的Activity添加如下配置android:configChanges=”orientation|screenSize|keyboardHidden”，如下：</p><pre class="line-numbers language-java"><code class="language-java">        <span class="token operator">&lt;</span>activity            android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">".MainActivity"</span>            android<span class="token operator">:</span>configChanges<span class="token operator">=</span><span class="token string">"orientation|keyboardHidden|screenSize"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>intent<span class="token operator">-</span>filter<span class="token operator">></span>                <span class="token operator">&lt;</span>action android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.intent.action.MAIN"</span><span class="token operator">/</span><span class="token operator">></span>                <span class="token operator">&lt;</span>category android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.intent.category.LAUNCHER"</span><span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>intent<span class="token operator">-</span>filter<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>activity<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、使用（与原生Webview基本差不多）"><a href="#二、使用（与原生Webview基本差不多）" class="headerlink" title="二、使用（与原生Webview基本差不多）"></a>二、使用（与原生Webview基本差不多）</h2><p>（1）【activity_main.xml】</p><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span>RelativeLayout    android<span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">"@+id/activity_main"</span>    xmlns<span class="token operator">:</span>android<span class="token operator">=</span><span class="token string">"http://schemas.android.com/apk/res/android"</span>    xmlns<span class="token operator">:</span>tools<span class="token operator">=</span><span class="token string">"http://schemas.android.com/tools"</span>    android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"match_parent"</span>    android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"match_parent"</span>    android<span class="token operator">:</span>paddingBottom<span class="token operator">=</span><span class="token string">"@dimen/activity_vertical_margin"</span>    android<span class="token operator">:</span>paddingLeft<span class="token operator">=</span><span class="token string">"@dimen/activity_horizontal_margin"</span>    android<span class="token operator">:</span>paddingRight<span class="token operator">=</span><span class="token string">"@dimen/activity_horizontal_margin"</span>    android<span class="token operator">:</span>paddingTop<span class="token operator">=</span><span class="token string">"@dimen/activity_vertical_margin"</span>    tools<span class="token operator">:</span>context<span class="token operator">=</span><span class="token string">"com.wildma.wildmax5web.MainActivity"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>com<span class="token punctuation">.</span>tencent<span class="token punctuation">.</span>smtt<span class="token punctuation">.</span>sdk<span class="token punctuation">.</span>WebView        android<span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">"@+id/webview"</span>        android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"fill_parent"</span>        android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"fill_parent"</span>        android<span class="token operator">:</span>paddingLeft<span class="token operator">=</span><span class="token string">"5dp"</span>        android<span class="token operator">:</span>paddingRight<span class="token operator">=</span><span class="token string">"5dp"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>RelativeLayout<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（2）【MainActivity.java】</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>wildma<span class="token punctuation">.</span>wildmax5web<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Bundle<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>v7<span class="token punctuation">.</span>app<span class="token punctuation">.</span>AppCompatActivity<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>tencent<span class="token punctuation">.</span>smtt<span class="token punctuation">.</span>sdk<span class="token punctuation">.</span>WebView<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>tencent<span class="token punctuation">.</span>smtt<span class="token punctuation">.</span>sdk<span class="token punctuation">.</span>WebViewClient<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> WebView mWebView<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>        mWebView <span class="token operator">=</span> <span class="token punctuation">(</span>com<span class="token punctuation">.</span>tencent<span class="token punctuation">.</span>smtt<span class="token punctuation">.</span>sdk<span class="token punctuation">.</span>WebView<span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>webview<span class="token punctuation">)</span><span class="token punctuation">;</span>        mWebView<span class="token punctuation">.</span><span class="token function">getSettings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setJavaScriptEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 支持js</span>        mWebView<span class="token punctuation">.</span><span class="token function">setWebViewClient</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WebViewClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//防止加载网页时调起系统浏览器</span>        mWebView<span class="token punctuation">.</span><span class="token function">loadUrl</span><span class="token punctuation">(</span><span class="token string">"http://mp.weixin.qq.com/s/6QiZXzpUSuJKjoIoKovgtg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、辨别是否使用x5webview的方法"><a href="#三、辨别是否使用x5webview的方法" class="headerlink" title="三、辨别是否使用x5webview的方法"></a>三、辨别是否使用x5webview的方法</h2><p>（1）显示网页文字时，可通过长按选择文字的标识判断，如下水滴状选择效果是x5webview 的标志。如图：<br><img src="71dca980/4.jpg" alt><br>（2）是否可以全屏播放网页视频</p><p>Demo下载地址：<a href="https://github.com/wildma/WildmaX5Web" target="_blank" rel="noopener">WildmaX5Web</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> 第三方集成 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 腾讯 X5 内核 </tag>
            
            <tag> webview 增强版 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 仿微信朋友圈全文、收起功能</title>
      <link href="/blog/a020565d.html"/>
      <url>/blog/a020565d.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一般在社交APP中都有类似朋友圈的功能，其中发表的动态内容很长的时候不可能让它全部显示。这里就需要做一个仿微信朋友圈全文、收起功能来解决该问题。在网上看到一个例子–&gt; <a href="http://blog.csdn.net/e042kuuw/article/details/55107537" target="_blank" rel="noopener">http://blog.csdn.net/e042kuuw/article/details/55107537</a> ，写的很不错，但是有个bug，他这个Demo只有在条目固定的时候才正常，当增加、删除条目的时候会出现全文、收起显示混乱的问题。原因是他使用了固定的position作为key来保存当前显示的状态。这篇文章在他的基础上进行优化。</p><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="a020565d/1.jpg" alt></p><h2 id="具体代码"><a href="#具体代码" class="headerlink" title="具体代码"></a>具体代码</h2><p>（详细解释在代码注释中都有，这里就省略了）</p><p><strong>MainActivity.java：</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> RecyclerView mRecyclerView<span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>ExpandFoldTextBean<span class="token operator">></span> mList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">initData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ExpandFoldTextAdapter adapter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExpandFoldTextAdapter</span><span class="token punctuation">(</span>mList<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mRecyclerView <span class="token operator">=</span> <span class="token punctuation">(</span>RecyclerView<span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>recyclerview<span class="token punctuation">)</span><span class="token punctuation">;</span>        mRecyclerView<span class="token punctuation">.</span><span class="token function">setLayoutManager</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LinearLayoutManager</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> LinearLayoutManager<span class="token punctuation">.</span>VERTICAL<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mRecyclerView<span class="token punctuation">.</span><span class="token function">setAdapter</span><span class="token punctuation">(</span>adapter<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 初始化数据     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">initData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String longContent <span class="token operator">=</span> <span class="token string">"-->游泳、快走、慢跑、骑自行车，及一切有氧运动都能锻炼心脏。有氧运动好处多：能锻炼心肺、增强循环系统功能、燃烧脂肪、加大肺活量、降低血压，甚至能预防糖尿病，减少心脏病的发生。美国运动医学院建议，想知道有氧运动强度是否合适，可在运动后测试心率，以达到最高心率的60%—90%为宜。如果想通过有氧运动来减肥，可以选择低度到中度的运动强度，同时延长运动时间，这种方法消耗的热量更多。运动频率每周3—5次，每次20—60分钟。想要锻炼肌肉，可以练举重、做体操以及其他重复伸、屈肌肉的运动。肌肉锻炼可以燃烧热量、增强骨密度、减少受伤，尤其是关节受伤的几率，还能预防骨质疏松。 在做举重运动前，先测一下，如果连续举8次你最多能举多重的东西，就从这个重量开始练习。当你可以连续12次举起这个重量时，试试增加5%的重量。注意每次练习时，要连续举8—12次，这样可以达到肌肉最大耐力的70%—80%，锻炼效果较好。每周2—3次，但要避免连续两天锻炼同一组肌肉群， 以便让肌肉有充分的恢复时间。"</span><span class="token punctuation">;</span>        String shortContent <span class="token operator">=</span> <span class="token string">"-->健身是一种体育项目，如各种徒手健美操、韵律操、形体操以及各种自抗力动作。"</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ExpandFoldTextBean bean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExpandFoldTextBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                bean<span class="token punctuation">.</span><span class="token function">setContent</span><span class="token punctuation">(</span>i <span class="token operator">+</span> shortContent<span class="token punctuation">)</span><span class="token punctuation">;</span>                bean<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                bean<span class="token punctuation">.</span><span class="token function">setContent</span><span class="token punctuation">(</span>i <span class="token operator">+</span> longContent<span class="token punctuation">)</span><span class="token punctuation">;</span>                bean<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            mList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>bean<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>ExpandFoldTextAdapter.java：</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Author     wildma * DATE       2017/8/3 * Des          ${展开折叠文本适配器} */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExpandFoldTextAdapter</span> <span class="token keyword">extends</span> <span class="token class-name">RecyclerView<span class="token punctuation">.</span>Adapter</span><span class="token operator">&lt;</span>ExpandFoldTextAdapter<span class="token punctuation">.</span>MyViewHolder<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Activity mContent<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MAX_LINE_COUNT <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//最大显示行数</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> STATE_UNKNOW <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//未知状态</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> STATE_NOT_OVERFLOW <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//文本行数小于最大可显示行数</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> STATE_COLLAPSED <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//折叠状态</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> STATE_EXPANDED <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//展开状态</span>    <span class="token comment" spellcheck="true">/**     * 注意：保存文本状态集合的key一定要是唯一的，如果用position。     * 如果使用position作为key，则删除、增加条目的时候会出现显示错乱     */</span>    <span class="token keyword">private</span> SparseArray<span class="token operator">&lt;</span>Integer<span class="token operator">></span> mTextStateList<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//保存文本状态集合</span>    List<span class="token operator">&lt;</span>ExpandFoldTextBean<span class="token operator">></span> mList<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ExpandFoldTextAdapter</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>ExpandFoldTextBean<span class="token operator">></span> list<span class="token punctuation">,</span> Activity context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mContent <span class="token operator">=</span> context<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mList <span class="token operator">=</span> list<span class="token punctuation">;</span>        mTextStateList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SparseArray</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> MyViewHolder <span class="token function">onCreateViewHolder</span><span class="token punctuation">(</span>ViewGroup parent<span class="token punctuation">,</span> <span class="token keyword">int</span> viewType<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyViewHolder</span><span class="token punctuation">(</span>mContent<span class="token punctuation">.</span><span class="token function">getLayoutInflater</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>item_expand_fold_text<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onBindViewHolder</span><span class="token punctuation">(</span><span class="token keyword">final</span> MyViewHolder holder<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> position<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> state <span class="token operator">=</span> mTextStateList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>mList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> STATE_UNKNOW<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//第一次初始化，未知状态</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> STATE_UNKNOW<span class="token punctuation">)</span> <span class="token punctuation">{</span>            holder<span class="token punctuation">.</span>content<span class="token punctuation">.</span><span class="token function">getViewTreeObserver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addOnPreDrawListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ViewTreeObserver<span class="token punctuation">.</span>OnPreDrawListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onPreDraw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//这个回掉会调用多次，获取完行数后记得注销监听</span>                    holder<span class="token punctuation">.</span>content<span class="token punctuation">.</span><span class="token function">getViewTreeObserver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeOnPreDrawListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//holder.content.getViewTreeObserver().addOnPreDrawListener(null);</span>                    <span class="token comment" spellcheck="true">//如果内容显示的行数大于最大显示行数</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>holder<span class="token punctuation">.</span>content<span class="token punctuation">.</span><span class="token function">getLineCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> MAX_LINE_COUNT<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        holder<span class="token punctuation">.</span>content<span class="token punctuation">.</span><span class="token function">setMaxLines</span><span class="token punctuation">(</span>MAX_LINE_COUNT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置最大显示行数</span>                        holder<span class="token punctuation">.</span>expandOrFold<span class="token punctuation">.</span><span class="token function">setVisibility</span><span class="token punctuation">(</span>View<span class="token punctuation">.</span>VISIBLE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//显示“全文”</span>                        holder<span class="token punctuation">.</span>expandOrFold<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"全文"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        mTextStateList<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>mList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> STATE_COLLAPSED<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//保存状态</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        holder<span class="token punctuation">.</span>expandOrFold<span class="token punctuation">.</span><span class="token function">setVisibility</span><span class="token punctuation">(</span>View<span class="token punctuation">.</span>GONE<span class="token punctuation">)</span><span class="token punctuation">;</span>                        mTextStateList<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>mList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> STATE_NOT_OVERFLOW<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            holder<span class="token punctuation">.</span>content<span class="token punctuation">.</span><span class="token function">setMaxLines</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置文本的最大行数，为整数的最大数值</span>            holder<span class="token punctuation">.</span>content<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>mList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//如果之前已经初始化过了，则使用保存的状态。</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">case</span> STATE_NOT_OVERFLOW<span class="token operator">:</span>                    holder<span class="token punctuation">.</span>expandOrFold<span class="token punctuation">.</span><span class="token function">setVisibility</span><span class="token punctuation">(</span>View<span class="token punctuation">.</span>GONE<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> STATE_COLLAPSED<span class="token operator">:</span>                    holder<span class="token punctuation">.</span>content<span class="token punctuation">.</span><span class="token function">setMaxLines</span><span class="token punctuation">(</span>MAX_LINE_COUNT<span class="token punctuation">)</span><span class="token punctuation">;</span>                    holder<span class="token punctuation">.</span>expandOrFold<span class="token punctuation">.</span><span class="token function">setVisibility</span><span class="token punctuation">(</span>View<span class="token punctuation">.</span>VISIBLE<span class="token punctuation">)</span><span class="token punctuation">;</span>                    holder<span class="token punctuation">.</span>expandOrFold<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"全文"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> STATE_EXPANDED<span class="token operator">:</span>                    holder<span class="token punctuation">.</span>content<span class="token punctuation">.</span><span class="token function">setMaxLines</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span>                    holder<span class="token punctuation">.</span>expandOrFold<span class="token punctuation">.</span><span class="token function">setVisibility</span><span class="token punctuation">(</span>View<span class="token punctuation">.</span>VISIBLE<span class="token punctuation">)</span><span class="token punctuation">;</span>                    holder<span class="token punctuation">.</span>expandOrFold<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"收起"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            holder<span class="token punctuation">.</span>content<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>mList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//全文和收起的点击事件</span>        holder<span class="token punctuation">.</span>expandOrFold<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>View v<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> state <span class="token operator">=</span> mTextStateList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>mList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> STATE_UNKNOW<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> STATE_COLLAPSED<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    holder<span class="token punctuation">.</span>content<span class="token punctuation">.</span><span class="token function">setMaxLines</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span>                    holder<span class="token punctuation">.</span>expandOrFold<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"收起"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    mTextStateList<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>mList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> STATE_EXPANDED<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> STATE_EXPANDED<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    holder<span class="token punctuation">.</span>content<span class="token punctuation">.</span><span class="token function">setMaxLines</span><span class="token punctuation">(</span>MAX_LINE_COUNT<span class="token punctuation">)</span><span class="token punctuation">;</span>                    holder<span class="token punctuation">.</span>expandOrFold<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"全文"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    mTextStateList<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>mList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> STATE_COLLAPSED<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//删除点击事件</span>        holder<span class="token punctuation">.</span>delete<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>View view<span class="token punctuation">)</span> <span class="token punctuation">{</span>                mList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">notifyDataSetChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getItemCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> mList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyViewHolder</span> <span class="token keyword">extends</span> <span class="token class-name">RecyclerView<span class="token punctuation">.</span>ViewHolder</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> TextView nickname<span class="token punctuation">;</span>        <span class="token keyword">public</span> TextView content<span class="token punctuation">;</span>        <span class="token keyword">public</span> TextView delete<span class="token punctuation">;</span>        <span class="token keyword">public</span> TextView expandOrFold<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">MyViewHolder</span><span class="token punctuation">(</span>View itemView<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">super</span><span class="token punctuation">(</span>itemView<span class="token punctuation">)</span><span class="token punctuation">;</span>            nickname <span class="token operator">=</span> <span class="token punctuation">(</span>TextView<span class="token punctuation">)</span> itemView<span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>tv_nickname<span class="token punctuation">)</span><span class="token punctuation">;</span>            content <span class="token operator">=</span> <span class="token punctuation">(</span>TextView<span class="token punctuation">)</span> itemView<span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>tv_content<span class="token punctuation">)</span><span class="token punctuation">;</span>            delete <span class="token operator">=</span> <span class="token punctuation">(</span>TextView<span class="token punctuation">)</span> itemView<span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>tv_delete<span class="token punctuation">)</span><span class="token punctuation">;</span>            expandOrFold <span class="token operator">=</span> <span class="token punctuation">(</span>TextView<span class="token punctuation">)</span> itemView<span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>tv_expand_or_fold<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>ExpandFoldTextBean.java：</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExpandFoldTextBean</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String content<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//内容</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//该条数据的id</span>    <span class="token keyword">public</span> String <span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> content<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setContent</span><span class="token punctuation">(</span>String content<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>content <span class="token operator">=</span> content<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>activity_main.xml：</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span>RelativeLayout    android<span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">"@+id/activity_main"</span>    xmlns<span class="token operator">:</span>android<span class="token operator">=</span><span class="token string">"http://schemas.android.com/apk/res/android"</span>    android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"match_parent"</span>    android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"match_parent"</span>    android<span class="token operator">:</span>paddingBottom<span class="token operator">=</span><span class="token string">"@dimen/activity_vertical_margin"</span>    android<span class="token operator">:</span>paddingLeft<span class="token operator">=</span><span class="token string">"@dimen/activity_horizontal_margin"</span>    android<span class="token operator">:</span>paddingRight<span class="token operator">=</span><span class="token string">"@dimen/activity_horizontal_margin"</span>    android<span class="token operator">:</span>paddingTop<span class="token operator">=</span><span class="token string">"@dimen/activity_vertical_margin"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>v7<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>RecyclerView        android<span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">"@+id/recyclerview"</span>        android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"match_parent"</span>        android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"match_parent"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>v7<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>RecyclerView<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>RelativeLayout<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>item_expand_fold_text.xml：</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span>LinearLayout xmlns<span class="token operator">:</span>android<span class="token operator">=</span><span class="token string">"http://schemas.android.com/apk/res/android"</span>              android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"match_parent"</span>              android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"wrap_content"</span>              android<span class="token operator">:</span>orientation<span class="token operator">=</span><span class="token string">"vertical"</span>              android<span class="token operator">:</span>paddingBottom<span class="token operator">=</span><span class="token string">"@dimen/activity_vertical_margin"</span>              android<span class="token operator">:</span>paddingLeft<span class="token operator">=</span><span class="token string">"@dimen/activity_horizontal_margin"</span>              android<span class="token operator">:</span>paddingRight<span class="token operator">=</span><span class="token string">"@dimen/activity_horizontal_margin"</span>              android<span class="token operator">:</span>paddingTop<span class="token operator">=</span><span class="token string">"@dimen/activity_vertical_margin"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>LinearLayout        android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"match_parent"</span>        android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"wrap_content"</span>        android<span class="token operator">:</span>layout_gravity<span class="token operator">=</span><span class="token string">"center_vertical"</span>        android<span class="token operator">:</span>orientation<span class="token operator">=</span><span class="token string">"horizontal"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>ImageView            android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"40dp"</span>            android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"40dp"</span>            android<span class="token operator">:</span>layout_marginRight<span class="token operator">=</span><span class="token string">"16dp"</span>            android<span class="token operator">:</span>gravity<span class="token operator">=</span><span class="token string">"center"</span>            android<span class="token operator">:</span>scaleType<span class="token operator">=</span><span class="token string">"centerCrop"</span>            android<span class="token operator">:</span>src<span class="token operator">=</span><span class="token string">"@mipmap/ic_launcher"</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>RelativeLayout            android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"match_parent"</span>            android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"wrap_content"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>TextView                android<span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">"@+id/tv_nickname"</span>                android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"wrap_content"</span>                android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"wrap_content"</span>                android<span class="token operator">:</span>text<span class="token operator">=</span><span class="token string">"wildma"</span>                android<span class="token operator">:</span>textColor<span class="token operator">=</span><span class="token string">"@android:color/black"</span>                android<span class="token operator">:</span>textSize<span class="token operator">=</span><span class="token string">"14sp"</span><span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span>TextView                android<span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">"@+id/tv_delete"</span>                android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"wrap_content"</span>                android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"wrap_content"</span>                android<span class="token operator">:</span>layout_alignParentRight<span class="token operator">=</span><span class="token string">"true"</span>                android<span class="token operator">:</span>layout_marginLeft<span class="token operator">=</span><span class="token string">"12dp"</span>                android<span class="token operator">:</span>paddingLeft<span class="token operator">=</span><span class="token string">"5dp"</span>                android<span class="token operator">:</span>paddingRight<span class="token operator">=</span><span class="token string">"5dp"</span>                android<span class="token operator">:</span>text<span class="token operator">=</span><span class="token string">"删除"</span>                android<span class="token operator">:</span>textColor<span class="token operator">=</span><span class="token string">"@android:color/holo_red_dark"</span>                android<span class="token operator">:</span>textSize<span class="token operator">=</span><span class="token string">"14sp"</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>RelativeLayout<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>LinearLayout<span class="token operator">></span>    <span class="token operator">&lt;</span>LinearLayout        android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"match_parent"</span>        android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"wrap_content"</span>        android<span class="token operator">:</span>layout_marginLeft<span class="token operator">=</span><span class="token string">"56dp"</span>        android<span class="token operator">:</span>orientation<span class="token operator">=</span><span class="token string">"vertical"</span>        android<span class="token operator">:</span>paddingBottom<span class="token operator">=</span><span class="token string">"8dp"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>TextView            android<span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">"@+id/tv_content"</span>            android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"wrap_content"</span>            android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"wrap_content"</span>            android<span class="token operator">:</span>layout_marginBottom<span class="token operator">=</span><span class="token string">"8dp"</span>            android<span class="token operator">:</span>alpha<span class="token operator">=</span><span class="token string">"0.85"</span>            android<span class="token operator">:</span>ellipsize<span class="token operator">=</span><span class="token string">"end"</span>            android<span class="token operator">:</span>text<span class="token operator">=</span><span class="token string">"内容"</span>            android<span class="token operator">:</span>textColor<span class="token operator">=</span><span class="token string">"@android:color/black"</span>            android<span class="token operator">:</span>textSize<span class="token operator">=</span><span class="token string">"14sp"</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>TextView            android<span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">"@+id/tv_expand_or_fold"</span>            android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"wrap_content"</span>            android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"wrap_content"</span>            android<span class="token operator">:</span>text<span class="token operator">=</span><span class="token string">"全文"</span>            android<span class="token operator">:</span>textColor<span class="token operator">=</span><span class="token string">"@color/colorPrimaryDark"</span>            android<span class="token operator">:</span>textSize<span class="token operator">=</span><span class="token string">"14sp"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>LinearLayout<span class="token operator">></span>    <span class="token operator">&lt;</span>View        android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"match_parent"</span>        android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"0.5dp"</span>        android<span class="token operator">:</span>background<span class="token operator">=</span><span class="token string">"@android:color/black"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>LinearLayout<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>源码地址：<a href="https://github.com/wildma/WildmaExpandFoldText" target="_blank" rel="noopener">https://github.com/wildma/WildmaExpandFoldText</a><br>参考：<a href="http://blog.csdn.net/e042kuuw/article/details/55107537" target="_blank" rel="noopener">http://blog.csdn.net/e042kuuw/article/details/55107537</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 折叠文本 </tag>
            
            <tag> 全文、收起功能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 利用 Glide 获取图片真正的宽高</title>
      <link href="/blog/c44542c2.html"/>
      <url>/blog/c44542c2.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>有时候需要获取网络图片的宽高来设置图片显示的大小，很多人会直接利用Glide的加载监听去拿图片的宽高，但是这样拿到的不是图片真正的宽高，而是图片显示在ImageView后的宽高。如下：</p><pre class="line-numbers language-java"><code class="language-java">        <span class="token comment" spellcheck="true">//获取图片显示在ImageView后的宽高</span>        Glide<span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>imgUrl<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">asBitmap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//强制Glide返回一个Bitmap对象</span>                <span class="token punctuation">.</span><span class="token function">listener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RequestListener</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Bitmap<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onException</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">,</span> String model<span class="token punctuation">,</span> Target<span class="token operator">&lt;</span>Bitmap<span class="token operator">></span> target<span class="token punctuation">,</span> <span class="token keyword">boolean</span> isFirstResource<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onException "</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onResourceReady</span><span class="token punctuation">(</span>Bitmap bitmap<span class="token punctuation">,</span> String model<span class="token punctuation">,</span> Target<span class="token operator">&lt;</span>Bitmap<span class="token operator">></span> target<span class="token punctuation">,</span> <span class="token keyword">boolean</span> isFromMemoryCache<span class="token punctuation">,</span> <span class="token keyword">boolean</span> isFirstResource<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">int</span> width <span class="token operator">=</span> bitmap<span class="token punctuation">.</span><span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">int</span> height <span class="token operator">=</span> bitmap<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"width2 "</span> <span class="token operator">+</span> width<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//400px</span>                        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"height2 "</span> <span class="token operator">+</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//400px</span>                        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span>mIv_img<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>想要拿到图片真正的宽高，应该利用Glide的Target。如下：</p><pre class="line-numbers language-java"><code class="language-java">        <span class="token comment" spellcheck="true">//获取图片真正的宽高</span>        Glide<span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>imgUrl<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">asBitmap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//强制Glide返回一个Bitmap对象</span>                <span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleTarget</span><span class="token operator">&lt;</span>Bitmap<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onResourceReady</span><span class="token punctuation">(</span>Bitmap bitmap<span class="token punctuation">,</span> GlideAnimation<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> Bitmap<span class="token operator">></span> glideAnimation<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">int</span> width <span class="token operator">=</span> bitmap<span class="token punctuation">.</span><span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">int</span> height <span class="token operator">=</span> bitmap<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"width "</span> <span class="token operator">+</span> width<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//200px</span>                        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"height "</span> <span class="token operator">+</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//200px</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><p><strong>MainActivity.java：</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> ImageView mIv_img<span class="token punctuation">;</span>    String imgUrl <span class="token operator">=</span> <span class="token string">"https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=523024675,1399288021&amp;fm=117&amp;gp=0.jpg"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String TAG <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>        mIv_img <span class="token operator">=</span> <span class="token punctuation">(</span>ImageView<span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>iv_img<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取图片真正的宽高</span>        Glide<span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>imgUrl<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">asBitmap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//强制Glide返回一个Bitmap对象</span>                <span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleTarget</span><span class="token operator">&lt;</span>Bitmap<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onResourceReady</span><span class="token punctuation">(</span>Bitmap bitmap<span class="token punctuation">,</span> GlideAnimation<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> Bitmap<span class="token operator">></span> glideAnimation<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">int</span> width <span class="token operator">=</span> bitmap<span class="token punctuation">.</span><span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">int</span> height <span class="token operator">=</span> bitmap<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"width "</span> <span class="token operator">+</span> width<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//200px</span>                        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"height "</span> <span class="token operator">+</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//200px</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取图片显示在ImageView后的宽高</span>        Glide<span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>imgUrl<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">asBitmap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//强制Glide返回一个Bitmap对象</span>                <span class="token punctuation">.</span><span class="token function">listener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RequestListener</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Bitmap<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onException</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">,</span> String model<span class="token punctuation">,</span> Target<span class="token operator">&lt;</span>Bitmap<span class="token operator">></span> target<span class="token punctuation">,</span> <span class="token keyword">boolean</span> isFirstResource<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onException "</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onResourceReady</span><span class="token punctuation">(</span>Bitmap bitmap<span class="token punctuation">,</span> String model<span class="token punctuation">,</span> Target<span class="token operator">&lt;</span>Bitmap<span class="token operator">></span> target<span class="token punctuation">,</span> <span class="token keyword">boolean</span> isFromMemoryCache<span class="token punctuation">,</span> <span class="token keyword">boolean</span> isFirstResource<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">int</span> width <span class="token operator">=</span> bitmap<span class="token punctuation">.</span><span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">int</span> height <span class="token operator">=</span> bitmap<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"width2 "</span> <span class="token operator">+</span> width<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//400px</span>                        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"height2 "</span> <span class="token operator">+</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//400px</span>                        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span>mIv_img<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>activity_main.xml：</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span>RelativeLayout    android<span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">"@+id/activity_main"</span>    xmlns<span class="token operator">:</span>android<span class="token operator">=</span><span class="token string">"http://schemas.android.com/apk/res/android"</span>    android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"match_parent"</span>    android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"match_parent"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>ImageView        android<span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">"@+id/iv_img"</span>        android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"200dp"</span>        android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"200dp"</span>        android<span class="token operator">:</span>layout_centerInParent<span class="token operator">=</span><span class="token string">"true"</span>        android<span class="token operator">:</span>scaleType<span class="token operator">=</span><span class="token string">"centerCrop"</span>        android<span class="token operator">:</span>src<span class="token operator">=</span><span class="token string">"@mipmap/ic_launcher"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>RelativeLayout<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> 问题记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Glide </tag>
            
            <tag> 图片高度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 使用友盟集成 QQ、微信、微博等第三方登录</title>
      <link href="/blog/6f5411d5.html"/>
      <url>/blog/6f5411d5.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近项目需要加入第三方分享和登录功能，之前其他项目的第三方分享和登录一直都使用ShareSDK实现的。为了统一使用友盟的全家桶，所以三方分享和登录也就选择了友盟。这里记录一下完整的集成与使用流程。</p><h2 id="一、申请友盟Appkey"><a href="#一、申请友盟Appkey" class="headerlink" title="一、申请友盟Appkey"></a>一、申请友盟Appkey</h2><p>直接到<a href="http://www.umeng.com/" target="_blank" rel="noopener">友盟官网</a>申请即可。一般都不用自己去申请，跟项目经理要即可。<br>（我这里的Demo为了方便就直接用友盟Demo里面提供的Appkey，但是创建的项目包名也要和友盟一样。真实项目要自己另外申请）</p><h2 id="二、下载SDK"><a href="#二、下载SDK" class="headerlink" title="二、下载SDK"></a>二、下载SDK</h2><p>下载地址：<a href="http://dev.umeng.com/social/android/sdk-download" target="_blank" rel="noopener">http://dev.umeng.com/social/android/sdk-download</a></p><p>下载的时候根据自己需求进行选择，我这里选择选择的是精简版（包含常用的分享与登录功能），只测试微信，QQ，新浪微博。<br><img src="6f5411d5/1.jpg" alt></p><p>下载后解压出来是这样的：<br><img src="6f5411d5/2.jpg" alt></p><h2 id="三、准备资源"><a href="#三、准备资源" class="headerlink" title="三、准备资源"></a>三、准备资源</h2><p>使用友盟的集成工具快速集成友盟的分享SDK：双击 友盟集成工具.jar–&gt;选择使用的平台和IDE，如图：<br><img src="6f5411d5/3.jpg" alt></p><p>点击OK键，会在当前目录生成名为umeng_integratetool_result的文件夹，如图：<br><img src="6f5411d5/4.jpg" alt></p><h2 id="四、开始集成"><a href="#四、开始集成" class="headerlink" title="四、开始集成"></a>四、开始集成</h2><p>（1）将上面的文件夹依次粘贴到工程相应的文件夹即可，如图：<br><img src="6f5411d5/5.jpg" alt></p><p>（2）将debug.keystore文件拷贝到项目的app目录下（对应app build中相应的位置），目的是为了使用友盟的签名，如图：<br><img src="6f5411d5/6.jpg" alt></p><p>（3）添加回调Activity<br>微信回调：<br>其实在第一步拷贝的时候已经添加了。即在包名目录下创建wxapi文件夹，新建一个名为WXEntryActivity的activity继承WXCallbackActivity</p><p>QQ与新浪微博的回调：<br>QQ与新浪不需要添加Activity，但需要在使用QQ分享或者授权的Activity中添加如下代码：<br>（注意onActivityResult不可在fragment中实现，如果在fragment中调用登录或分享，需要在fragment依赖的Activity中实现）</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onActivityResult</span><span class="token punctuation">(</span><span class="token keyword">int</span> requestCode<span class="token punctuation">,</span> <span class="token keyword">int</span> resultCode<span class="token punctuation">,</span> Intent data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onActivityResult</span><span class="token punctuation">(</span>requestCode<span class="token punctuation">,</span> resultCode<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>        UMShareAPI<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">onActivityResult</span><span class="token punctuation">(</span>requestCode<span class="token punctuation">,</span> resultCode<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（4）配置清单文件Android Manifest<br>添加权限：</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token operator">&lt;</span>uses<span class="token operator">-</span>permission android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.permission.ACCESS_NETWORK_STATE"</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>uses<span class="token operator">-</span>permission android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.permission.ACCESS_WIFI_STATE"</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>uses<span class="token operator">-</span>permission android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.permission.READ_PHONE_STATE"</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>uses<span class="token operator">-</span>permission android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.permission.WRITE_EXTERNAL_STORAGE"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>uses<span class="token operator">-</span>permission android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.permission.READ_EXTERNAL_STORAGE"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>uses<span class="token operator">-</span>permission android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.permission.INTERNET"</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>uses<span class="token operator">-</span>permission android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.permission.ACCESS_FINE_LOCATION"</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>uses<span class="token operator">-</span>permission android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.permission.ACCESS_COARSE_LOCATION"</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>uses<span class="token operator">-</span>permission android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.permission.ACCESS_LOCATION_EXTRA_COMMANDS"</span> <span class="token operator">/</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>添加sdk中需要的Activity：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>微信<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>activity            android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">".wxapi.WXEntryActivity"</span>            android<span class="token operator">:</span>configChanges<span class="token operator">=</span><span class="token string">"keyboardHidden|orientation|screenSize"</span>            android<span class="token operator">:</span>exported<span class="token operator">=</span><span class="token string">"true"</span>            android<span class="token operator">:</span>screenOrientation<span class="token operator">=</span><span class="token string">"portrait"</span>            android<span class="token operator">:</span>theme<span class="token operator">=</span><span class="token string">"@android:style/Theme.Translucent.NoTitleBar"</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>新浪微博<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>activity            android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">".WBShareActivity"</span>            android<span class="token operator">:</span>configChanges<span class="token operator">=</span><span class="token string">"keyboardHidden|orientation"</span>            android<span class="token operator">:</span>screenOrientation<span class="token operator">=</span><span class="token string">"portrait"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>intent<span class="token operator">-</span>filter<span class="token operator">></span>                <span class="token operator">&lt;</span>action android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"com.sina.weibo.sdk.action.ACTION_SDK_REQ_ACTIVITY"</span><span class="token operator">/</span><span class="token operator">></span>                <span class="token operator">&lt;</span>category android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.intent.category.DEFAULT"</span><span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>intent<span class="token operator">-</span>filter<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>activity<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>qq精简版<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>activity            android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"com.umeng.qq.tencent.AuthActivity"</span>            android<span class="token operator">:</span>launchMode<span class="token operator">=</span><span class="token string">"singleTask"</span>            android<span class="token operator">:</span>noHistory<span class="token operator">=</span><span class="token string">"true"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>intent<span class="token operator">-</span>filter<span class="token operator">></span>                <span class="token operator">&lt;</span>action android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.intent.action.VIEW"</span><span class="token operator">/</span><span class="token operator">></span>                <span class="token operator">&lt;</span>category android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.intent.category.DEFAULT"</span><span class="token operator">/</span><span class="token operator">></span>                <span class="token operator">&lt;</span>category android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.intent.category.BROWSABLE"</span><span class="token operator">/</span><span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>这里的scheme是qq分享要用的，<span class="token number">100424468</span>为自己申请的appid，真实项目中需要替换<span class="token operator">--</span><span class="token operator">></span>                <span class="token operator">&lt;</span>data android<span class="token operator">:</span>scheme<span class="token operator">=</span><span class="token string">"tencent100424468"</span><span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>intent<span class="token operator">-</span>filter<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>activity<span class="token operator">></span>        <span class="token operator">&lt;</span>activity            android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"com.umeng.qq.tencent.AssistActivity"</span>            android<span class="token operator">:</span>configChanges<span class="token operator">=</span><span class="token string">"orientation|keyboardHidden|screenSize"</span>            android<span class="token operator">:</span>screenOrientation<span class="token operator">=</span><span class="token string">"portrait"</span>            android<span class="token operator">:</span>theme<span class="token operator">=</span><span class="token string">"@android:style/Theme.Translucent.NoTitleBar"</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>分享编辑页<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>activity            android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"com.umeng.socialize.editorpage.ShareActivity"</span>            android<span class="token operator">:</span>excludeFromRecents<span class="token operator">=</span><span class="token string">"true"</span>            android<span class="token operator">:</span>theme<span class="token operator">=</span><span class="token string">"@style/Theme.UMDefault"</span>            <span class="token operator">/</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>添加友盟appkey：</p><pre class="line-numbers language-java"><code class="language-java">        <span class="token operator">&lt;</span>meta<span class="token operator">-</span>data            android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"UMENG_APPKEY"</span>            android<span class="token operator">:</span>value<span class="token operator">=</span><span class="token string">"561cae6ae0f55abd990035bf"</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>meta<span class="token operator">-</span>data<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>（5）配置三方appkey<br>新建MyApplication继承Application（注意：需要在清单文件中配置该MyApplication），在MyApplication文件中配置三方平台的appkey和初始化sdk。如下:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyApplication</span> <span class="token keyword">extends</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        UMShareAPI<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//初始化sdk</span>        <span class="token comment" spellcheck="true">//开启debug模式，方便定位错误，具体错误检查方式可以查看http://dev.umeng.com/social/android/quick-integration的报错必看，正式发布，请关闭该模式</span>        Config<span class="token punctuation">.</span>DEBUG <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//各个平台的配置</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//微信</span>        PlatformConfig<span class="token punctuation">.</span><span class="token function">setWeixin</span><span class="token punctuation">(</span><span class="token string">"wxdc1e388c3822c80b"</span><span class="token punctuation">,</span> <span class="token string">"3baf1193c85774b3fd9d18447d76cab0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//新浪微博(第三个参数为回调地址)</span>        PlatformConfig<span class="token punctuation">.</span><span class="token function">setSinaWeibo</span><span class="token punctuation">(</span><span class="token string">"3921700954"</span><span class="token punctuation">,</span> <span class="token string">"04b48b094faeb16683c32669824ebdad"</span><span class="token punctuation">,</span><span class="token string">"http://sns.whalecloud.com/sina2/callback"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//QQ</span>        PlatformConfig<span class="token punctuation">.</span><span class="token function">setQQZone</span><span class="token punctuation">(</span><span class="token string">"100424468"</span><span class="token punctuation">,</span> <span class="token string">"c7394704798a158208a74ab60104f0ba"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（6）登录代码MainActivity.java：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String TAG <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">qqLogin</span><span class="token punctuation">(</span>View view<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">authorization</span><span class="token punctuation">(</span>SHARE_MEDIA<span class="token punctuation">.</span>QQ<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">weiXinLogin</span><span class="token punctuation">(</span>View view<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">authorization</span><span class="token punctuation">(</span>SHARE_MEDIA<span class="token punctuation">.</span>WEIXIN<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sinaLogin</span><span class="token punctuation">(</span>View view<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">authorization</span><span class="token punctuation">(</span>SHARE_MEDIA<span class="token punctuation">.</span>SINA<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//授权</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">authorization</span><span class="token punctuation">(</span>SHARE_MEDIA share_media<span class="token punctuation">)</span> <span class="token punctuation">{</span>        UMShareAPI<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPlatformInfo</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> share_media<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">UMAuthListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onStart</span><span class="token punctuation">(</span>SHARE_MEDIA share_media<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onStart "</span> <span class="token operator">+</span> <span class="token string">"授权开始"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onComplete</span><span class="token punctuation">(</span>SHARE_MEDIA share_media<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> map<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onComplete "</span> <span class="token operator">+</span> <span class="token string">"授权完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//sdk是6.4.4的,但是获取值的时候用的是6.2以前的(access_token)才能获取到值,未知原因</span>                String uid <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"uid"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                String openid <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"openid"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//微博没有</span>                String unionid <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"unionid"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//微博没有</span>                String access_token <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"access_token"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                String refresh_token <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"refresh_token"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//微信,qq,微博都没有获取到</span>                String expires_in <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"expires_in"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                String name <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                String gender <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"gender"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                String iconurl <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"iconurl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Toast<span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span><span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"name="</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">",gender="</span> <span class="token operator">+</span> gender<span class="token punctuation">,</span> Toast<span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//拿到信息去请求登录接口。。。</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onError</span><span class="token punctuation">(</span>SHARE_MEDIA share_media<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> Throwable throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onError "</span> <span class="token operator">+</span> <span class="token string">"授权失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCancel</span><span class="token punctuation">(</span>SHARE_MEDIA share_media<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onCancel "</span> <span class="token operator">+</span> <span class="token string">"授权取消"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onActivityResult</span><span class="token punctuation">(</span><span class="token keyword">int</span> requestCode<span class="token punctuation">,</span> <span class="token keyword">int</span> resultCode<span class="token punctuation">,</span> Intent data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onActivityResult</span><span class="token punctuation">(</span>requestCode<span class="token punctuation">,</span> resultCode<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>        UMShareAPI<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">onActivityResult</span><span class="token punctuation">(</span>requestCode<span class="token punctuation">,</span> resultCode<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果如下：<br><img src="6f5411d5/7.jpg" alt></p><p>Demo下载地址：<a href="https://github.com/wildma/UMengThirdPartyShareLogin" target="_blank" rel="noopener">https://github.com/wildma/UMengThirdPartyShareLogin</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> 第三方集成 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 友盟登录 </tag>
            
            <tag> 第三方登录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 使用友盟集成 QQ、微信、微博等第三方分享</title>
      <link href="/blog/f2bfcfcb.html"/>
      <url>/blog/f2bfcfcb.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近项目需要加入第三方分享和登录功能，之前其他项目的第三方分享和登录一直都使用ShareSDK实现的。为了统一使用友盟的全家桶，所以三方分享和登录也就选择了友盟。这里记录一下完整的集成与使用流程。</p><h2 id="一、申请友盟Appkey"><a href="#一、申请友盟Appkey" class="headerlink" title="一、申请友盟Appkey"></a>一、申请友盟Appkey</h2><p>直接到<a href="http://www.umeng.com/" target="_blank" rel="noopener">友盟官网</a>申请即可。一般都不用自己去申请，跟项目经理要即可。<br>（我这里的Demo为了方便就直接用友盟Demo里面提供的Appkey，但是创建的项目包名也要和友盟一样。真实项目要自己另外申请）</p><h2 id="二、下载SDK"><a href="#二、下载SDK" class="headerlink" title="二、下载SDK"></a>二、下载SDK</h2><p>下载地址：<a href="http://dev.umeng.com/social/android/sdk-download" target="_blank" rel="noopener">http://dev.umeng.com/social/android/sdk-download</a></p><p>下载的时候根据自己需求进行选择，我这里选择选择的是精简版（包含常用的分享与登录功能），只测试微信，QQ，新浪微博。<br><img src="f2bfcfcb/1.jpg" alt></p><p>下载后解压出来是这样的：<br><img src="f2bfcfcb/2.jpg" alt></p><h2 id="三、准备资源"><a href="#三、准备资源" class="headerlink" title="三、准备资源"></a>三、准备资源</h2><p>使用友盟的集成工具快速集成友盟的分享SDK：双击 友盟集成工具.jar–&gt;选择使用的平台和IDE，如图：<br><img src="f2bfcfcb/3.jpg" alt></p><p>点击OK键，会在当前目录生成名为umeng_integratetool_result的文件夹，如图：<br><img src="f2bfcfcb/4.jpg" alt></p><h2 id="四、开始集成"><a href="#四、开始集成" class="headerlink" title="四、开始集成"></a>四、开始集成</h2><p>（1）将上面的文件夹依次粘贴到工程相应的文件夹即可，如图：<br><img src="f2bfcfcb/5.jpg" alt></p><p>（2）将debug.keystore文件拷贝到项目的app目录下（对应app build中相应的位置），目的是为了使用友盟的签名，如图：<br><img src="f2bfcfcb/6.jpg" alt></p><p>（3）添加回调Activity<br>微信回调：<br>其实在第一步拷贝的时候已经添加了。即在包名目录下创建wxapi文件夹，新建一个名为WXEntryActivity的activity继承WXCallbackActivity</p><p>QQ与新浪微博的回调：<br>QQ与新浪不需要添加Activity，但需要在使用QQ分享或者授权的Activity中添加如下代码：<br>（注意onActivityResult不可在fragment中实现，如果在fragment中调用登录或分享，需要在fragment依赖的Activity中实现）</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onActivityResult</span><span class="token punctuation">(</span><span class="token keyword">int</span> requestCode<span class="token punctuation">,</span> <span class="token keyword">int</span> resultCode<span class="token punctuation">,</span> Intent data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onActivityResult</span><span class="token punctuation">(</span>requestCode<span class="token punctuation">,</span> resultCode<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>        UMShareAPI<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">onActivityResult</span><span class="token punctuation">(</span>requestCode<span class="token punctuation">,</span> resultCode<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（4）配置清单文件Android Manifest<br>添加权限：</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token operator">&lt;</span>uses<span class="token operator">-</span>permission android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.permission.ACCESS_NETWORK_STATE"</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>uses<span class="token operator">-</span>permission android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.permission.ACCESS_WIFI_STATE"</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>uses<span class="token operator">-</span>permission android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.permission.READ_PHONE_STATE"</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>uses<span class="token operator">-</span>permission android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.permission.WRITE_EXTERNAL_STORAGE"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>uses<span class="token operator">-</span>permission android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.permission.READ_EXTERNAL_STORAGE"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>uses<span class="token operator">-</span>permission android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.permission.INTERNET"</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>uses<span class="token operator">-</span>permission android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.permission.ACCESS_FINE_LOCATION"</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>uses<span class="token operator">-</span>permission android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.permission.ACCESS_COARSE_LOCATION"</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>uses<span class="token operator">-</span>permission android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.permission.ACCESS_LOCATION_EXTRA_COMMANDS"</span> <span class="token operator">/</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>添加sdk中需要的Activity：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>微信<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>activity            android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">".wxapi.WXEntryActivity"</span>            android<span class="token operator">:</span>configChanges<span class="token operator">=</span><span class="token string">"keyboardHidden|orientation|screenSize"</span>            android<span class="token operator">:</span>exported<span class="token operator">=</span><span class="token string">"true"</span>            android<span class="token operator">:</span>screenOrientation<span class="token operator">=</span><span class="token string">"portrait"</span>            android<span class="token operator">:</span>theme<span class="token operator">=</span><span class="token string">"@android:style/Theme.Translucent.NoTitleBar"</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>新浪微博<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>activity            android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">".WBShareActivity"</span>            android<span class="token operator">:</span>configChanges<span class="token operator">=</span><span class="token string">"keyboardHidden|orientation"</span>            android<span class="token operator">:</span>screenOrientation<span class="token operator">=</span><span class="token string">"portrait"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>intent<span class="token operator">-</span>filter<span class="token operator">></span>                <span class="token operator">&lt;</span>action android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"com.sina.weibo.sdk.action.ACTION_SDK_REQ_ACTIVITY"</span><span class="token operator">/</span><span class="token operator">></span>                <span class="token operator">&lt;</span>category android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.intent.category.DEFAULT"</span><span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>intent<span class="token operator">-</span>filter<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>activity<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>qq精简版<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>activity            android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"com.umeng.qq.tencent.AuthActivity"</span>            android<span class="token operator">:</span>launchMode<span class="token operator">=</span><span class="token string">"singleTask"</span>            android<span class="token operator">:</span>noHistory<span class="token operator">=</span><span class="token string">"true"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>intent<span class="token operator">-</span>filter<span class="token operator">></span>                <span class="token operator">&lt;</span>action android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.intent.action.VIEW"</span><span class="token operator">/</span><span class="token operator">></span>                <span class="token operator">&lt;</span>category android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.intent.category.DEFAULT"</span><span class="token operator">/</span><span class="token operator">></span>                <span class="token operator">&lt;</span>category android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.intent.category.BROWSABLE"</span><span class="token operator">/</span><span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>这里的scheme是qq分享要用的，<span class="token number">100424468</span>为自己申请的appid，真实项目中需要替换<span class="token operator">--</span><span class="token operator">></span>                <span class="token operator">&lt;</span>data android<span class="token operator">:</span>scheme<span class="token operator">=</span><span class="token string">"tencent100424468"</span><span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>intent<span class="token operator">-</span>filter<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>activity<span class="token operator">></span>        <span class="token operator">&lt;</span>activity            android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"com.umeng.qq.tencent.AssistActivity"</span>            android<span class="token operator">:</span>configChanges<span class="token operator">=</span><span class="token string">"orientation|keyboardHidden|screenSize"</span>            android<span class="token operator">:</span>screenOrientation<span class="token operator">=</span><span class="token string">"portrait"</span>            android<span class="token operator">:</span>theme<span class="token operator">=</span><span class="token string">"@android:style/Theme.Translucent.NoTitleBar"</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>分享编辑页<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>activity            android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"com.umeng.socialize.editorpage.ShareActivity"</span>            android<span class="token operator">:</span>excludeFromRecents<span class="token operator">=</span><span class="token string">"true"</span>            android<span class="token operator">:</span>theme<span class="token operator">=</span><span class="token string">"@style/Theme.UMDefault"</span>            <span class="token operator">/</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>添加友盟appkey：</p><pre class="line-numbers language-java"><code class="language-java">        <span class="token operator">&lt;</span>meta<span class="token operator">-</span>data            android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"UMENG_APPKEY"</span>            android<span class="token operator">:</span>value<span class="token operator">=</span><span class="token string">"561cae6ae0f55abd990035bf"</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>meta<span class="token operator">-</span>data<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>（5）配置三方appkey<br>新建MyApplication继承Application（注意：需要在清单文件中配置该MyApplication），在MyApplication文件中配置三方平台的appkey和初始化sdk。如下:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyApplication</span> <span class="token keyword">extends</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        UMShareAPI<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//初始化sdk</span>        <span class="token comment" spellcheck="true">//开启debug模式，方便定位错误，具体错误检查方式可以查看http://dev.umeng.com/social/android/quick-integration的报错必看，正式发布，请关闭该模式</span>        Config<span class="token punctuation">.</span>DEBUG <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//各个平台的配置</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//微信</span>        PlatformConfig<span class="token punctuation">.</span><span class="token function">setWeixin</span><span class="token punctuation">(</span><span class="token string">"wxdc1e388c3822c80b"</span><span class="token punctuation">,</span> <span class="token string">"3baf1193c85774b3fd9d18447d76cab0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//新浪微博(第三个参数为回调地址)</span>        PlatformConfig<span class="token punctuation">.</span><span class="token function">setSinaWeibo</span><span class="token punctuation">(</span><span class="token string">"3921700954"</span><span class="token punctuation">,</span> <span class="token string">"04b48b094faeb16683c32669824ebdad"</span><span class="token punctuation">,</span><span class="token string">"http://sns.whalecloud.com/sina2/callback"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//QQ</span>        PlatformConfig<span class="token punctuation">.</span><span class="token function">setQQZone</span><span class="token punctuation">(</span><span class="token string">"100424468"</span><span class="token punctuation">,</span> <span class="token string">"c7394704798a158208a74ab60104f0ba"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（6）分享代码MainActivity.java：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String TAG <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">qq</span><span class="token punctuation">(</span>View view<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ShareUtils<span class="token punctuation">.</span><span class="token function">shareWeb</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> Defaultcontent<span class="token punctuation">.</span>url<span class="token punctuation">,</span> Defaultcontent<span class="token punctuation">.</span>title                <span class="token punctuation">,</span> Defaultcontent<span class="token punctuation">.</span>text<span class="token punctuation">,</span> Defaultcontent<span class="token punctuation">.</span>imageurl<span class="token punctuation">,</span> R<span class="token punctuation">.</span>mipmap<span class="token punctuation">.</span>icon_logo_share<span class="token punctuation">,</span> SHARE_MEDIA<span class="token punctuation">.</span>QQ        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">weiXin</span><span class="token punctuation">(</span>View view<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ShareUtils<span class="token punctuation">.</span><span class="token function">shareWeb</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> Defaultcontent<span class="token punctuation">.</span>url<span class="token punctuation">,</span> Defaultcontent<span class="token punctuation">.</span>title                <span class="token punctuation">,</span> Defaultcontent<span class="token punctuation">.</span>text<span class="token punctuation">,</span> Defaultcontent<span class="token punctuation">.</span>imageurl<span class="token punctuation">,</span> R<span class="token punctuation">.</span>mipmap<span class="token punctuation">.</span>icon_logo_share<span class="token punctuation">,</span> SHARE_MEDIA<span class="token punctuation">.</span>WEIXIN        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">weixinCircle</span><span class="token punctuation">(</span>View view<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ShareUtils<span class="token punctuation">.</span><span class="token function">shareWeb</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> Defaultcontent<span class="token punctuation">.</span>url<span class="token punctuation">,</span> Defaultcontent<span class="token punctuation">.</span>title                <span class="token punctuation">,</span> Defaultcontent<span class="token punctuation">.</span>text<span class="token punctuation">,</span> Defaultcontent<span class="token punctuation">.</span>imageurl<span class="token punctuation">,</span> R<span class="token punctuation">.</span>mipmap<span class="token punctuation">.</span>icon_logo_share<span class="token punctuation">,</span> SHARE_MEDIA<span class="token punctuation">.</span>WEIXIN_CIRCLE        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sina</span><span class="token punctuation">(</span>View view<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ShareUtils<span class="token punctuation">.</span><span class="token function">shareWeb</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> Defaultcontent<span class="token punctuation">.</span>url<span class="token punctuation">,</span> Defaultcontent<span class="token punctuation">.</span>title                <span class="token punctuation">,</span> Defaultcontent<span class="token punctuation">.</span>text<span class="token punctuation">,</span> Defaultcontent<span class="token punctuation">.</span>imageurl<span class="token punctuation">,</span> R<span class="token punctuation">.</span>mipmap<span class="token punctuation">.</span>icon_logo_share<span class="token punctuation">,</span> SHARE_MEDIA<span class="token punctuation">.</span>SINA        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Qzone</span><span class="token punctuation">(</span>View view<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ShareUtils<span class="token punctuation">.</span><span class="token function">shareWeb</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> Defaultcontent<span class="token punctuation">.</span>url<span class="token punctuation">,</span> Defaultcontent<span class="token punctuation">.</span>title                <span class="token punctuation">,</span> Defaultcontent<span class="token punctuation">.</span>text<span class="token punctuation">,</span> Defaultcontent<span class="token punctuation">.</span>imageurl<span class="token punctuation">,</span> R<span class="token punctuation">.</span>mipmap<span class="token punctuation">.</span>icon_logo_share<span class="token punctuation">,</span> SHARE_MEDIA<span class="token punctuation">.</span>QZONE        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onActivityResult</span><span class="token punctuation">(</span><span class="token keyword">int</span> requestCode<span class="token punctuation">,</span> <span class="token keyword">int</span> resultCode<span class="token punctuation">,</span> Intent data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onActivityResult</span><span class="token punctuation">(</span>requestCode<span class="token punctuation">,</span> resultCode<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>        UMShareAPI<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">onActivityResult</span><span class="token punctuation">(</span>requestCode<span class="token punctuation">,</span> resultCode<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（7）分享工具类ShareUtils.java：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ShareUtils</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 分享链接     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">shareWeb</span><span class="token punctuation">(</span><span class="token keyword">final</span> Activity activity<span class="token punctuation">,</span> String WebUrl<span class="token punctuation">,</span> String title<span class="token punctuation">,</span> String description<span class="token punctuation">,</span> String imageUrl<span class="token punctuation">,</span> <span class="token keyword">int</span> imageID<span class="token punctuation">,</span> SHARE_MEDIA platform<span class="token punctuation">)</span> <span class="token punctuation">{</span>        UMWeb web <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UMWeb</span><span class="token punctuation">(</span>WebUrl<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//连接地址</span>        web<span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//标题</span>        web<span class="token punctuation">.</span><span class="token function">setDescription</span><span class="token punctuation">(</span>description<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//描述</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>TextUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>imageUrl<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            web<span class="token punctuation">.</span><span class="token function">setThumb</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UMImage</span><span class="token punctuation">(</span>activity<span class="token punctuation">,</span> imageID<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//本地缩略图</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            web<span class="token punctuation">.</span><span class="token function">setThumb</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UMImage</span><span class="token punctuation">(</span>activity<span class="token punctuation">,</span> imageUrl<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//网络缩略图</span>        <span class="token punctuation">}</span>        <span class="token keyword">new</span> <span class="token class-name">ShareAction</span><span class="token punctuation">(</span>activity<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setPlatform</span><span class="token punctuation">(</span>platform<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withMedia</span><span class="token punctuation">(</span>web<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setCallback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UMShareListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onStart</span><span class="token punctuation">(</span>SHARE_MEDIA share_media<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token punctuation">}</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onResult</span><span class="token punctuation">(</span><span class="token keyword">final</span> SHARE_MEDIA share_media<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        activity<span class="token punctuation">.</span><span class="token function">runOnUiThread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token annotation punctuation">@Override</span>                            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                <span class="token keyword">if</span> <span class="token punctuation">(</span>share_media<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"WEIXIN_FAVORITE"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                    Toast<span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span>activity<span class="token punctuation">,</span> share_media <span class="token operator">+</span> <span class="token string">" 收藏成功"</span><span class="token punctuation">,</span> Toast<span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                                    Toast<span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span>activity<span class="token punctuation">,</span> share_media <span class="token operator">+</span> <span class="token string">" 分享成功"</span><span class="token punctuation">,</span> Toast<span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token punctuation">}</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onError</span><span class="token punctuation">(</span><span class="token keyword">final</span> SHARE_MEDIA share_media<span class="token punctuation">,</span> <span class="token keyword">final</span> Throwable throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>throwable <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"throw"</span><span class="token punctuation">,</span> <span class="token string">"throw:"</span> <span class="token operator">+</span> throwable<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        activity<span class="token punctuation">.</span><span class="token function">runOnUiThread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token annotation punctuation">@Override</span>                            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                Toast<span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span>activity<span class="token punctuation">,</span> share_media <span class="token operator">+</span> <span class="token string">" 分享失败"</span><span class="token punctuation">,</span> Toast<span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCancel</span><span class="token punctuation">(</span><span class="token keyword">final</span> SHARE_MEDIA share_media<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        activity<span class="token punctuation">.</span><span class="token function">runOnUiThread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token annotation punctuation">@Override</span>                            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                Toast<span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span>activity<span class="token punctuation">,</span> share_media <span class="token operator">+</span> <span class="token string">" 分享取消"</span><span class="token punctuation">,</span> Toast<span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">share</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//新浪微博中图文+链接</span>        <span class="token comment" spellcheck="true">/*new ShareAction(activity)                .setPlatform(platform)                .withText(description + " " + WebUrl)                .withMedia(new UMImage(activity,imageID))                .share();*/</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果如下：<br><img src="f2bfcfcb/7.jpg" alt></p><p>Demo下载地址：<a href="https://github.com/wildma/UMengThirdPartyShareLogin" target="_blank" rel="noopener">https://github.com/wildma/UMengThirdPartyShareLogin</a><br>如果对你有帮助，点个star就是对我最大的支持~</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> 第三方集成 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 第三方分享 </tag>
            
            <tag> 友盟分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>热修复框架 Tinker 最完整讲解（03）——使用 Tinker 常见问题</title>
      <link href="/blog/493565be.html"/>
      <url>/blog/493565be.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>该系列第一篇文章<a href="https://wildma.github.io/hot-fix-tinker-1-integrate/"> 热修复框架Tinker最完整讲解（01）——集成之路</a> 主要讲了tinker的集成，第二篇文章<a href="https://wildma.github.io/hot-fix-tinker-2-walle/">热修复框架Tinker最完整讲解（02）——加入Walle多渠道打包</a>主要讲了Tinker与Walle多渠道打包在项目中的使用。这篇文章主要讲讲真实项目中使用Tinker的常见问题。</p><h2 id="一、存放补丁包的平台选取"><a href="#一、存放补丁包的平台选取" class="headerlink" title="一、存放补丁包的平台选取"></a>一、存放补丁包的平台选取</h2><p>1，存放在自己公司的服务器<br>2，使用TinkerPatch平台，需要收费<br>3，腾讯Bugly平台，免费<br>为了安全与经济考虑，我们公司选取了第一种。大家可以根据自己的需要选择。</p><h2 id="二、tinkerId应该如何选择？"><a href="#二、tinkerId应该如何选择？" class="headerlink" title="二、tinkerId应该如何选择？"></a>二、tinkerId应该如何选择？</h2><p>tinkerId主要作用是区分当前打出的补丁包是基于哪个版本的apk，也就是说当前打出的补丁包能修复哪个版本的bug。每次发布版本需要保证tinkerId一定是要唯一性的，Tiker官方推荐使用git版本号或者versionName作为tinkerId。我自己项目使用的是versionName，你可以将versionName配置在项目的gradle.properties文件中，这样就不用每次都修改tinkerId了。如图：<br><img src="493565be/1.jpg" alt></p><p><img src="493565be/2.jpg" alt></p><p><img src="493565be/3.jpg" alt></p><h2 id="三、后台接口的设计"><a href="#三、后台接口的设计" class="headerlink" title="三、后台接口的设计"></a>三、后台接口的设计</h2><p>问题:如果A用户用1.0.0版本的APK，B用户用2.0.0版本的APK，这个时候1.0.0和2.0.0都有对应的补丁包。接口该怎么设计?</p><p>方案: (可以保证用1.0.0还是2.0.0的用户都可以修复)<br>叫后台给一个接口,前端传versionName给后台(这里的versionName要保证和TinkerID一样), 传1.0.0后台就返回1.0.0的补丁包。传2.0.0后台则返回2.0.0的补丁包。字段后台返回一个补丁包的链接就可以了，每次更新补丁包后台都要换不同的链接（下面前端设计有讲到）。没有则返回空。</p><h2 id="四、前端设计与问题"><a href="#四、前端设计与问题" class="headerlink" title="四、前端设计与问题"></a>四、前端设计与问题</h2><p>问题: 前端下载APK的时机和逻辑<br>方案: 放在启动页-SplashActivity请求比较好(越早请求越好),每次都去请求,把请求回来的链接保存在本地,进行对比,链接不一样则下载补丁包并加载。链接一样则不用重复下载。</p><p>问题: 前端下载的时候需不需要提示用户?<br>方案: 这个看产品经理的需求,一般可以不提示,我修复bug告诉你干嘛…</p><p>问题: 如果1.0.0版本上线后,过了很久才发现有bug, 我的trunk主线代码已经改了很多了。这个时候打补丁包那不是把其他代码也认为是差异的代码,然后直接加载补丁包到1.0.0的apk上?这样不合理吧？<br>方案:<br>发布1.0.0版本后, 新建一个1.0.0的分支, 然后在1.0.0分支上修改bug，打出补丁包发给后台，最后把1.0.0的代码merge到trunk主线即可。</p><p>问题: 要给同一个版本多次打补丁包,又怎样弄呢?<br>直接在每次发布版本新建的分支上修复bug，然后每次打不同的补丁包，就需要叫后台返回不通的连接（为了区分该补丁包是否已加载过，上面后台接口的设计有讲到）。即都要以发布时的版本作为基础包进行bug修改。</p><p>问题：加载补丁包后，怎样才能让修改的bug生效呢？<br>解决：因为Tinker不是即时生效的。所以我们这里不用处理，加载完补丁包，用户退出下次进来就自然生效。</p><h2 id="五、华为H60-L03-Android4-4-2手机上运行直接crash"><a href="#五、华为H60-L03-Android4-4-2手机上运行直接crash" class="headerlink" title="五、华为H60-L03 Android4.4.2手机上运行直接crash"></a>五、华为H60-L03 Android4.4.2手机上运行直接crash</h2><p>最近测试的时候将项目运行在华为荣耀6（H60-L03）Android版本4.4.2的手机上就直接crash了，找资料发现其他人测试红米2A Android4.4.4，华为 MT7-TL00 Android4.4.2都会出现同样的问题（猜测5.0以下的手机都会出现该问题）。错误日志如下：</p><pre class="line-numbers language-java"><code class="language-java">Caused by<span class="token operator">:</span> com<span class="token punctuation">.</span>tencent<span class="token punctuation">.</span>tinker<span class="token punctuation">.</span>loader<span class="token punctuation">.</span>TinkerRuntimeException<span class="token operator">:</span> Tinker Exception<span class="token operator">:</span>createDelegate failedTinker<span class="token punctuation">.</span>UncaughtHandler<span class="token operator">:</span> <span class="token keyword">catch</span> exception when loading tinker<span class="token operator">:</span>java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>RuntimeException<span class="token operator">:</span> Unable to instantiate application tinker<span class="token punctuation">.</span>sample<span class="token punctuation">.</span>android<span class="token punctuation">.</span>app<span class="token punctuation">.</span>SampleApplication<span class="token operator">:</span> com<span class="token punctuation">.</span>tencent<span class="token punctuation">.</span>tinker<span class="token punctuation">.</span>loader<span class="token punctuation">.</span>TinkerRuntimeException<span class="token operator">:</span> Tinker Exception<span class="token operator">:</span>createDelegate failedCaused by<span class="token operator">:</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>ClassNotFoundException<span class="token operator">:</span> Didn't find <span class="token keyword">class</span> <span class="token string">"com.wildma.wildmatinker.global.MyApplication"</span> on path<span class="token operator">:</span> DexPathList<span class="token punctuation">[</span><span class="token punctuation">[</span>zip file <span class="token string">"/system/framework/org.simalliance.openmobileapi.jar"</span><span class="token punctuation">,</span> zip file <span class="token string">"/data/app/com.wildma.wildmatinker-1.apk"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>nativeLibraryDirectories<span class="token operator">=</span><span class="token punctuation">[</span><span class="token operator">/</span>data<span class="token operator">/</span>app<span class="token operator">-</span>lib<span class="token operator">/</span>com<span class="token punctuation">.</span>wildma<span class="token punctuation">.</span>wildmatinker<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">/</span>vendor<span class="token operator">/</span>lib<span class="token punctuation">,</span> <span class="token operator">/</span>system<span class="token operator">/</span>lib<span class="token punctuation">,</span> <span class="token operator">/</span>data<span class="token operator">/</span>datalib<span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>经过自己测试，发现只有将tinkerEnabled设置为false的时候运行在该手机上才会报错。最后在issues上找到作者解释说是分包问题，如果关了tinkerEnabled。需要将ApplicationLike类放在main dex keep</p><p>解决一：打开tinkerEnabled</p><p>解决二：如果想在关闭tinkerEnabled的时候又运行在5.0以下的手机上, 那必须自己写分包规则。<br>1，将app/build/intermediates/tinker_intermediates/tinker_multidexkeep.pro文件复制到app的根目录下<br>2，在app build中对对应该文件即可。</p><pre class="line-numbers language-java"><code class="language-java">    defaultConfig <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//其他。。。</span>        <span class="token comment" spellcheck="true">//tinker分包规则</span>        multiDexKeepProguard <span class="token function">file</span><span class="token punctuation">(</span><span class="token string">"./tinker_multidexkeep.pro"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//keep specific classes using proguard syntax</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Tinker系列文章讲的已经非常详细了，有不足的地方希望指出。遇到不懂的问题都可以直接在博客下评论问我，只要我遇到过并且能回答出来的都会乐意回答。</p><p>Demo下载地址：<a href="https://github.com/wildma/WildmaTinker" target="_blank" rel="noopener">https://github.com/wildma/WildmaTinker</a><br>如果对你有帮助请点赞，star支持下哈~</p><h2 id="热修复Tinker系列文章"><a href="#热修复Tinker系列文章" class="headerlink" title="热修复Tinker系列文章"></a>热修复Tinker系列文章</h2><ul><li><a href="https://wildma.github.io/hot-fix-tinker-1-integrate/">热修复框架Tinker最完整讲解（01）——集成之路</a></li><li><a href="https://wildma.github.io/hot-fix-tinker-2-walle/">热修复框架Tinker最完整讲解（02）——加入Walle多渠道打包</a></li><li><a href="https://wildma.github.io/hot-fix-tinker-3-question/">热修复框架Tinker最完整讲解（03）——使用Tinker常见问题</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> 第三方集成 </category>
          
          <category> 热修复 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 热修复 </tag>
            
            <tag> Tinker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>热修复框架 Tinker 最完整讲解（02）——加入 Walle 多渠道打包</title>
      <link href="/blog/d74c6f53.html"/>
      <url>/blog/d74c6f53.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上一篇文章<a href="https://wildma.github.io/hot-fix-tinker-1-integrate/"> 热修复框架Tinker最完整讲解（01）——集成之路</a> 已经介绍我们的项目渠道包有20个，并且我们多渠道打包是采用productFlavors实现的。但是这种多渠道打包会造成20个渠道包的热更新就需要20个补丁，这样肯定是不合理的。那怎样才能实现20个渠道包只需要一个补丁包呢？Tinker官方也说了，推荐我们多渠道打包使用Walle，这样就能实现多个渠道包只使用一个补丁包了！</p><h2 id="一、什么是Walle？"><a href="#一、什么是Walle？" class="headerlink" title="一、什么是Walle？"></a>一、什么是Walle？</h2><p>Walle（瓦力）：Android Signature V2 Scheme签名下的新一代渠道包打包神器。<br>瓦力通过在Apk中的APK Signature Block区块添加自定义的渠道信息来生成渠道包，从而提高了渠道包生成效率，可以作为单机工具来使用，也可以部署在HTTP服务器上来实时处理渠道包Apk的升级网络请求。<br>——介绍来自<a href="https://github.com/Meituan-Dianping/walle" target="_blank" rel="noopener">Walle</a></p><h2 id="二、集成"><a href="#二、集成" class="headerlink" title="二、集成"></a>二、集成</h2><p>为了方便大家的使用，Walle提供了2种使用方式：（这里主要讲常用的第一种方式）</p><ul><li>Gradle插件方式，方便快速集成</li><li>命令行方式，最大化满足各种自定义需求</li></ul><p><strong>配置build.gradle：</strong></p><p>（1）在项目的build.gradle 文件中添加Walle Gradle插件的依赖， 如下：</p><pre class="line-numbers language-java"><code class="language-java">buildscript <span class="token punctuation">{</span>    dependencies <span class="token punctuation">{</span>        classpath <span class="token string">'com.meituan.android.walle:plugin:1.1.4'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（2）在app的 build.gradle 文件中apply这个插件，并添加上用于读取渠道号的AAR，如下：</p><pre class="line-numbers language-java"><code class="language-java">apply plugin<span class="token operator">:</span> <span class="token string">'walle'</span>dependencies <span class="token punctuation">{</span>    compile <span class="token string">'com.meituan.android.walle:library:1.1.4'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（3）在app的 build.gradle 文件中配置插件，如下：</p><pre class="line-numbers language-java"><code class="language-java">walle <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 指定渠道包的输出路径</span>    apkOutputFolder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"${project.buildDir}/outputs/channels"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 定制渠道包的APK的文件名称</span>    apkFileNameFormat <span class="token operator">=</span> <span class="token string">'${appName}-${packageName}-${channel}-${buildType}-v${versionName}-${versionCode}-${buildTime}.apk'</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 渠道配置文件</span>    channelFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"${project.getProjectDir()}/channel"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置项具体解释：</p><pre class="line-numbers language-java"><code class="language-java">apkOutputFolder：指定渠道包的输出路径， 默认值为<span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"${project.buildDir}/outputs/apk"</span><span class="token punctuation">)</span>apkFileNameFormat：定制渠道包的APK的文件名称<span class="token punctuation">,</span> 默认值为<span class="token string">'${appName}-${buildType}-${channel}.apk'</span>可使用以下变量<span class="token operator">:</span>     projectName <span class="token operator">-</span> 项目名字     appName <span class="token operator">-</span> App模块名字     packageName <span class="token operator">-</span> <span class="token function">applicationId</span> <span class="token punctuation">(</span>App包名packageName<span class="token punctuation">)</span>     buildType <span class="token operator">-</span> <span class="token function">buildType</span> <span class="token punctuation">(</span>release<span class="token operator">/</span>debug等<span class="token punctuation">)</span>     channel <span class="token operator">-</span> channel名称 <span class="token punctuation">(</span>对应渠道打包中的渠道名字<span class="token punctuation">)</span>     versionName <span class="token operator">-</span> <span class="token function">versionName</span> <span class="token punctuation">(</span>显示用的版本号<span class="token punctuation">)</span>     versionCode <span class="token operator">-</span> <span class="token function">versionCode</span> <span class="token punctuation">(</span>内部版本号<span class="token punctuation">)</span>     buildTime <span class="token operator">-</span> <span class="token function">buildTime</span> <span class="token punctuation">(</span>编译构建日期时间<span class="token punctuation">)</span>     fileSHA1 <span class="token operator">-</span> <span class="token function">fileSHA1</span> <span class="token punctuation">(</span>最终APK文件的SHA1哈希值<span class="token punctuation">)</span>     flavorName <span class="token operator">-</span> 编译构建 productFlavors 名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>channelFile：包含渠道配置信息的文件路径：</p><p>在app目录下新建名为channel的文件，如图</p><p><img src="d74c6f53/1.jpg" alt></p><p>在该文件里写上需要打包的渠道号（渠道号支持使用#号添加注释。具体内容格式详见下图，这里只测试2个渠道）</p><p><img src="d74c6f53/2.jpg" alt></p><h2 id="三、相关API和命令"><a href="#三、相关API和命令" class="headerlink" title="三、相关API和命令"></a>三、相关API和命令</h2><p><strong>获取渠道信息：</strong><br>在需要渠道等信息时可以通过下面代码进行获取</p><pre class="line-numbers language-java"><code class="language-java">String channel <span class="token operator">=</span> WalleChannelReader<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>生成渠道包：</strong><br>生成渠道包的方式是和assemble${variantName}Channels指令结合，渠道包的生成目录默认存放在 build/outputs/apk/，也可以通过walle闭包中的apkOutputFolder参数来指定输出目录</p><pre><code>生成渠道包 ./gradlew clean assembleReleaseChannels</code></pre><p>更多API和命令可参考 <a href="https://github.com/Meituan-Dianping/walle#%E6%9B%B4%E5%A4%9A%E7%94%A8%E6%B3%95" target="_blank" rel="noopener">更多用法</a></p><h2 id="四、使用"><a href="#四、使用" class="headerlink" title="四、使用"></a>四、使用</h2><p>在Android Studio的Terminal中输入命令gradlew clean assembleReleaseChannels进行多渠道打包,当运行完成会出现BUILD SUCCESSFUL, 如图：</p><p><img src="d74c6f53/3.jpg" alt></p><p>并且会在channels文件夹中生成所有渠道的apk，如图：<br><img src="d74c6f53/4.jpg" alt></p><p>一一对应关系为：<br><img src="d74c6f53/5.jpg" alt></p><h2 id="五、Tinker与Walle在真实项目中的使用流程"><a href="#五、Tinker与Walle在真实项目中的使用流程" class="headerlink" title="五、Tinker与Walle在真实项目中的使用流程"></a>五、Tinker与Walle在真实项目中的使用流程</h2><p>上一篇文章<a href="https://wildma.github.io/hot-fix-tinker-1-integrate/"> 热修复框架Tinker最完整讲解（01）——集成之路</a> 主要修复的是单个渠道包，这里结合Walle修复多个渠道包。</p><h3 id="5-1-发布版本流程"><a href="#5-1-发布版本流程" class="headerlink" title="5.1 发布版本流程"></a>5.1 发布版本流程</h3><p>（1）我们在发布版本的时候都需要改版本号，因为我这里使用版本名称作为tinkerId，所以发布版本修改版本名称的时候，tinkerId也要跟着修改。(tinkerId主要作用是当前打出的补丁包是基于哪个版本的apk, tinkerId的选取见我下一篇文章 <a href="https://wildma.github.io/hot-fix-tinker-3-question/">热修复框架Tinker最完整讲解（03）——使用Tinker常见问题</a>。</p><p><img src="d74c6f53/6.jpg" alt></p><p>（2）检查app build中是否开启了热修复功能, 即tinkerEnabled需要设置为true。如图：<br><img src="d74c6f53/7.jpg" alt></p><p>（3）打包前先建一个当前版本的分支！！！（热更新修复bug就在该分支上修改）</p><p>（4）在AS的Terminal中输入命令gradlew clean assembleReleaseChannels进行多渠道打包<br>命令行运行完成会在channels文件夹中生成所有渠道的apk， 如图：<br><img src="d74c6f53/8.jpg" alt></p><p>（5）同时会在bakApk文件中生成三个文件，如图： （这三个文件需要保存在本地，svn或者git服务器，每次发布补丁包的时候需要用到！）<br><img src="d74c6f53/9.jpg" alt></p><h3 id="5-2-发补丁包流程"><a href="#5-2-发补丁包流程" class="headerlink" title="5.2 发补丁包流程"></a>5.2 发补丁包流程</h3><p>（1）在新建的分支上修改bug</p><p>（2）将发布版本第5步中的三个文件路径复制到app build中对应的位置，如图：<br><img src="d74c6f53/10.jpg" alt></p><p>（3）修改bug</p><p>（4）运行补丁命令获取补丁包。单击AS右侧顶部gradle，双击tinkerPatchRelease，如图:<br><img src="d74c6f53/11.jpg" alt></p><p>（5）运行完成会在build-&gt;outputs-&gt;tinkerPatch-&gt;release文件夹中生成一个名为patch_signed_7zip.apk的补丁包，如图：<br><img src="d74c6f53/12.jpg" alt></p><p>（6）将该补丁包重修修改名字后发给后台（注意：这里的一个补丁包就适用于各个渠道包！），关于补丁包的存放与后台设计请看下一篇文章<a href="https://wildma.github.io/hot-fix-tinker-3-question/">热修复框架Tinker最完整讲解（03）——使用Tinker常见问题</a>。</p><p>（7）bug修改完成后将该分支合并到trunk主干上即可。这样能保证分支上修改了bug，trunk主干上也跟着更新了。</p><p>Tinker系列文章讲的已经非常详细了，有不足的地方希望指出。遇到不懂的问题都可以直接在博客下评论问我，只要我遇到过并且能回答出来的都会乐意回答。</p><p>Demo下载地址：<a href="https://github.com/wildma/WildmaTinker" target="_blank" rel="noopener">https://github.com/wildma/WildmaTinker</a><br>如果对你有帮助请点赞，star支持下哈~</p><h2 id="热修复Tinker系列文章"><a href="#热修复Tinker系列文章" class="headerlink" title="热修复Tinker系列文章"></a>热修复Tinker系列文章</h2><ul><li><a href="https://wildma.github.io/hot-fix-tinker-1-integrate/">热修复框架Tinker最完整讲解（01）——集成之路</a></li><li><a href="https://wildma.github.io/hot-fix-tinker-2-walle/">热修复框架Tinker最完整讲解（02）——加入Walle多渠道打包</a></li><li><a href="https://wildma.github.io/hot-fix-tinker-3-question/">热修复框架Tinker最完整讲解（03）——使用Tinker常见问题</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> 第三方集成 </category>
          
          <category> 热修复 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多渠道打包 </tag>
            
            <tag> 热修复 </tag>
            
            <tag> Tinker </tag>
            
            <tag> Walle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>热修复框架 Tinker 最完整讲解（01）——集成之路</title>
      <link href="/blog/fdabc636.html"/>
      <url>/blog/fdabc636.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>2017/09/22 更新：为了同步Tinker官方，故将github上的Demo中的Tinker版本升级到了1.8.1（不要使用1.8.0的版本，该版本不支持加固）。</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上个月我们的产品又更新了一个版本，当一个测试把产品上传了十几个应用市场的时候，另外一个测试突然测出一个重要bug。项目经理就说把全部渠道上传的先退回来，重新改好bug再发布。这时候我们就苦逼了，又要走一遍 签名打包-&gt;加固-&gt;签名-&gt;上传应用市场的流程。要知道我们的渠道有接近20个，整个流程又要花上2，3小时。只能全部加班加点了。。。 </p><p>为了解决有一个bug又要重新发布版本的问题，项目经理就叫我赶紧把热修复集成到项目中去。一开始觉得3天就能搞定，就跟项目经理要了4天时间。结果是整整搞了5天！集成tinker Demo确实一天可以搞定，但是还要自定义Application类（我们项目的Application还比较复杂），集成美团Walle多渠道打包（我们以前多渠道打包是采用productFlavors实现的），与后台沟通接口的设计（补丁包的存放），svn的分支管理，测试整个流程等等就花了很多时间了。这其中遇到了很多坑和问题。这个系列文章都会一一讲解，新手看了肯定会少走很多弯路。</p><h2 id="一、Tinker是什么"><a href="#一、Tinker是什么" class="headerlink" title="一、Tinker是什么"></a>一、Tinker是什么</h2><p>Tinker是微信官方的Android热补丁解决方案，它支持动态下发代码、So库以及资源，让应用能够在不需要重新安装的情况下实现更新。当然，你也可以使用Tinker来更新你的插件。</p><h2 id="二、为什么使用Tinker"><a href="#二、为什么使用Tinker" class="headerlink" title="二、为什么使用Tinker"></a>二、为什么使用Tinker</h2><p>当前市面的热补丁方案有很多，其中比较出名的有阿里的AndFix、美团的Robust以及QZone的超级补丁方案。但它们都存在无法解决的问题，这也是正是我们推出Tinker的原因。<br><img src="fdabc636/1.jpg" alt></p><p>总的来说:<br>1、AndFix作为native解决方案，首先面临的是稳定性与兼容性问题，更重要的是它无法实现类替换，它是需要大量额外的开发成本的；<br>2、Robust兼容性与成功率较高，但是它与AndFix一样，无法新增变量与类只能用做的bugFix方案；<br>3、Qzone方案可以做到发布产品功能，但是它主要问题是插桩带来Dalvik的性能问题，以及为了解决Art下内存地址问题而导致补丁包急速增大的。</p><p>  特别是在Android N之后，由于混合编译的inline策略修改，对于市面上的各种方案都不太容易解决。而Tinker热补丁方案不仅支持类、So以及资源的替换，它还是2.X－7.X的全平台支持。利用Tinker我们不仅可以用做bugfix,甚至可以替代功能的发布。Tinker已运行在微信的数亿Android设备上，那么为什么你不使用Tinker呢？</p><h2 id="三、Tinker的已知问题"><a href="#三、Tinker的已知问题" class="headerlink" title="三、Tinker的已知问题"></a>三、Tinker的已知问题</h2><p> 由于原理与系统限制，Tinker有以下已知问题：<br>1、Tinker不支持修改AndroidManifest.xml，Tinker不支持新增四大组件；<br>2、由于Google Play的开发者条款限制，不建议在GP渠道动态更新代码；<br>3、在Android N上，补丁对应用启动时间有轻微的影响；<br>4、不支持部分三星android-21机型，加载补丁时会主动抛出”TinkerRuntimeException:checkDexInstall failed”；<br>5、对于资源替换，不支持修改remoteView。例如transition动画，notification icon以及桌面图标。</p><p><a href="https://github.com/Tencent/tinker/wiki" target="_blank" rel="noopener">以上关于Tinker的介绍来自Tinker官方Wiki</a></p><h2 id="四、Tinker集成"><a href="#四、Tinker集成" class="headerlink" title="四、Tinker集成"></a>四、Tinker集成</h2><h3 id="4-1-配置gradle"><a href="#4-1-配置gradle" class="headerlink" title="4.1 配置gradle"></a>4.1 配置gradle</h3><p>（1）在项目的gradle.properties文件中添加Tinker的版本号</p><pre class="line-numbers language-java"><code class="language-java">#Tinker版本号TINKER_VERSION<span class="token operator">=</span><span class="token number">1.7</span><span class="token punctuation">.</span><span class="token number">11</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>（2）在项目的build.gradle中，添加tinker-patch-gradle-plugin的依赖</p><pre class="line-numbers language-java"><code class="language-java">buildscript <span class="token punctuation">{</span>    repositories <span class="token punctuation">{</span>        <span class="token function">jcenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    dependencies <span class="token punctuation">{</span>        classpath <span class="token string">'com.android.tools.build:gradle:2.2.2'</span>        <span class="token comment" spellcheck="true">//tinker</span>        classpath <span class="token string">"com.tencent.tinker:tinker-patch-gradle-plugin:${TINKER_VERSION}"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（3）在app的gradle文件app/build.gradle，添加tinker的库依赖(有注释的3个)</p><pre class="line-numbers language-java"><code class="language-java">dependencies <span class="token punctuation">{</span>    compile <span class="token function">fileTree</span><span class="token punctuation">(</span>include<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'*.jar'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dir<span class="token operator">:</span> <span class="token string">'libs'</span><span class="token punctuation">)</span>    testCompile <span class="token string">'junit:junit:4.12'</span>    compile <span class="token string">'com.android.support:appcompat-v7:23.1.1'</span>    <span class="token comment" spellcheck="true">// 多dex 打包的类库</span>    compile <span class="token string">'com.android.support:multidex:1.0.1'</span>    <span class="token comment" spellcheck="true">//tinker的核心库</span>    <span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"com.tencent.tinker:tinker-android-lib:${TINKER_VERSION}"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> changing <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//用于生成application类</span>    <span class="token function">provided</span><span class="token punctuation">(</span><span class="token string">"com.tencent.tinker:tinker-android-anno:${TINKER_VERSION}"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> changing <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（4）在app的gradle文件app/build.gradle，添加tinker的相关配置<br>下面就把整个app/build.gradle配置贴出来，其中标有Tinker相关配置即为tinker的相关配置，其中比较重要的属性都标有中文注释，其余属性解释可以自行参考 <a href="https://github.com/Tencent/tinker/wiki/Tinker-%E6%8E%A5%E5%85%A5%E6%8C%87%E5%8D%97" target="_blank" rel="noopener">Tinker 接入指南</a></p><pre class="line-numbers language-java"><code class="language-java">apply plugin<span class="token operator">:</span> <span class="token string">'com.android.application'</span>android <span class="token punctuation">{</span>    compileSdkVersion <span class="token number">23</span>    buildToolsVersion <span class="token string">"23.0.2"</span>    <span class="token comment" spellcheck="true">//recommend Tinker相关配置</span>    dexOptions <span class="token punctuation">{</span>        jumboMode <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//签名信息配置</span>    signingConfigs <span class="token punctuation">{</span>        release <span class="token punctuation">{</span>                storeFile <span class="token function">file</span><span class="token punctuation">(</span><span class="token string">"./keystore/wildmatinker.jks"</span><span class="token punctuation">)</span>                keyAlias <span class="token string">"wildmatinker"</span>                storePassword <span class="token string">"123456"</span>                keyPassword <span class="token string">"123456"</span>        <span class="token punctuation">}</span>        debug <span class="token punctuation">{</span>            storeFile <span class="token function">file</span><span class="token punctuation">(</span><span class="token string">"./keystore/debug.keystore"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    defaultConfig <span class="token punctuation">{</span>        applicationId <span class="token string">"com.wildma.wildmatinker"</span>        minSdkVersion <span class="token number">14</span>        targetSdkVersion <span class="token number">22</span>        versionCode <span class="token number">1</span>        versionName <span class="token string">"1.0.0"</span>        <span class="token comment" spellcheck="true">//Tinker相关配置start======================================</span>        testInstrumentationRunner <span class="token string">"android.support.test.runner.AndroidJUnitRunner"</span>        <span class="token comment" spellcheck="true">/**         * you can use multiDex and install it in your ApplicationLifeCycle implement         */</span>        multiDexEnabled <span class="token boolean">true</span>        <span class="token comment" spellcheck="true">/**         * buildConfig can change during patch!         * we can use the newly value when patch         */</span>        buildConfigField <span class="token string">"String"</span><span class="token punctuation">,</span> <span class="token string">"MESSAGE"</span><span class="token punctuation">,</span> <span class="token string">"\"I am the base apk\""</span><span class="token comment" spellcheck="true">//        buildConfigField "String", "MESSAGE", "\"I am the patch apk\""</span>        <span class="token comment" spellcheck="true">/**         * client version would update with patch         * so we can get the newly git version easily!         */</span>        buildConfigField <span class="token string">"String"</span><span class="token punctuation">,</span> <span class="token string">"TINKER_ID"</span><span class="token punctuation">,</span> <span class="token string">"\"${getTinkerIdValue()}\""</span>        buildConfigField <span class="token string">"String"</span><span class="token punctuation">,</span> <span class="token string">"PLATFORM"</span><span class="token punctuation">,</span>  <span class="token string">"\"all\""</span>        <span class="token comment" spellcheck="true">//Tinker相关配置end======================================</span>    <span class="token punctuation">}</span>    buildTypes <span class="token punctuation">{</span>        release <span class="token punctuation">{</span>            minifyEnabled <span class="token boolean">true</span>            signingConfig signingConfigs<span class="token punctuation">.</span>release            proguardFiles <span class="token function">getDefaultProguardFile</span><span class="token punctuation">(</span><span class="token string">'proguard-android.txt'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'proguard-rules.pro'</span>        <span class="token punctuation">}</span>        debug <span class="token punctuation">{</span>            debuggable <span class="token boolean">true</span>            minifyEnabled <span class="token boolean">false</span>            signingConfig signingConfigs<span class="token punctuation">.</span>debug        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    sourceSets <span class="token punctuation">{</span>        main <span class="token punctuation">{</span>            jniLibs<span class="token punctuation">.</span>srcDirs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'libs'</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>dependencies <span class="token punctuation">{</span>    compile <span class="token function">fileTree</span><span class="token punctuation">(</span>include<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'*.jar'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dir<span class="token operator">:</span> <span class="token string">'libs'</span><span class="token punctuation">)</span>    testCompile <span class="token string">'junit:junit:4.12'</span>    compile <span class="token string">'com.android.support:appcompat-v7:23.1.1'</span>    <span class="token comment" spellcheck="true">// 多dex 打包的类库</span>    compile <span class="token string">'com.android.support:multidex:1.0.1'</span>    <span class="token comment" spellcheck="true">//tinker的核心库</span>    <span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"com.tencent.tinker:tinker-android-lib:${TINKER_VERSION}"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> changing <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//用于生成application类</span>    <span class="token function">provided</span><span class="token punctuation">(</span><span class="token string">"com.tencent.tinker:tinker-android-anno:${TINKER_VERSION}"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> changing <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//Tinker相关配置start======================================</span>def <span class="token function">gitSha</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        String gitRev = 'git rev-parse --short HEAD'.execute(null, project.rootDir).text.trim()</span>        String gitRev <span class="token operator">=</span> <span class="token string">'1.0.0'</span> <span class="token comment" spellcheck="true">//tinkerID,每次发布新版本都需要修改!</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>gitRev <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">GradleException</span><span class="token punctuation">(</span><span class="token string">"can't get git rev, you should add git to system path or just input test value, such as 'testTinkerId'"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> gitRev    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">GradleException</span><span class="token punctuation">(</span><span class="token string">"can't get git rev, you should add git to system path or just input test value, such as 'testTinkerId'"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>def javaVersion <span class="token operator">=</span> JavaVersion<span class="token punctuation">.</span>VERSION_1_7def bakPath <span class="token operator">=</span> <span class="token function">file</span><span class="token punctuation">(</span><span class="token string">"${buildDir}/bakApk/"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">/** * you can use assembleRelease to build you base apk * use tinkerPatchRelease -POLD_APK=  -PAPPLY_MAPPING=  -PAPPLY_RESOURCE= to build patch * add apk from the build/bakApk */</span>ext <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//是否打开tinker的功能</span>    tinkerEnabled <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token comment" spellcheck="true">//old apk地址</span>    tinkerOldApkPath <span class="token operator">=</span> <span class="token string">"${bakPath}/app-release-0708-21-59-49.apk"</span>    <span class="token comment" spellcheck="true">//old apk 混淆文件地址</span>    tinkerApplyMappingPath <span class="token operator">=</span> <span class="token string">"${bakPath}/app-release-0708-21-59-49-mapping.txt"</span>    <span class="token comment" spellcheck="true">//old apk R 文件地址</span>    tinkerApplyResourcePath <span class="token operator">=</span> <span class="token string">"${bakPath}/app-release-0708-21-59-49-R.txt"</span>    <span class="token comment" spellcheck="true">//only use for build all flavor, if not, just ignore this field</span>    tinkerBuildFlavorDirectory <span class="token operator">=</span> <span class="token string">"${bakPath}/app-1018-17-32-47"</span><span class="token punctuation">}</span>def <span class="token function">getOldApkPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">hasProperty</span><span class="token punctuation">(</span><span class="token string">"OLD_APK"</span><span class="token punctuation">)</span> <span class="token operator">?</span> OLD_APK <span class="token operator">:</span> ext<span class="token punctuation">.</span>tinkerOldApkPath<span class="token punctuation">}</span>def <span class="token function">getApplyMappingPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">hasProperty</span><span class="token punctuation">(</span><span class="token string">"APPLY_MAPPING"</span><span class="token punctuation">)</span> <span class="token operator">?</span> APPLY_MAPPING <span class="token operator">:</span> ext<span class="token punctuation">.</span>tinkerApplyMappingPath<span class="token punctuation">}</span>def <span class="token function">getApplyResourceMappingPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">hasProperty</span><span class="token punctuation">(</span><span class="token string">"APPLY_RESOURCE"</span><span class="token punctuation">)</span> <span class="token operator">?</span> APPLY_RESOURCE <span class="token operator">:</span> ext<span class="token punctuation">.</span>tinkerApplyResourcePath<span class="token punctuation">}</span>def <span class="token function">getTinkerIdValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">hasProperty</span><span class="token punctuation">(</span><span class="token string">"TINKER_ID"</span><span class="token punctuation">)</span> <span class="token operator">?</span> TINKER_ID <span class="token operator">:</span> <span class="token function">gitSha</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>def <span class="token function">buildWithTinker</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">hasProperty</span><span class="token punctuation">(</span><span class="token string">"TINKER_ENABLE"</span><span class="token punctuation">)</span> <span class="token operator">?</span> TINKER_ENABLE <span class="token operator">:</span> ext<span class="token punctuation">.</span>tinkerEnabled<span class="token punctuation">}</span>def <span class="token function">getTinkerBuildFlavorDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> ext<span class="token punctuation">.</span>tinkerBuildFlavorDirectory<span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">buildWithTinker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    apply plugin<span class="token operator">:</span> <span class="token string">'com.tencent.tinker.patch'</span>    tinkerPatch <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/**         * necessary，default 'null'         * the old apk path, use to diff with the new apk to build         * add apk from the build/bakApk         */</span>        oldApk <span class="token operator">=</span> <span class="token function">getOldApkPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">/**         * optional，default 'false'         * there are some cases we may get some warnings         * if ignoreWarning is true, we would just assert the patch process         * case 1: minSdkVersion is below 14, but you are using dexMode with raw.         *         it must be crash when load.         * case 2: newly added Android Component in AndroidManifest.xml,         *         it must be crash when load.         * case 3: loader classes in dex.loader{} are not keep in the main dex,         *         it must be let tinker not work.         * case 4: loader classes in dex.loader{} changes,         *         loader classes is ues to load patch dex. it is useless to change them.         *         it won't crash, but these changes can't effect. you may ignore it         * case 5: resources.arsc has changed, but we don't use applyResourceMapping to build         */</span>        ignoreWarning <span class="token operator">=</span> <span class="token boolean">false</span>        <span class="token comment" spellcheck="true">/**         * optional，default 'true'         * whether sign the patch file         * if not, you must do yourself. otherwise it can't check success during the patch loading         * we will use the sign config with your build type         */</span>        useSign <span class="token operator">=</span> <span class="token boolean">true</span>        <span class="token comment" spellcheck="true">/**         * optional，default 'true'         * whether use tinker to build         */</span>        tinkerEnable <span class="token operator">=</span> <span class="token function">buildWithTinker</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">/**         * Warning, applyMapping will affect the normal android build!         */</span>        buildConfig <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/**             * optional，default 'null'             * if we use tinkerPatch to build the patch apk, you'd better to apply the old             * apk mapping file if minifyEnabled is enable!             * Warning:             * you must be careful that it will affect the normal assemble build!             */</span>            applyMapping <span class="token operator">=</span> <span class="token function">getApplyMappingPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">/**             * optional，default 'null'             * It is nice to keep the resource id from R.txt file to reduce java changes             */</span>            applyResourceMapping <span class="token operator">=</span> <span class="token function">getApplyResourceMappingPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">/**             * necessary，default 'null'             * because we don't want to check the base apk with md5 in the runtime(it is slow)             * tinkerId is use to identify the unique base apk when the patch is tried to apply.             * we can use git rev, svn rev or simply versionCode.             * we will gen the tinkerId in your manifest automatic             */</span>            tinkerId <span class="token operator">=</span> <span class="token function">getTinkerIdValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">/**             * if keepDexApply is true, class in which dex refer to the old apk.             * open this can reduce the dex diff file size.             */</span>            keepDexApply <span class="token operator">=</span> <span class="token boolean">false</span>            <span class="token comment" spellcheck="true">//是否开启加固</span>            isProtectedApp <span class="token operator">=</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span>        dex <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/**             * optional，default 'jar'             * only can be 'raw' or 'jar'. for raw, we would keep its original format             * for jar, we would repack dexes with zip format.             * if you want to support below 14, you must use jar             * or you want to save rom or check quicker, you can use raw mode also             */</span>            dexMode <span class="token operator">=</span> <span class="token string">"jar"</span>            <span class="token comment" spellcheck="true">/**             * necessary，default '[]'             * what dexes in apk are expected to deal with tinkerPatch             * it support * or ? pattern.             */</span>            pattern <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"classes*.dex"</span><span class="token punctuation">,</span>                       <span class="token string">"assets/secondary-dex-?.jar"</span><span class="token punctuation">]</span>            <span class="token comment" spellcheck="true">/**             * necessary，default '[]'             * Warning, it is very very important, loader classes can't change with patch.             * thus, they will be removed from patch dexes.             * you must put the following class into main dex.             * Simply, you should add your own application {@code tinker.sample.android.SampleApplication}             * own tinkerLoader, and the classes you use in them             *             */</span>            loader <span class="token operator">=</span> <span class="token punctuation">[</span>                    <span class="token comment" spellcheck="true">//use sample, let BaseBuildInfo unchangeable with tinker</span>                    <span class="token string">"tinker.sample.android.app.BaseBuildInfo"</span>            <span class="token punctuation">]</span>        <span class="token punctuation">}</span>        lib <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/**             * optional，default '[]'             * what library in apk are expected to deal with tinkerPatch             * it support * or ? pattern.             * for library in assets, we would just recover them in the patch directory             * you can get them in TinkerLoadResult with Tinker             */</span>            pattern <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"lib/*/*.so"</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span>        res <span class="token punctuation">{</span>            <span class="token operator">/</span><span class="token operator">*</span><span class="token operator">*</span>             <span class="token operator">*</span> optional，<span class="token keyword">default</span> <span class="token string">'[]'</span>             <span class="token operator">*</span> what resource in apk are expected to deal with tinkerPatch             <span class="token operator">*</span> it support <span class="token operator">*</span> or <span class="token operator">?</span> pattern<span class="token punctuation">.</span>             <span class="token operator">*</span> you must include all your resources in apk here<span class="token punctuation">,</span>             <span class="token operator">*</span> otherwise<span class="token punctuation">,</span> they won't repack in the <span class="token keyword">new</span> <span class="token class-name">apk</span> resources<span class="token punctuation">.</span>             <span class="token operator">*</span><span class="token operator">/</span>            pattern <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"res/*"</span><span class="token punctuation">,</span> <span class="token string">"assets/*"</span><span class="token punctuation">,</span> <span class="token string">"resources.arsc"</span><span class="token punctuation">,</span> <span class="token string">"AndroidManifest.xml"</span><span class="token punctuation">]</span>            <span class="token operator">/</span><span class="token operator">*</span><span class="token operator">*</span>             <span class="token operator">*</span> optional，<span class="token keyword">default</span> <span class="token string">'[]'</span>             <span class="token operator">*</span> the resource file exclude patterns<span class="token punctuation">,</span> ignore add<span class="token punctuation">,</span> delete or modify resource change             <span class="token operator">*</span> it support <span class="token operator">*</span> or <span class="token operator">?</span> pattern<span class="token punctuation">.</span>             <span class="token operator">*</span> Warning<span class="token punctuation">,</span> we can only use <span class="token keyword">for</span> files no relative with resources<span class="token punctuation">.</span>arsc             <span class="token operator">*</span><span class="token operator">/</span>            ignoreChange <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"assets/sample_meta.txt"</span><span class="token punctuation">]</span>            <span class="token comment" spellcheck="true">/**             * default 100kb             * for modify resource, if it is larger than 'largeModSize'             * we would like to use bsdiff algorithm to reduce patch file size             */</span>            largeModSize <span class="token operator">=</span> <span class="token number">100</span>        <span class="token punctuation">}</span>        packageConfig <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/**             * optional，default 'TINKER_ID, TINKER_ID_VALUE' 'NEW_TINKER_ID, NEW_TINKER_ID_VALUE'             * package meta file gen. path is assets/package_meta.txt in patch file             * you can use securityCheck.getPackageProperties() in your ownPackageCheck method             * or TinkerLoadResult.getPackageConfigByName             * we will get the TINKER_ID from the old apk manifest for you automatic,             * other config files (such as patchMessage below)is not necessary             */</span>            <span class="token function">configField</span><span class="token punctuation">(</span><span class="token string">"patchMessage"</span><span class="token punctuation">,</span> <span class="token string">"tinker is sample to use"</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">/**             * just a sample case, you can use such as sdkVersion, brand, channel...             * you can parse it in the SamplePatchListener.             * Then you can use patch conditional!             */</span>            <span class="token function">configField</span><span class="token punctuation">(</span><span class="token string">"platform"</span><span class="token punctuation">,</span> <span class="token string">"all"</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">/**             * patch version via packageConfig             */</span>            <span class="token function">configField</span><span class="token punctuation">(</span><span class="token string">"patchVersion"</span><span class="token punctuation">,</span> <span class="token string">"1.0"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//or you can add config filed outside, or get meta value from old apk</span>        <span class="token comment" spellcheck="true">//project.tinkerPatch.packageConfig.configField("test1", project.tinkerPatch.packageConfig.getMetaDataFromOldApk("Test"))</span>        <span class="token comment" spellcheck="true">//project.tinkerPatch.packageConfig.configField("test2", "sample")</span>        <span class="token comment" spellcheck="true">/**         * if you don't use zipArtifact or path, we just use 7za to try         */</span>        sevenZip <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/**             * optional，default '7za'             * the 7zip artifact path, it will use the right 7za with your platform             */</span>            zipArtifact <span class="token operator">=</span> <span class="token string">"com.tencent.mm:SevenZip:1.1.10"</span>            <span class="token comment" spellcheck="true">/**             * optional，default '7za'             * you can specify the 7za path yourself, it will overwrite the zipArtifact value             */</span><span class="token comment" spellcheck="true">//        path = "/usr/local/bin/7za"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> flavors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    project<span class="token punctuation">.</span>android<span class="token punctuation">.</span>productFlavors<span class="token punctuation">.</span>each <span class="token punctuation">{</span>flavor <span class="token operator">-</span><span class="token operator">></span>        flavors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>flavor<span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">boolean</span> hasFlavors <span class="token operator">=</span> flavors<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span>    def date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"MMdd-HH-mm-ss"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">/**     * bak apk and mapping     */</span>    android<span class="token punctuation">.</span>applicationVariants<span class="token punctuation">.</span>all <span class="token punctuation">{</span> variant <span class="token operator">-</span><span class="token operator">></span>        <span class="token comment" spellcheck="true">/**         * task type, you want to bak         */</span>        def taskName <span class="token operator">=</span> variant<span class="token punctuation">.</span>name        tasks<span class="token punctuation">.</span>all <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"assemble${taskName.capitalize()}"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                it<span class="token punctuation">.</span>doLast <span class="token punctuation">{</span>                    copy <span class="token punctuation">{</span>                        def fileNamePrefix <span class="token operator">=</span> <span class="token string">"${project.name}-${variant.baseName}"</span>                        def newFileNamePrefix <span class="token operator">=</span> hasFlavors <span class="token operator">?</span> <span class="token string">"${fileNamePrefix}"</span> <span class="token operator">:</span> <span class="token string">"${fileNamePrefix}-${date}"</span>                        def destPath <span class="token operator">=</span> hasFlavors <span class="token operator">?</span> <span class="token function">file</span><span class="token punctuation">(</span><span class="token string">"${bakPath}/${project.name}-${date}/${variant.flavorName}"</span><span class="token punctuation">)</span> <span class="token operator">:</span> bakPath                        from variant<span class="token punctuation">.</span>outputs<span class="token punctuation">.</span>outputFile                        into destPath                        rename <span class="token punctuation">{</span> String fileName <span class="token operator">-</span><span class="token operator">></span>                            fileName<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"${fileNamePrefix}.apk"</span><span class="token punctuation">,</span> <span class="token string">"${newFileNamePrefix}.apk"</span><span class="token punctuation">)</span>                        <span class="token punctuation">}</span>                        from <span class="token string">"${buildDir}/outputs/mapping/${variant.dirName}/mapping.txt"</span>                        into destPath                        rename <span class="token punctuation">{</span> String fileName <span class="token operator">-</span><span class="token operator">></span>                            fileName<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"mapping.txt"</span><span class="token punctuation">,</span> <span class="token string">"${newFileNamePrefix}-mapping.txt"</span><span class="token punctuation">)</span>                        <span class="token punctuation">}</span>                        from <span class="token string">"${buildDir}/intermediates/symbols/${variant.dirName}/R.txt"</span>                        into destPath                        rename <span class="token punctuation">{</span> String fileName <span class="token operator">-</span><span class="token operator">></span>                            fileName<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"R.txt"</span><span class="token punctuation">,</span> <span class="token string">"${newFileNamePrefix}-R.txt"</span><span class="token punctuation">)</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    project<span class="token punctuation">.</span>afterEvaluate <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//sample use for build all flavor for one time</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>hasFlavors<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">task</span><span class="token punctuation">(</span>tinkerPatchAllFlavorRelease<span class="token punctuation">)</span> <span class="token punctuation">{</span>                group <span class="token operator">=</span> <span class="token string">'tinker'</span>                def originOldPath <span class="token operator">=</span> <span class="token function">getTinkerBuildFlavorDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>String flavor <span class="token operator">:</span> flavors<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    def tinkerTask <span class="token operator">=</span> tasks<span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span><span class="token string">"tinkerPatch${flavor.capitalize()}Release"</span><span class="token punctuation">)</span>                    dependsOn tinkerTask                    def preAssembleTask <span class="token operator">=</span> tasks<span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span><span class="token string">"process${flavor.capitalize()}ReleaseManifest"</span><span class="token punctuation">)</span>                    preAssembleTask<span class="token punctuation">.</span>doFirst <span class="token punctuation">{</span>                        String flavorName <span class="token operator">=</span> preAssembleTask<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> preAssembleTask<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> preAssembleTask<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">15</span><span class="token punctuation">)</span>                        project<span class="token punctuation">.</span>tinkerPatch<span class="token punctuation">.</span>oldApk <span class="token operator">=</span> <span class="token string">"${originOldPath}/${flavorName}/${project.name}-${flavorName}-release.apk"</span>                        project<span class="token punctuation">.</span>tinkerPatch<span class="token punctuation">.</span>buildConfig<span class="token punctuation">.</span>applyMapping <span class="token operator">=</span> <span class="token string">"${originOldPath}/${flavorName}/${project.name}-${flavorName}-release-mapping.txt"</span>                        project<span class="token punctuation">.</span>tinkerPatch<span class="token punctuation">.</span>buildConfig<span class="token punctuation">.</span>applyResourceMapping <span class="token operator">=</span> <span class="token string">"${originOldPath}/${flavorName}/${project.name}-${flavorName}-release-R.txt"</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token function">task</span><span class="token punctuation">(</span>tinkerPatchAllFlavorDebug<span class="token punctuation">)</span> <span class="token punctuation">{</span>                group <span class="token operator">=</span> <span class="token string">'tinker'</span>                def originOldPath <span class="token operator">=</span> <span class="token function">getTinkerBuildFlavorDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>String flavor <span class="token operator">:</span> flavors<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    def tinkerTask <span class="token operator">=</span> tasks<span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span><span class="token string">"tinkerPatch${flavor.capitalize()}Debug"</span><span class="token punctuation">)</span>                    dependsOn tinkerTask                    def preAssembleTask <span class="token operator">=</span> tasks<span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span><span class="token string">"process${flavor.capitalize()}DebugManifest"</span><span class="token punctuation">)</span>                    preAssembleTask<span class="token punctuation">.</span>doFirst <span class="token punctuation">{</span>                        String flavorName <span class="token operator">=</span> preAssembleTask<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> preAssembleTask<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> preAssembleTask<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">13</span><span class="token punctuation">)</span>                        project<span class="token punctuation">.</span>tinkerPatch<span class="token punctuation">.</span>oldApk <span class="token operator">=</span> <span class="token string">"${originOldPath}/${flavorName}/${project.name}-${flavorName}-debug.apk"</span>                        project<span class="token punctuation">.</span>tinkerPatch<span class="token punctuation">.</span>buildConfig<span class="token punctuation">.</span>applyMapping <span class="token operator">=</span> <span class="token string">"${originOldPath}/${flavorName}/${project.name}-${flavorName}-debug-mapping.txt"</span>                        project<span class="token punctuation">.</span>tinkerPatch<span class="token punctuation">.</span>buildConfig<span class="token punctuation">.</span>applyResourceMapping <span class="token operator">=</span> <span class="token string">"${originOldPath}/${flavorName}/${project.name}-${flavorName}-debug-R.txt"</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//Tinker相关配置end======================================</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-自定义Application类"><a href="#4-2-自定义Application类" class="headerlink" title="4.2 自定义Application类"></a>4.2 自定义Application类</h3><p>程序启动时会加载默认的Application类，这导致补丁包无法对它做修改。所以Tinker官方说不建议自己去实现Application，而是由Tinker自动生成。即需要创建一个SampleApplication类，继承DefaultApplicationLike，然后将我们自己的MyApplication中所有逻辑放在SampleApplication中的onCreate中。最后需要将我们项目中之前的MyApplication类删除。如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>wildma<span class="token punctuation">.</span>wildmatinker<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>TargetApi<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>app<span class="token punctuation">.</span>Application<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>content<span class="token punctuation">.</span>Context<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>content<span class="token punctuation">.</span>Intent<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Build<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>multidex<span class="token punctuation">.</span>MultiDex<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>tencent<span class="token punctuation">.</span>tinker<span class="token punctuation">.</span>anno<span class="token punctuation">.</span>DefaultLifeCycle<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>tencent<span class="token punctuation">.</span>tinker<span class="token punctuation">.</span>lib<span class="token punctuation">.</span>tinker<span class="token punctuation">.</span>Tinker<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>tencent<span class="token punctuation">.</span>tinker<span class="token punctuation">.</span>lib<span class="token punctuation">.</span>tinker<span class="token punctuation">.</span>TinkerInstaller<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>tencent<span class="token punctuation">.</span>tinker<span class="token punctuation">.</span>loader<span class="token punctuation">.</span>app<span class="token punctuation">.</span>DefaultApplicationLike<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>tencent<span class="token punctuation">.</span>tinker<span class="token punctuation">.</span>loader<span class="token punctuation">.</span>shareutil<span class="token punctuation">.</span>ShareConstants<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>wildma<span class="token punctuation">.</span>wildmatinker<span class="token punctuation">.</span>tinker<span class="token punctuation">.</span>MyLogImp<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>wildma<span class="token punctuation">.</span>wildmatinker<span class="token punctuation">.</span>tinker<span class="token punctuation">.</span>TinkerManager<span class="token punctuation">;</span><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unused"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@DefaultLifeCycle</span><span class="token punctuation">(</span>  application <span class="token operator">=</span> <span class="token string">"com.wildma.wildmatinker.MyApplication"</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">// 自定义生成</span>                    flags <span class="token operator">=</span> ShareConstants<span class="token punctuation">.</span>TINKER_ENABLE_ALL<span class="token punctuation">,</span>                    loadVerifyFlag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SampleApplication</span> <span class="token keyword">extends</span> <span class="token class-name">DefaultApplicationLike</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> SampleApplication sampleApplication<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">SampleApplication</span><span class="token punctuation">(</span>Application application<span class="token punctuation">,</span> <span class="token keyword">int</span> tinkerFlags<span class="token punctuation">,</span> <span class="token keyword">boolean</span> tinkerLoadVerifyFlag<span class="token punctuation">,</span>                             <span class="token keyword">long</span> applicationStartElapsedTime<span class="token punctuation">,</span> <span class="token keyword">long</span> applicationStartMillisTime<span class="token punctuation">,</span> Intent tinkerResultIntent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>application<span class="token punctuation">,</span> tinkerFlags<span class="token punctuation">,</span> tinkerLoadVerifyFlag<span class="token punctuation">,</span> applicationStartElapsedTime<span class="token punctuation">,</span> applicationStartMillisTime<span class="token punctuation">,</span> tinkerResultIntent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sampleApplication <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将我们自己的MyApplication中的所有逻辑放在这里，例如初始化一些第三方</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@TargetApi</span><span class="token punctuation">(</span>Build<span class="token punctuation">.</span>VERSION_CODES<span class="token punctuation">.</span>ICE_CREAM_SANDWICH<span class="token punctuation">)</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onBaseContextAttached</span><span class="token punctuation">(</span>Context base<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onBaseContextAttached</span><span class="token punctuation">(</span>base<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 其原理是分包架构，所以在加载初要加载其余的分包</span>        MultiDex<span class="token punctuation">.</span><span class="token function">install</span><span class="token punctuation">(</span>base<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Tinker管理类，保存当前对象</span>        TinkerManager<span class="token punctuation">.</span><span class="token function">setTinkerApplicationLike</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 崩溃保护</span>        TinkerManager<span class="token punctuation">.</span><span class="token function">initFastCrashProtect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 是否重试</span>        TinkerManager<span class="token punctuation">.</span><span class="token function">setUpgradeRetryEnable</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//Log 实现，打印加载补丁的信息</span>        TinkerInstaller<span class="token punctuation">.</span><span class="token function">setLogIml</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyLogImp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 运行Tinker ，通过Tinker添加一些基本配置</span>        TinkerManager<span class="token punctuation">.</span><span class="token function">installTinker</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Tinker tinker <span class="token operator">=</span> Tinker<span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span><span class="token function">getApplication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@TargetApi</span><span class="token punctuation">(</span>Build<span class="token punctuation">.</span>VERSION_CODES<span class="token punctuation">.</span>ICE_CREAM_SANDWICH<span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerActivityLifecycleCallbacks</span><span class="token punctuation">(</span>Application<span class="token punctuation">.</span>ActivityLifecycleCallbacks callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 生命周期，默认配置</span>        <span class="token function">getApplication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">registerActivityLifecycleCallbacks</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取SampleApplication实例     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> SampleApplication <span class="token function">getSampleApplication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> sampleApplication<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中DefaultLifeCycle中的MyApplication为我们真正的Application，清单文件中的Application的name改为MyApplication的全路径。如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span>application        android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"com.wildma.wildmatinker.MyApplication"</span>        android<span class="token operator">:</span>allowBackup<span class="token operator">=</span><span class="token string">"true"</span>        android<span class="token operator">:</span>icon<span class="token operator">=</span><span class="token string">"@mipmap/ic_launcher"</span>        android<span class="token operator">:</span>label<span class="token operator">=</span><span class="token string">"@string/app_name"</span>        android<span class="token operator">:</span>supportsRtl<span class="token operator">=</span><span class="token string">"true"</span>        android<span class="token operator">:</span>theme<span class="token operator">=</span><span class="token string">"@style/AppTheme"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>activity android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">".MainActivity"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>intent<span class="token operator">-</span>filter<span class="token operator">></span>                <span class="token operator">&lt;</span>action android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.intent.action.MAIN"</span><span class="token operator">/</span><span class="token operator">></span>                <span class="token operator">&lt;</span>category android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.intent.category.LAUNCHER"</span><span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>intent<span class="token operator">-</span>filter<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>activity<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>application<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-3-添加Tinker相关类"><a href="#4-3-添加Tinker相关类" class="headerlink" title="4.3 添加Tinker相关类"></a>4.3 添加Tinker相关类</h3><p>这些类主要是加载补丁包过程的回调，打印log，崩溃保护等。具体见 <a href="https://github.com/Tencent/tinker/wiki/Tinker-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%89%A9%E5%B1%95#%E8%87%AA%E5%AE%9A%E4%B9%89application%E7%B1%BB" target="_blank" rel="noopener">Tinker 自定义扩展</a><br><img src="fdabc636/2.jpg" alt></p><h3 id="4-4-在清单文件添加读写sd卡的权限"><a href="#4-4-在清单文件添加读写sd卡的权限" class="headerlink" title="4.4 在清单文件添加读写sd卡的权限"></a>4.4 在清单文件添加读写sd卡的权限</h3><pre class="line-numbers language-java"><code class="language-java">    <span class="token operator">&lt;</span>uses<span class="token operator">-</span>permission android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.permission.READ_EXTERNAL_STORAGE"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>uses<span class="token operator">-</span>permission android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.permission.WRITE_EXTERNAL_STORAGE"</span><span class="token operator">/</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="4-5-加载补丁包代码"><a href="#4-5-加载补丁包代码" class="headerlink" title="4.5 加载补丁包代码"></a>4.5 加载补丁包代码</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>wildma<span class="token punctuation">.</span>wildmatinker<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//加载补丁包</span>        TinkerInstaller<span class="token punctuation">.</span><span class="token function">onReceiveUpgradePatch</span><span class="token punctuation">(</span><span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Environment<span class="token punctuation">.</span><span class="token function">getExternalStorageDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"/patch_signed_7zip"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//Tinker相关配置</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onResume</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onResume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Utils<span class="token punctuation">.</span><span class="token function">setBackground</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//Tinker相关配置</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onPause</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onPause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Utils<span class="token punctuation">.</span><span class="token function">setBackground</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中第9行代码的路径为我们放在sd卡中的补丁包路径。</p><h2 id="五、测试Tinker热修复"><a href="#五、测试Tinker热修复" class="headerlink" title="五、测试Tinker热修复"></a>五、测试Tinker热修复</h2><p>这里只讲release版本。<br>（1）按正常流程打包出带签名的APK，并装到手机上<br>打包完成，会自动在项目的app/build文件夹下生成bakAPK文件夹并有三个文件（基础包的一些文件），如图：</p><p><img src="fdabc636/3.jpg" alt></p><p>（2）将上面的三个文件路径复制到app.build中对应的位置，如图<br><img src="fdabc636/4.jpg" alt></p><p>（3）修复bug（测试的时候随便改动一点代码）</p><p>（4）运行补丁命令获取补丁包<br>运行补丁命令，单击AS右侧顶部gradle–&gt;双击tinkerPatchRelease，如图:<br>(也可以直接在Android studio中的Terminal中输入命令gradlew tinkerPatchRelease)<br><img src="fdabc636/5.jpg" alt></p><p>运行完成会在build-&gt;outputs-&gt;tinkerPatch-&gt;release文件夹中生成一个名为patch_signed_7zip.apk的补丁包，如图：<br><img src="fdabc636/6.jpg" alt></p><p>（5）将该补丁包复制到之前加载补丁包中对应的SD卡路劲即可。<br>注意：该补丁包需要重新命名，不要以.apk结尾，因为有些运营商会挟持以.apk结尾的资源，名字要与之前加载补丁包的名字相同，例如Demo中命名为patch_signed_7zip。</p><p>（6）运行项目发现bug并没有修复，因为tinker是不支持即时修复的，关掉APP重启。恭喜你！bug已修复！</p><p>注意事项：</p><p>Tinker集成在这里讲的已经非常详细了，有不足的地方希望指出。遇到不懂的问题都可以直接在博客下评论问我，只要我遇到过并且能回答出来的都会乐意回答。</p><p>Demo下载地址：<a href="https://github.com/wildma/WildmaTinker" target="_blank" rel="noopener">https://github.com/wildma/WildmaTinker</a><br>如果对你有帮助请点赞，star支持下哈~</p><h2 id="热修复Tinker系列文章"><a href="#热修复Tinker系列文章" class="headerlink" title="热修复Tinker系列文章"></a>热修复Tinker系列文章</h2><ul><li><a href="https://wildma.github.io/hot-fix-tinker-1-integrate/">热修复框架Tinker最完整讲解（01）——集成之路</a></li><li><a href="https://wildma.github.io/hot-fix-tinker-2-walle/">热修复框架Tinker最完整讲解（02）——加入Walle多渠道打包</a></li><li><a href="https://wildma.github.io/hot-fix-tinker-3-question/">热修复框架Tinker最完整讲解（03）——使用Tinker常见问题</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> 第三方集成 </category>
          
          <category> 热修复 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 热修复 </tag>
            
            <tag> Tinker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scrollview 嵌套百度地图 MapView 导致滑动有黑边或者阴影问题</title>
      <link href="/blog/e1990d7c.html"/>
      <url>/blog/e1990d7c.html</url>
      
        <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>项目中需求经常会出现Scrollview嵌套百度地图MapView，如下：<br>但是这样嵌套会出现Scrollview滑动的时候百度地图周边有黑边或者阴影</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token operator">&lt;</span>ScrollView        android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"match_parent"</span>        android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"match_parent"</span>        android<span class="token operator">:</span>scrollbars<span class="token operator">=</span><span class="token string">"none"</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>其他组件<span class="token operator">--</span><span class="token operator">></span>                <span class="token operator">&lt;</span>com<span class="token punctuation">.</span>baidu<span class="token punctuation">.</span>mapapi<span class="token punctuation">.</span>map<span class="token punctuation">.</span>MapView                    android<span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">"@+id/map_mapview"</span>                    android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"match_parent"</span>                    android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"@dimen/dimen_154dp"</span>                    android<span class="token operator">:</span>clickable<span class="token operator">=</span><span class="token string">"true"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>ScrollView<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>将MapView换成TextureMapView即可。如下：</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token operator">&lt;</span>ScrollView        android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"match_parent"</span>        android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"match_parent"</span>        android<span class="token operator">:</span>scrollbars<span class="token operator">=</span><span class="token string">"none"</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>其他组件<span class="token operator">--</span><span class="token operator">></span>                <span class="token operator">&lt;</span>com<span class="token punctuation">.</span>baidu<span class="token punctuation">.</span>mapapi<span class="token punctuation">.</span>map<span class="token punctuation">.</span>TextureMapView                    android<span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">"@+id/map_mapview"</span>                    android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"match_parent"</span>                    android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"@dimen/dimen_154dp"</span>                    android<span class="token operator">:</span>clickable<span class="token operator">=</span><span class="token string">"true"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>ScrollView<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>3.6.0版本之前由于使用系统GLSurfaceView导致由于系统问题出现的黑屏等，在新版地图SDK3.6.0中可使用TextureMapView作为地图视图控件，解决此类问题，但要求系统在4.0以上并且开启强制GPU渲染。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> 问题记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 百度地图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试时最常问到的 Handler 消息机制源码详解</title>
      <link href="/blog/7be5d111.html"/>
      <url>/blog/7be5d111.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>辞职后（非当前时间），最近又开始加入找工作的大队伍中。不得不说今年找工作确实比以前难了。从几个朋友说他们公司快倒闭的情况也验证了这一点。最近面了2家，竟然都问到了Handler消息机制，虽然以前看过源码，但是很久没看，也忘得差不多了，总体的虽然都讲的出，但是却没有彻底征服面试官，所以自己干脆再总结一遍写篇博客记录下来好了。</p><h2 id="一、正确阅读源码的姿势"><a href="#一、正确阅读源码的姿势" class="headerlink" title="一、正确阅读源码的姿势"></a>一、正确阅读源码的姿势</h2><p>有些人阅读源码是力求每行代码都要读懂，我个人感觉这个方法是错误的。正确的方法是应该按平时你使用某个框架或者某个系统源码的执行流程，抓重点去看。例如看Handler源码，应该按照创建Handler-发送消息-处理消息的执行流程去看。并且要看最新版本的源码。例如Android2.3与Android7.0的Handler源码相差还是很大的，Android2.3中Handler的构造方法是没有进行封装的，Android7.0则进行了封装。Android2.3中Handler回收消息的时候消息池大小判断不严谨，但是高版本的就改过来了。</p><h2 id="二、Handler的用法"><a href="#二、Handler的用法" class="headerlink" title="二、Handler的用法"></a>二、Handler的用法</h2><p>Handler最常用的用法，即子线程完成耗时任务然后通知主线程更新UI，步骤为：创建Handler-发送消息-处理消息。如下：</p><pre class="line-numbers language-java"><code class="language-java">        <span class="token comment" spellcheck="true">//2，发送消息（子线程）</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Message message <span class="token operator">=</span> Message<span class="token punctuation">.</span><span class="token function">obtain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                message<span class="token punctuation">.</span>what <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                message<span class="token punctuation">.</span>arg1 <span class="token operator">=</span> <span class="token number">666</span><span class="token punctuation">;</span>                mHandler<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> TAG <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//1，创建Handler（主线程）</span>        <span class="token keyword">final</span> Handler mHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleMessage</span><span class="token punctuation">(</span>Message msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//3,处理消息</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>what <span class="token operator">==</span> TAG<span class="token punctuation">)</span><span class="token punctuation">{</span>                    tvText<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>arg1<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、开始阅读源码"><a href="#三、开始阅读源码" class="headerlink" title="三、开始阅读源码"></a>三、开始阅读源码</h2><p>现在我们就根据上面Handler使用的执行流程去解析源码。</p><h3 id="3-1-创建Handler—-Handler-handler-new-Handler"><a href="#3-1-创建Handler—-Handler-handler-new-Handler" class="headerlink" title="3.1 创建Handler—-Handler handler = new Handler();"></a>3.1 创建Handler—-Handler handler = new Handler();</h3><p>有人问：为什么要在主线程中创建Handler，而不在子线程中创建呢？<br>因为如果你在子线程创建Handler（如下），程序则会崩溃，并且会报错误：Can’t create handler inside thread that has not called Looper.prepare() ，翻译为：不能在没有调用Looper.prepare() 的线程中创建Handler。</p><pre class="line-numbers language-java"><code class="language-java">        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Handler handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那如果在子线程中先调用一下Looper.prepare()呢，如下：</p><pre class="line-numbers language-java"><code class="language-java">        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Looper<span class="token punctuation">.</span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                Handler handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>果然程序就能正常运行了。玄机就藏在源码当中！</p><p>首先我们点击我们创建的Handler进去源码是这样的：<br>【Handler.java】</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token function">Handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后再跟到这个构造方法里，发现是走了有参构造<br>【Handler.java】</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token function">Handler</span><span class="token punctuation">(</span>Callback callback<span class="token punctuation">,</span> <span class="token keyword">boolean</span> async<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>FIND_POTENTIAL_LEAKS<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Handler</span><span class="token operator">></span> klass <span class="token operator">=</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>klass<span class="token punctuation">.</span><span class="token function">isAnonymousClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> klass<span class="token punctuation">.</span><span class="token function">isMemberClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> klass<span class="token punctuation">.</span><span class="token function">isLocalClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                    <span class="token punctuation">(</span>klass<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> Modifier<span class="token punctuation">.</span>STATIC<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"The following Handler class should be static or leaks might occur: "</span> <span class="token operator">+</span>                    klass<span class="token punctuation">.</span><span class="token function">getCanonicalName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        mLooper <span class="token operator">=</span> Looper<span class="token punctuation">.</span><span class="token function">myLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mLooper <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>                <span class="token string">"Can't create handler inside thread that has not called Looper.prepare()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        mQueue <span class="token operator">=</span> mLooper<span class="token punctuation">.</span>mQueue<span class="token punctuation">;</span>        mCallback <span class="token operator">=</span> callback<span class="token punctuation">;</span>        mAsynchronous <span class="token operator">=</span> async<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，在第13行抛出的异常错误刚好就是我们刚刚上面报的错误！报错的原因是mLooper对象为空了，而mLooper对象则是在第10行代码中获取的，接下来我们点进去看看myLooper()这个方法，如下：<br>【Looper.java】</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> Looper <span class="token function">myLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> sThreadLocal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以看到，mLooper对象是通过sThreadLocal的get()方法获取的。由此可以联想到应该是有sThreadLocal.set()方法设置了mLooper对象。在当前类中查找，果然找到了。如下：<br>【Looper.java】</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> quitAllowed<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sThreadLocal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"Only one Looper may be created per thread"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        sThreadLocal<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Looper</span><span class="token punctuation">(</span>quitAllowed<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>果然，在第5行sThreadLocal.set()方法正是在Looper.prepare()方法里面。这段代码比较简单：首先判断sThreadLocal中有没有Looper对象，有就抛出异常，没有则new一个新的Looper进去。这样就得出结论：之前为什么会报如上错误了（不能在没有调用Looper.prepare() 的线程中创建Handler）。</p><p>但是但是！为什么在主线程中创建Handler之前就不用调用Looper.prepare() 呢？？<br>查找资料发现，Android程序的入口中，系统就默认帮我们调用了Looper.prepare()方法。<br>Android程序的入口在ActivityThread中的main()方法，ActivityThread这个类在Android studio中是看不到的，只能利用工具source insight来看。代码如下：<br>【ActivityThread.java】</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    SamplingProfilerIntegration<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    CloseGuard<span class="token punctuation">.</span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Environment<span class="token punctuation">.</span><span class="token function">initForCurrentUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    EventLogger<span class="token punctuation">.</span><span class="token function">setReporter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">EventLoggingReporter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Process<span class="token punctuation">.</span><span class="token function">setArgV0</span><span class="token punctuation">(</span><span class="token string">"&lt;pre-initialized>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Looper<span class="token punctuation">.</span><span class="token function">prepareMainLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ActivityThread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActivityThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    thread<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>sMainThreadHandler <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        sMainThreadHandler <span class="token operator">=</span> thread<span class="token punctuation">.</span><span class="token function">getHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    AsyncTask<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Looper<span class="token punctuation">.</span><span class="token function">myLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setMessageLogging</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LogPrinter</span><span class="token punctuation">(</span>Log<span class="token punctuation">.</span>DEBUG<span class="token punctuation">,</span> <span class="token string">"ActivityThread"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Looper<span class="token punctuation">.</span><span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"Main thread loop unexpectedly exited"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，在第7行调用了Looper.prepareMainLooper()方法，跟进去，prepareMainLooper()方法中又调用了prepare()方法<br>【ActivityThread.java】  </p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">prepareMainLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setMainLooper</span><span class="token punctuation">(</span><span class="token function">myLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Process<span class="token punctuation">.</span><span class="token function">supportsProcesses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">myLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mQueue<span class="token punctuation">.</span>mQuitAllowed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样就说明了在主线程中创建Handler同样需要调用Looper.prepare()方法，只是这个方法系统已经帮我们调用了。</p><p>接下来Handler的有参构造就只剩下面三行了。</p><pre class="line-numbers language-java"><code class="language-java">        mQueue <span class="token operator">=</span> mLooper<span class="token punctuation">.</span>mQueue<span class="token punctuation">;</span>        mCallback <span class="token operator">=</span> callback<span class="token punctuation">;</span>        mAsynchronous <span class="token operator">=</span> async<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以看到，一开始我们用的是无参构造，即传入了一个null的Callback，async的值也是false，所以这里就不考虑这2行，mQueue = mLooper.mQueue;则是获取一个消息队列MessageQueue。用于将所有收到的消息以队列的形式进行排列，并提供入队和出队的方法。MessageQueue这个类是在Looper的构造函数中创建的，因此一个Looper也就对应了一个MessageQueue。</p><p><strong>小总结：主线程中可以直接创建Handler，在子线程中需要先调用Looper.prepare()才能创建Handler。Handler的构造方法中主要是获取轮询器（即Looper对象）和消息队列（即MessageQueue对象）。</strong></p><h3 id="3-2-发送消息—-mHandler-sendMessage-message"><a href="#3-2-发送消息—-mHandler-sendMessage-message" class="headerlink" title="3.2 发送消息—-mHandler.sendMessage(message);"></a>3.2 发送消息—-mHandler.sendMessage(message);</h3><p>点击sendMessage()方法进去，如下：<br>【Handler.java】</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">sendMessage</span><span class="token punctuation">(</span>Message msg<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">sendMessageDelayed</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，调用了sendMessageDelayed()方法，点进去，如下：<br>【Handler.java】</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">sendMessageDelayed</span><span class="token punctuation">(</span>Message msg<span class="token punctuation">,</span> <span class="token keyword">long</span> delayMillis<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>delayMillis <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            delayMillis <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">sendMessageAtTime</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> SystemClock<span class="token punctuation">.</span><span class="token function">uptimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> delayMillis<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，delayMillis &lt; 0判断是为了防止用户传入的延迟参数为负数。之后又调用了sendMessageAtTime()方法，点进去，如下：<br>【Handler.java】</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">sendMessageAtTime</span><span class="token punctuation">(</span>Message msg<span class="token punctuation">,</span> <span class="token keyword">long</span> uptimeMillis<span class="token punctuation">)</span> <span class="token punctuation">{</span>        MessageQueue queue <span class="token operator">=</span> mQueue<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>queue <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            RuntimeException e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>                    <span class="token keyword">this</span> <span class="token operator">+</span> <span class="token string">" sendMessageAtTime() called with no mQueue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Log<span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span><span class="token string">"Looper"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">enqueueMessage</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> msg<span class="token punctuation">,</span> uptimeMillis<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，我们代码中调用sendMessage()方法，最终就是走的sendMessageAtTime()方法。<br>而且其他发送消息的方法除了sendMessageAtFrontOfQueue(),例如sendMessageDelayed()，sendEmptyMessageDelayed()最终都会走sendMessageAtTime()方法。</p><p>sendMessageAtTime()方法接收两个参数，其中msg参数就是我们发送的Message对象，而uptimeMillis参数则表示发送消息的时间，它的值等于自系统开机到当前时间的毫秒数再加上延迟时间，如果你调用的不是sendMessageDelayed()方法，延迟时间就为0。第二行中的mQueue则是我们在创建Handler的时候获取的消息队列，然后将这三个参数都传递到enqueueMessage()方法中。<br>【Handler.java】</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">enqueueMessage</span><span class="token punctuation">(</span>MessageQueue queue<span class="token punctuation">,</span> Message msg<span class="token punctuation">,</span> <span class="token keyword">long</span> uptimeMillis<span class="token punctuation">)</span> <span class="token punctuation">{</span>        msg<span class="token punctuation">.</span>target <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mAsynchronous<span class="token punctuation">)</span> <span class="token punctuation">{</span>            msg<span class="token punctuation">.</span><span class="token function">setAsynchronous</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> queue<span class="token punctuation">.</span><span class="token function">enqueueMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> uptimeMillis<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，enqueueMessage()方法中，首先将当前的Handler绑定给msg.target，接着调用MessageQueue的enqueueMessage()方法</p><p>MessageQueue的enqueueMessage()方法则是消息入队的方法，点击进去，如下：<br>【MessageQueue.java】</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">boolean</span> <span class="token function">enqueueMessage</span><span class="token punctuation">(</span>Message msg<span class="token punctuation">,</span> <span class="token keyword">long</span> when<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>msg<span class="token punctuation">.</span>target <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Message must have a target."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">isInUse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>msg <span class="token operator">+</span> <span class="token string">" This message is already in use."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mQuitting<span class="token punctuation">)</span> <span class="token punctuation">{</span>                IllegalStateException e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>                        msg<span class="token punctuation">.</span>target <span class="token operator">+</span> <span class="token string">" sending message to a Handler on a dead thread"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Log<span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>                msg<span class="token punctuation">.</span><span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            msg<span class="token punctuation">.</span><span class="token function">markInUse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            msg<span class="token punctuation">.</span>when <span class="token operator">=</span> when<span class="token punctuation">;</span>            Message p <span class="token operator">=</span> mMessages<span class="token punctuation">;</span>            <span class="token keyword">boolean</span> needWake<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> null <span class="token operator">||</span> when <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> when <span class="token operator">&lt;</span> p<span class="token punctuation">.</span>when<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// New head, wake up the event queue if blocked.</span>                msg<span class="token punctuation">.</span>next <span class="token operator">=</span> p<span class="token punctuation">;</span>                mMessages <span class="token operator">=</span> msg<span class="token punctuation">;</span>                needWake <span class="token operator">=</span> mBlocked<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// Inserted within the middle of the queue.  Usually we don't have to wake</span>                <span class="token comment" spellcheck="true">// up the event queue unless there is a barrier at the head of the queue</span>                <span class="token comment" spellcheck="true">// and the message is the earliest asynchronous message in the queue.</span>                needWake <span class="token operator">=</span> mBlocked <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">.</span>target <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> msg<span class="token punctuation">.</span><span class="token function">isAsynchronous</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Message prev<span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    prev <span class="token operator">=</span> p<span class="token punctuation">;</span>                    p <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> null <span class="token operator">||</span> when <span class="token operator">&lt;</span> p<span class="token punctuation">.</span>when<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>needWake <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">.</span><span class="token function">isAsynchronous</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        needWake <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                msg<span class="token punctuation">.</span>next <span class="token operator">=</span> p<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// invariant: p == prev.next</span>                prev<span class="token punctuation">.</span>next <span class="token operator">=</span> msg<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// We can assume mPtr != 0 because mQuitting is false.</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>needWake<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">nativeWake</span><span class="token punctuation">(</span>mPtr<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，代码的第2行，当msg.target为null时是直接抛异常的。代码的第22-45行，首先判断如果当前的消息队列为空，或者新添加的消息的执行时间when是0，或者新添加的消息的执行时间比消息队列头的消息的执行时间还早，就把消息添加到消息队列头（消息队列按时间排序），否则就要找到合适的位置将当前消息添加到消息队列。</p><p><strong>小总结：发送消息的方法除了sendMessageAtFrontOfQueue(),例如sendMessage()，sendMessageDelayed()最终都会走sendMessageAtTime()方法。在sendMessageAtTime()方法中又调用MessageQueue的enqueueMessage()方法将所有的消息按时间来进行排序放在消息队列中。</strong></p><h3 id="3-3-处理消息—-Looper-loop"><a href="#3-3-处理消息—-Looper-loop" class="headerlink" title="3.3 处理消息—-Looper.loop()"></a>3.3 处理消息—-Looper.loop()</h3><p>消息发送完成并且也已经入队列了，接下来我们就是处理消息队列中的消息了。首先要从队列中取出消息，取消息主要靠轮询器，看Looper.loop()方法<br>【Looper.java】</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> Looper me <span class="token operator">=</span> <span class="token function">myLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>me <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"No Looper; Looper.prepare() wasn't called on this thread."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">final</span> MessageQueue queue <span class="token operator">=</span> me<span class="token punctuation">.</span>mQueue<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Make sure the identity of this thread is that of the local process,</span>        <span class="token comment" spellcheck="true">// and keep track of what that identity token actually is.</span>        Binder<span class="token punctuation">.</span><span class="token function">clearCallingIdentity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">long</span> ident <span class="token operator">=</span> Binder<span class="token punctuation">.</span><span class="token function">clearCallingIdentity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Message msg <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// might block</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>msg <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// No message indicates that the message queue is quitting.</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// This must be in a local variable, in case a UI event sets the logger</span>            <span class="token keyword">final</span> Printer logging <span class="token operator">=</span> me<span class="token punctuation">.</span>mLogging<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>logging <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                logging<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">">>>>> Dispatching to "</span> <span class="token operator">+</span> msg<span class="token punctuation">.</span>target <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span>                        msg<span class="token punctuation">.</span>callback <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> msg<span class="token punctuation">.</span>what<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">final</span> <span class="token keyword">long</span> traceTag <span class="token operator">=</span> me<span class="token punctuation">.</span>mTraceTag<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>traceTag <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> Trace<span class="token punctuation">.</span><span class="token function">isTagEnabled</span><span class="token punctuation">(</span>traceTag<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Trace<span class="token punctuation">.</span><span class="token function">traceBegin</span><span class="token punctuation">(</span>traceTag<span class="token punctuation">,</span> msg<span class="token punctuation">.</span>target<span class="token punctuation">.</span><span class="token function">getTraceName</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                msg<span class="token punctuation">.</span>target<span class="token punctuation">.</span><span class="token function">dispatchMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>traceTag <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    Trace<span class="token punctuation">.</span><span class="token function">traceEnd</span><span class="token punctuation">(</span>traceTag<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>logging <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                logging<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"&lt;&lt;&lt;&lt;&lt; Finished to "</span> <span class="token operator">+</span> msg<span class="token punctuation">.</span>target <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> msg<span class="token punctuation">.</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// Make sure that during the course of dispatching the</span>            <span class="token comment" spellcheck="true">// identity of the thread wasn't corrupted.</span>            <span class="token keyword">final</span> <span class="token keyword">long</span> newIdent <span class="token operator">=</span> Binder<span class="token punctuation">.</span><span class="token function">clearCallingIdentity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ident <span class="token operator">!=</span> newIdent<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">wtf</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Thread identity changed from 0x"</span>                        <span class="token operator">+</span> Long<span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span>ident<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" to 0x"</span>                        <span class="token operator">+</span> Long<span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span>newIdent<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" while dispatching to "</span>                        <span class="token operator">+</span> msg<span class="token punctuation">.</span>target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span>                        <span class="token operator">+</span> msg<span class="token punctuation">.</span>callback <span class="token operator">+</span> <span class="token string">" what="</span> <span class="token operator">+</span> msg<span class="token punctuation">.</span>what<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            msg<span class="token punctuation">.</span><span class="token function">recycleUnchecked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，代码第6行，从轮询器中获取消息队列。接着通过一个死循环来把消息队列中的消息逐个取出来。代码第14行，通过MessageQueue的next()方法取出消息，当queue.next返回null时会退出消息循环。有消息则调用msg.target.dispatchMessage(msg)，target就是发送message时跟message关联的handler，Message被处理后会被调用recycleUnchecked()进行回收。</p><p>接下来看看MessageQueue的next()方法<br>【MessageQueue.java】</p><pre class="line-numbers language-java"><code class="language-java">    Message <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Return here if the message loop has already quit and been disposed.</span>        <span class="token comment" spellcheck="true">// This can happen if the application tries to restart a looper after quit</span>        <span class="token comment" spellcheck="true">// which is not supported.</span>        <span class="token keyword">final</span> <span class="token keyword">long</span> ptr <span class="token operator">=</span> mPtr<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ptr <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> pendingIdleHandlerCount <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// -1 only during first iteration</span>        <span class="token keyword">int</span> nextPollTimeoutMillis <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nextPollTimeoutMillis <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Binder<span class="token punctuation">.</span><span class="token function">flushPendingCommands</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">nativePollOnce</span><span class="token punctuation">(</span>ptr<span class="token punctuation">,</span> nextPollTimeoutMillis<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// Try to retrieve the next message.  Return if found.</span>                <span class="token keyword">final</span> <span class="token keyword">long</span> now <span class="token operator">=</span> SystemClock<span class="token punctuation">.</span><span class="token function">uptimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Message prevMsg <span class="token operator">=</span> null<span class="token punctuation">;</span>                Message msg <span class="token operator">=</span> mMessages<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>msg <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> msg<span class="token punctuation">.</span>target <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// Stalled by a barrier.  Find the next asynchronous message in the queue.</span>                    <span class="token keyword">do</span> <span class="token punctuation">{</span>                        prevMsg <span class="token operator">=</span> msg<span class="token punctuation">;</span>                        msg <span class="token operator">=</span> msg<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>msg <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>msg<span class="token punctuation">.</span><span class="token function">isAsynchronous</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>msg <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>now <span class="token operator">&lt;</span> msg<span class="token punctuation">.</span>when<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// Next message is not ready.  Set a timeout to wake up when it is ready.</span>                        nextPollTimeoutMillis <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>when <span class="token operator">-</span> now<span class="token punctuation">,</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// Got a message.</span>                        mBlocked <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>prevMsg <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            prevMsg<span class="token punctuation">.</span>next <span class="token operator">=</span> msg<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                            mMessages <span class="token operator">=</span> msg<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        msg<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>DEBUG<span class="token punctuation">)</span> Log<span class="token punctuation">.</span><span class="token function">v</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Returning message: "</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>                        msg<span class="token punctuation">.</span><span class="token function">markInUse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">return</span> msg<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// No more messages.</span>                    nextPollTimeoutMillis <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// Process the quit message now that all pending messages have been handled.</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>mQuitting<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> null<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// If first time idle, then get the number of idlers to run.</span>                <span class="token comment" spellcheck="true">// Idle handles only run if the queue is empty or if the first message</span>                <span class="token comment" spellcheck="true">// in the queue (possibly a barrier) is due to be handled in the future.</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>pendingIdleHandlerCount <span class="token operator">&lt;</span> <span class="token number">0</span>                        <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>mMessages <span class="token operator">==</span> null <span class="token operator">||</span> now <span class="token operator">&lt;</span> mMessages<span class="token punctuation">.</span>when<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    pendingIdleHandlerCount <span class="token operator">=</span> mIdleHandlers<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>pendingIdleHandlerCount <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// No idle handlers to run.  Loop and wait some more.</span>                    mBlocked <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>mPendingIdleHandlers <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    mPendingIdleHandlers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IdleHandler</span><span class="token punctuation">[</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>pendingIdleHandlerCount<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                mPendingIdleHandlers <span class="token operator">=</span> mIdleHandlers<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span>mPendingIdleHandlers<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// Run the idle handlers.</span>            <span class="token comment" spellcheck="true">// We only ever reach this code block during the first iteration.</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> pendingIdleHandlerCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">final</span> IdleHandler idler <span class="token operator">=</span> mPendingIdleHandlers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                mPendingIdleHandlers<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> null<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// release the reference to the handler</span>                <span class="token keyword">boolean</span> keep <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    keep <span class="token operator">=</span> idler<span class="token punctuation">.</span><span class="token function">queueIdle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    Log<span class="token punctuation">.</span><span class="token function">wtf</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"IdleHandler threw exception"</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>keep<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        mIdleHandlers<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>idler<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// Reset the idle handler count to 0 so we do not run them again.</span>            pendingIdleHandlerCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// While calling an idle handler, a new message could have been delivered</span>            <span class="token comment" spellcheck="true">// so go back and look again for a pending message without waiting.</span>            nextPollTimeoutMillis <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>大概意思是如果当前MessageQueue中存在mMessages就将这个消息取出来，标记为已用并从消息队列中移除该消息，然后让下一条消息成为mMessages，否则就进入一个阻塞状态，一直等到有新的消息入队。</p><p>接下来看看Handler的dispatchMessage()方法<br>【Handler.java】</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dispatchMessage</span><span class="token punctuation">(</span>Message msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>msg<span class="token punctuation">.</span>callback <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">handleCallback</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mCallback <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>mCallback<span class="token punctuation">.</span><span class="token function">handleMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token function">handleMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，第2行进行判断，如果msg.callback不为空，则调用handleCallback(msg);方法，否则直接调用Handler的handleMessage()方法。这里的handleMessage()方法是不是很熟悉？没错！就是我们在主线程中处理消息的handleMessage()方法。</p><p>接下来看看Handler的handleCallback()方法<br>【Handler.java】</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">handleCallback</span><span class="token punctuation">(</span>Message message<span class="token punctuation">)</span> <span class="token punctuation">{</span>            message<span class="token punctuation">.</span>callback<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以看到，处理消息是在run方法中，即Runnable对象的run方法，也就是我们不用最常用的方法使用handle，而是以callback的方式使用。如下：</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//1，创建Handler（主线程）</span>    Handler mHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//3,处理消息</span>                mMessage <span class="token operator">=</span> Message<span class="token punctuation">.</span><span class="token function">obtain</span><span class="token punctuation">(</span>mHandler<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------------callback的形式处理消息--------------"</span> <span class="token operator">+</span> mMessage<span class="token punctuation">.</span>arg1<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                mMessage<span class="token punctuation">.</span>arg1 <span class="token operator">=</span> <span class="token number">666</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//2,发送消息</span>                mHandler<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span>mMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其实Handler的post()方法源码也是走了handleCallback()方法。自己点击post()方法进去看看就知道了。</p><p><strong>小总结：通过轮询器的Looper.loop()方法中执行一个死循环把消息队列中的消息逐个取出来。死循环中主要通过MessageQueue的next()方法取出消息，取出消息后通过调用Handler的dispatchMessage()方法最终在handleCallback(msg)或者handleMessage(msg)方法处理消息。</strong></p><p><strong>好了，Handler消息机制源码终于分析完了。希望这篇文章可以在面试当中帮到你们。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 源码解析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Handler </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最全加快 Android Studio 的编译速度</title>
      <link href="/blog/28ff3e9a.html"/>
      <url>/blog/28ff3e9a.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一开始公司的电脑运行Android Studio的项目那叫一个慢呀! 每次都要2-5分钟。但是电脑的内存又是8G，CPU是I7的，按道理不应该这么慢呀。后来我实在不能忍受了， 经过一番折腾，终于将运行速度提升到10-30秒以内。下面总结下几种方法。</p><h2 id="一、加大分配的内存"><a href="#一、加大分配的内存" class="headerlink" title="一、加大分配的内存"></a>一、加大分配的内存</h2><p>打开Android Studio的安装目录，找到下面的文件进行修改，如图：<br>bin\studio64.exe.vmoptions<br><img src="28ff3e9a/1.jpg" alt></p><h2 id="二、Android-Studio设置自动编译工程"><a href="#二、Android-Studio设置自动编译工程" class="headerlink" title="二、Android Studio设置自动编译工程"></a>二、Android Studio设置自动编译工程</h2><p>打开Android Studio的设置，找到如图所示，打上勾即可。如图：<br><img src="28ff3e9a/2.jpg" alt></p><h2 id="三、打开Android-Studio的-instant-run-功能，如图："><a href="#三、打开Android-Studio的-instant-run-功能，如图：" class="headerlink" title="三、打开Android Studio的 instant run 功能，如图："></a>三、打开Android Studio的 instant run 功能，如图：</h2><p><img src="28ff3e9a/3.jpg" alt></p><h2 id="四、打开dex增量编译"><a href="#四、打开dex增量编译" class="headerlink" title="四、打开dex增量编译"></a>四、打开dex增量编译</h2><p>在Module的build.gradle中添加如下代码</p><pre><code>dexOptions {        incremental true}</code></pre><h2 id="五、修改gradle设置"><a href="#五、修改gradle设置" class="headerlink" title="五、修改gradle设置"></a>五、修改gradle设置</h2><p>在Project的gradle.properties中添加：</p><pre><code>org.gradle.daemon=trueorg.gradle.parallel=trueorg.gradle.configureondemand=trueorg.gradle.jvmargs=-Xmx2048m -XX:MaxPermSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8</code></pre><h2 id="六、使用本地gradle"><a href="#六、使用本地gradle" class="headerlink" title="六、使用本地gradle"></a>六、使用本地gradle</h2><p>在Android studio–&gt;Settings–&gt;Gradle 将offline work勾选上，如图：<br><img src="28ff3e9a/4.jpg" alt></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android Studio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android Butterknife 8.5.1 最新使用详解</title>
      <link href="/blog/46f3e95d.html"/>
      <url>/blog/46f3e95d.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>以前我们会在代码中写很多findViewById以及setOnClickListener等代码，不仅写起来麻烦，看起来也不整洁。现在我们用View注入框架ButterKnife就能解决这些问题。</p><p>ButterKnife的github地址：<a href="https://github.com/JakeWharton/butterknife" target="_blank" rel="noopener">https://github.com/JakeWharton/butterknife</a></p><h2 id="一、添加依赖"><a href="#一、添加依赖" class="headerlink" title="一、添加依赖"></a>一、添加依赖</h2><p>（1）在项目的的build.gredle 文件中的dependencies标签内添加如下：</p><pre class="line-numbers language-java"><code class="language-java">classpath <span class="token string">'com.jakewharton:butterknife-gradle-plugin:8.5.1'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如图所示：<br><img src="46f3e95d/1.jpg" alt></p><p>（2）在Module的的build.gredle 文件中的最上面添加如下：</p><pre class="line-numbers language-java"><code class="language-java">apply plugin<span class="token operator">:</span> <span class="token string">'com.jakewharton.butterknife'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（3）在Module的的build.gredle 文件中的dependencies标签内添加如下：</p><pre class="line-numbers language-java"><code class="language-java">compile <span class="token string">'com.jakewharton:butterknife:8.5.1'</span>annotationProcessor <span class="token string">'com.jakewharton:butterknife-compiler:8.5.1'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如图所示：<br><img src="46f3e95d/2.jpg" alt></p><h2 id="二、使用"><a href="#二、使用" class="headerlink" title="二、使用"></a>二、使用</h2><p>例如在布局文件中我们有个控件tv_text需要绑定</p><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span>TextView        android<span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">"@+id/tv_text"</span>        android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"wrap_content"</span>        android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"wrap_content"</span>        android<span class="token operator">:</span>text<span class="token operator">=</span><span class="token string">"Hello World!"</span><span class="token operator">/</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>则我们需要在代码中添加如下代码<br>（1）绑定activity</p><pre class="line-numbers language-java"><code class="language-java">ButterKnife<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（2）绑定控件id</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@BindView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>tv_text<span class="token punctuation">)</span>    TextView mTvText<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>（3）使用该控件，如下图所示<br><img src="46f3e95d/3.jpg" alt></p><p><strong>如果是绑定fragment，则添加如下代码</strong></p><pre class="line-numbers language-java"><code class="language-java">ButterKnife<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> view<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>如果是绑定RecyclerView的item，则在ViewHolder中添加如下代码</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ViewHolder</span> <span class="token keyword">extends</span> <span class="token class-name">RecyclerView<span class="token punctuation">.</span>ViewHolder</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@BindView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>tv_day<span class="token punctuation">)</span>        TextView     mTvDay<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">ViewHolder</span><span class="token punctuation">(</span>View itemView<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">super</span><span class="token punctuation">(</span>itemView<span class="token punctuation">)</span><span class="token punctuation">;</span>            ButterKnife<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> itemView<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、配合Butterknife插件使用更简单"><a href="#三、配合Butterknife插件使用更简单" class="headerlink" title="三、配合Butterknife插件使用更简单"></a>三、配合Butterknife插件使用更简单</h2><p>让我们写上面的代码还是比较麻烦的，高手都是用插件的。使用步骤如下：<br><strong>插件的安装：</strong></p><p>（1）在settings中搜索插件Zelezny<br><img src="46f3e95d/4.jpg" alt></p><p>（2）点击安装，安装后需要重启android studio<br><img src="46f3e95d/5.jpg" alt></p><p><strong>插件的使用：</strong></p><p>（1）选中布局文件，点击右键，选择Generate-&gt;Generate Butterknife Injections-&gt;Confirm，如图：<br><img src="46f3e95d/6.jpg" alt></p><p><img src="46f3e95d/7.jpg" alt></p><p><img src="46f3e95d/8.jpg" alt></p><p>（2）点击Confirm后，会自动生成BindView等代码:<br><img src="46f3e95d/9.jpg" alt></p><p>OK，Butterknife使用就到这里结束。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Butterknife </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 使用 ShareSDK 集成 QQ、微信、微博等第三方登录</title>
      <link href="/blog/13625367.html"/>
      <url>/blog/13625367.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>第三方登录几乎是每个APP的必须功能。有些人说看官方的文档实在让人眼花缭乱，以前自己第一次做这些功能的时候也会遇到很多坑。这里整理了一份比较详细的，主要给新手学习。有任何问题欢迎提出来！</p><h2 id="一、获取ShareSDK的AppKey"><a href="#一、获取ShareSDK的AppKey" class="headerlink" title="一、获取ShareSDK的AppKey"></a>一、获取ShareSDK的AppKey</h2><p>（照着流程来，很简单！）<br><a href="http://bbs.mob.com/forum.php?mod=viewthread&amp;tid=8212&amp;extra=page%3D1" target="_blank" rel="noopener">http://bbs.mob.com/forum.php?mod=viewthread&amp;tid=8212&amp;extra=page%3D1</a></p><h2 id="二、下载SDK"><a href="#二、下载SDK" class="headerlink" title="二、下载SDK"></a>二、下载SDK</h2><p>下载地址：<a href="http://www.mob.com/downloadDetail/ShareSDK/android" target="_blank" rel="noopener">http://www.mob.com/downloadDetail/ShareSDK/android</a><br>下载的时候一般用默认的就足够了<br><img src="13625367/1.jpg" alt></p><p>下载后解压出来是这样的<br><img src="13625367/2.jpg" alt></p><h2 id="三、准备资源"><a href="#三、准备资源" class="headerlink" title="三、准备资源"></a>三、准备资源</h2><p>点击第一个文件夹，进去如下，双击QuickIntegrater.jar<br><img src="13625367/3.jpg" alt></p><p>只需要填写项目名称和项目包名即可，其他默认。如图：<br><img src="13625367/4.jpg" alt></p><p>点击确认后会生成如下文件夹，如图：<br><img src="13625367/5.jpg" alt></p><p><img src="13625367/6.jpg" alt></p><h2 id="四、开始集成"><a href="#四、开始集成" class="headerlink" title="四、开始集成"></a>四、开始集成</h2><p>（1）将上面的文件夹依次粘贴到工程相应的文件夹即可，如图：<br><img src="13625367/7.jpg" alt></p><p>（2）在清单文件AndroidManifest.xml添加权限</p><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span>uses<span class="token operator">-</span>permission android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.permission.GET_TASKS"</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>uses<span class="token operator">-</span>permission android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.permission.INTERNET"</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>uses<span class="token operator">-</span>permission android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.permission.ACCESS_WIFI_STATE"</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>uses<span class="token operator">-</span>permission android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.permission.ACCESS_NETWORK_STATE"</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>uses<span class="token operator">-</span>permission android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.permission.CHANGE_WIFI_STATE"</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>uses<span class="token operator">-</span>permission android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.permission.WRITE_EXTERNAL_STORAGE"</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>uses<span class="token operator">-</span>permission android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.permission.READ_PHONE_STATE"</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>uses<span class="token operator">-</span>permission android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.permission.MANAGE_ACCOUNTS"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>uses<span class="token operator">-</span>permission android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.permission.GET_ACCOUNTS"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 蓝牙分享所需的权限 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>uses<span class="token operator">-</span>permission android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.permission.BLUETOOTH"</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>uses<span class="token operator">-</span>permission android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.permission.BLUETOOTH_ADMIN"</span> <span class="token operator">/</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（3）在清单文件AndroidManifest.xml添加activity信息<br>（注意：tencent后面的appid要保持和您配置的QQ的appid一致）</p><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span>activity     android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"com.mob.tools.MobUIShell"</span>     android<span class="token operator">:</span>theme<span class="token operator">=</span><span class="token string">"@android:style/Theme.Translucent.NoTitleBar"</span>     android<span class="token operator">:</span>configChanges<span class="token operator">=</span><span class="token string">"keyboardHidden|orientation|screenSize"</span>     android<span class="token operator">:</span>screenOrientation<span class="token operator">=</span><span class="token string">"portrait"</span>     android<span class="token operator">:</span>windowSoftInputMode<span class="token operator">=</span><span class="token string">"stateHidden|adjustResize"</span> <span class="token operator">></span>     <span class="token operator">&lt;</span>intent<span class="token operator">-</span>filter<span class="token operator">></span>         <span class="token operator">&lt;</span>data android<span class="token operator">:</span>scheme<span class="token operator">=</span><span class="token string">"tencent100371282"</span> <span class="token operator">/</span><span class="token operator">></span>         <span class="token operator">&lt;</span>action android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.intent.action.VIEW"</span> <span class="token operator">/</span><span class="token operator">></span>         <span class="token operator">&lt;</span>category android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.intent.category.BROWSABLE"</span> <span class="token operator">/</span><span class="token operator">></span>         <span class="token operator">&lt;</span>category android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.intent.category.DEFAULT"</span> <span class="token operator">/</span><span class="token operator">></span>     <span class="token operator">&lt;</span><span class="token operator">/</span>intent<span class="token operator">-</span>filter<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 调用新浪原生SDK，需要注册的回调activity <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>intent<span class="token operator">-</span>filter<span class="token operator">></span>        <span class="token operator">&lt;</span>action android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"com.sina.weibo.sdk.action.ACTION_SDK_REQ_ACTIVITY"</span> <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>category android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.intent.category.DEFAULT"</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>intent<span class="token operator">-</span>filter<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>集成line客户端登录授权，需要添如下格式的过滤器<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>intent<span class="token operator">-</span>filter<span class="token operator">></span>        <span class="token operator">&lt;</span>data android<span class="token operator">:</span>scheme<span class="token operator">=</span><span class="token string">"line.1477692153"</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>action android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.intent.action.VIEW"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>category android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.intent.category.BROWSABLE"</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>category android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.intent.category.DEFAULT"</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>intent<span class="token operator">-</span>filter<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">/</span>activity<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果您集成了微信，还需要添加下面回调的activity处理；</p><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span>activity     android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">".wxapi.WXEntryActivity"</span>     android<span class="token operator">:</span>theme<span class="token operator">=</span><span class="token string">"@android:style/Theme.Translucent.NoTitleBar"</span>     android<span class="token operator">:</span>configChanges<span class="token operator">=</span><span class="token string">"keyboardHidden|orientation|screenSize"</span>     android<span class="token operator">:</span>exported<span class="token operator">=</span><span class="token string">"true"</span>     android<span class="token operator">:</span>screenOrientation<span class="token operator">=</span><span class="token string">"portrait"</span> <span class="token operator">/</span><span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（4）在刚刚拷贝进去的ShareSDK中替换mob后台申请的Appkey与各个平台申请的key<br>注意：<br>mob后台申请的Appkey：就是第一部中获取ShareSDK的AppKey<br>各个平台申请的key：需要到各个平台申请，例如需要微信分享，则需要到微信开放平台进行申请</p><p><img src="13625367/8.jpg" alt></p><p>（5）添加登录代码<br>在您程序启动的时候添加初始化代码（注：不要等调用ShareSDK功能之前才初始化）<br>即自己添加一个类继承Application，在onCreate方法添加下面的代码，如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyApplication</span> <span class="token keyword">extends</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//初始化ShareSDK</span>        ShareSDK<span class="token punctuation">.</span><span class="token function">initSDK</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意: 该类需要在清单文件中注册，如图：<br><img src="13625367/9.jpg" alt></p><p>登录activity代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginActivity</span> <span class="token keyword">extends</span> <span class="token class-name">Activity</span> <span class="token keyword">implements</span> <span class="token class-name">PlatformActionListener</span><span class="token punctuation">,</span> Handler<span class="token punctuation">.</span>Callback<span class="token punctuation">,</span> View<span class="token punctuation">.</span>OnClickListener <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MSG_ACTION_CCALLBACK <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> ImageView ivWxLogin<span class="token punctuation">;</span>    <span class="token keyword">private</span> ImageView ivQqLogin<span class="token punctuation">;</span>    <span class="token keyword">private</span> ImageView ivBlog<span class="token punctuation">;</span>    <span class="token keyword">private</span> ProgressDialog progressDialog<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_login<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">initView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">initListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">initData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initView</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ivWxLogin <span class="token operator">=</span> <span class="token punctuation">(</span>ImageView<span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>iv_wx_login<span class="token punctuation">)</span><span class="token punctuation">;</span>        ivQqLogin <span class="token operator">=</span> <span class="token punctuation">(</span>ImageView<span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>iv_qq_login<span class="token punctuation">)</span><span class="token punctuation">;</span>        ivBlog <span class="token operator">=</span> <span class="token punctuation">(</span>ImageView<span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>iv_blog<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ivWxLogin<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ivQqLogin<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ivBlog<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>View view<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>view<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>iv_wx_login<span class="token operator">:</span>                Platform wechat <span class="token operator">=</span> ShareSDK<span class="token punctuation">.</span><span class="token function">getPlatform</span><span class="token punctuation">(</span>Wechat<span class="token punctuation">.</span>NAME<span class="token punctuation">)</span><span class="token punctuation">;</span>                wechat<span class="token punctuation">.</span><span class="token function">setPlatformActionListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                wechat<span class="token punctuation">.</span><span class="token function">SSOSetting</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">authorize</span><span class="token punctuation">(</span>wechat<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>iv_qq_login<span class="token operator">:</span>                Platform qq <span class="token operator">=</span> ShareSDK<span class="token punctuation">.</span><span class="token function">getPlatform</span><span class="token punctuation">(</span>QQ<span class="token punctuation">.</span>NAME<span class="token punctuation">)</span><span class="token punctuation">;</span>                qq<span class="token punctuation">.</span><span class="token function">setPlatformActionListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                qq<span class="token punctuation">.</span><span class="token function">SSOSetting</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">authorize</span><span class="token punctuation">(</span>qq<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>iv_blog<span class="token operator">:</span>                Platform sina <span class="token operator">=</span> ShareSDK<span class="token punctuation">.</span><span class="token function">getPlatform</span><span class="token punctuation">(</span>SinaWeibo<span class="token punctuation">.</span>NAME<span class="token punctuation">)</span><span class="token punctuation">;</span>                sina<span class="token punctuation">.</span><span class="token function">setPlatformActionListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                sina<span class="token punctuation">.</span><span class="token function">SSOSetting</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">authorize</span><span class="token punctuation">(</span>sina<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//授权</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">authorize</span><span class="token punctuation">(</span>Platform plat<span class="token punctuation">,</span> <span class="token keyword">int</span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>                <span class="token function">showProgressDialog</span><span class="token punctuation">(</span><span class="token function">getString</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>string<span class="token punctuation">.</span>opening_wechat<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>                <span class="token function">showProgressDialog</span><span class="token punctuation">(</span><span class="token function">getString</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>string<span class="token punctuation">.</span>opening_qq<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>                <span class="token function">showProgressDialog</span><span class="token punctuation">(</span><span class="token function">getString</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>string<span class="token punctuation">.</span>opening_blog<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>plat<span class="token punctuation">.</span><span class="token function">isValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//如果授权就删除授权资料</span>            plat<span class="token punctuation">.</span><span class="token function">removeAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        plat<span class="token punctuation">.</span><span class="token function">showUser</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//授权并获取用户信息</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//登陆授权成功的回调</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onComplete</span><span class="token punctuation">(</span>Platform platform<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Message msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        msg<span class="token punctuation">.</span>what <span class="token operator">=</span> MSG_ACTION_CCALLBACK<span class="token punctuation">;</span>        msg<span class="token punctuation">.</span>arg1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        msg<span class="token punctuation">.</span>arg2 <span class="token operator">=</span> action<span class="token punctuation">;</span>        msg<span class="token punctuation">.</span>obj <span class="token operator">=</span> platform<span class="token punctuation">;</span>        UIHandler<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//发送消息</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//登陆授权错误的回调</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onError</span><span class="token punctuation">(</span>Platform platform<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> Throwable t<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Message msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        msg<span class="token punctuation">.</span>what <span class="token operator">=</span> MSG_ACTION_CCALLBACK<span class="token punctuation">;</span>        msg<span class="token punctuation">.</span>arg1 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        msg<span class="token punctuation">.</span>arg2 <span class="token operator">=</span> action<span class="token punctuation">;</span>        msg<span class="token punctuation">.</span>obj <span class="token operator">=</span> t<span class="token punctuation">;</span>        UIHandler<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//登陆授权取消的回调</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCancel</span><span class="token punctuation">(</span>Platform platform<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Message msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        msg<span class="token punctuation">.</span>what <span class="token operator">=</span> MSG_ACTION_CCALLBACK<span class="token punctuation">;</span>        msg<span class="token punctuation">.</span>arg1 <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        msg<span class="token punctuation">.</span>arg2 <span class="token operator">=</span> action<span class="token punctuation">;</span>        msg<span class="token punctuation">.</span>obj <span class="token operator">=</span> platform<span class="token punctuation">;</span>        UIHandler<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//登陆发送的handle消息在这里处理</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">handleMessage</span><span class="token punctuation">(</span>Message message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">hideProgressDialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>message<span class="token punctuation">.</span>arg1<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 成功</span>                Toast<span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span>LoginActivity<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"授权登陆成功"</span><span class="token punctuation">,</span> Toast<span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//获取用户资料</span>                Platform platform <span class="token operator">=</span> <span class="token punctuation">(</span>Platform<span class="token punctuation">)</span> message<span class="token punctuation">.</span>obj<span class="token punctuation">;</span>                String userId <span class="token operator">=</span> platform<span class="token punctuation">.</span><span class="token function">getDb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取用户账号</span>                String userName <span class="token operator">=</span> platform<span class="token punctuation">.</span><span class="token function">getDb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取用户名字</span>                String userIcon <span class="token operator">=</span> platform<span class="token punctuation">.</span><span class="token function">getDb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getUserIcon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取用户头像</span>                String userGender <span class="token operator">=</span> platform<span class="token punctuation">.</span><span class="token function">getDb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getUserGender</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//获取用户性别，m = 男, f = 女，如果微信没有设置性别,默认返回null</span>                Toast<span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span>LoginActivity<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"用户信息为--用户名："</span> <span class="token operator">+</span> userName <span class="token operator">+</span> <span class="token string">"  性别："</span> <span class="token operator">+</span> userGender<span class="token punctuation">,</span> Toast<span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//下面就可以利用获取的用户信息登录自己的服务器或者做自己想做的事啦!</span>                <span class="token comment" spellcheck="true">//。。。</span>            <span class="token punctuation">}</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 失败</span>                Toast<span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span>LoginActivity<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"授权登陆失败"</span><span class="token punctuation">,</span> Toast<span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 取消</span>                Toast<span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span>LoginActivity<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"授权登陆取消"</span><span class="token punctuation">,</span> Toast<span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//显示dialog</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showProgressDialog</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        progressDialog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProgressDialog</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        progressDialog<span class="token punctuation">.</span><span class="token function">setMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        progressDialog<span class="token punctuation">.</span><span class="token function">setCancelable</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        progressDialog<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//隐藏dialog</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hideProgressDialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>progressDialog <span class="token operator">!=</span> null<span class="token punctuation">)</span>            progressDialog<span class="token punctuation">.</span><span class="token function">dismiss</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>布局activity_login.xml：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span>LinearLayout xmlns<span class="token operator">:</span>android<span class="token operator">=</span><span class="token string">"http://schemas.android.com/apk/res/android"</span>              android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"match_parent"</span>              android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"match_parent"</span>              android<span class="token operator">:</span>gravity<span class="token operator">=</span><span class="token string">"center"</span>              android<span class="token operator">:</span>orientation<span class="token operator">=</span><span class="token string">"horizontal"</span>    <span class="token operator">></span>    <span class="token operator">&lt;</span>LinearLayout        android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"match_parent"</span>        android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"wrap_content"</span>        android<span class="token operator">:</span>gravity<span class="token operator">=</span><span class="token string">"center"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>ImageView            android<span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">"@+id/iv_wx_login"</span>            android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"wrap_content"</span>            android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"wrap_content"</span>            android<span class="token operator">:</span>layout_gravity<span class="token operator">=</span><span class="token string">"center_horizontal"</span>            android<span class="token operator">:</span>layout_marginTop<span class="token operator">=</span><span class="token string">"10dp"</span>            android<span class="token operator">:</span>clickable<span class="token operator">=</span><span class="token string">"true"</span>            android<span class="token operator">:</span>src<span class="token operator">=</span><span class="token string">"@mipmap/wechat_icon"</span>            <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>ImageView            android<span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">"@+id/iv_qq_login"</span>            android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"wrap_content"</span>            android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"wrap_content"</span>            android<span class="token operator">:</span>layout_gravity<span class="token operator">=</span><span class="token string">"center_horizontal"</span>            android<span class="token operator">:</span>layout_marginLeft<span class="token operator">=</span><span class="token string">"20dp"</span>            android<span class="token operator">:</span>layout_marginRight<span class="token operator">=</span><span class="token string">"20dp"</span>            android<span class="token operator">:</span>layout_marginTop<span class="token operator">=</span><span class="token string">"10dp"</span>            android<span class="token operator">:</span>clickable<span class="token operator">=</span><span class="token string">"true"</span>            android<span class="token operator">:</span>src<span class="token operator">=</span><span class="token string">"@mipmap/qq_icon"</span>            <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>ImageView            android<span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">"@+id/iv_blog"</span>            android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"wrap_content"</span>            android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"wrap_content"</span>            android<span class="token operator">:</span>layout_gravity<span class="token operator">=</span><span class="token string">"center_horizontal"</span>            android<span class="token operator">:</span>layout_marginTop<span class="token operator">=</span><span class="token string">"10dp"</span>            android<span class="token operator">:</span>clickable<span class="token operator">=</span><span class="token string">"true"</span>            android<span class="token operator">:</span>src<span class="token operator">=</span><span class="token string">"@mipmap/blog_icon"</span>            <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>LinearLayout<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>LinearLayout<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果如下：</p><p><img src="13625367/10.jpg" alt></p><p>Demo下载：<a href="https://github.com/wildma/ShareSDKThirdPartyShareLogin" target="_blank" rel="noopener">https://github.com/wildma/ShareSDKThirdPartyShareLogin</a> </p><p><strong>如果对你有帮助记得点赞，star支持下哈~</strong></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> 第三方集成 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ShareSDK </tag>
            
            <tag> 第三方登录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 使用 ShareSDK 集成 QQ、微信、微博等第三方分享</title>
      <link href="/blog/8e898d79.html"/>
      <url>/blog/8e898d79.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>第三方分享几乎是每个APP的必须功能。有些人说看官方的文档实在让人眼花缭乱，以前自己第一次做这些功能的时候也会遇到很多坑。这里整理了一份比较详细的，主要给新手学习。有任何问题欢迎提出来！</p><h2 id="一、获取ShareSDK的AppKey"><a href="#一、获取ShareSDK的AppKey" class="headerlink" title="一、获取ShareSDK的AppKey"></a>一、获取ShareSDK的AppKey</h2><p>（照着流程来，很简单！）<br><a href="http://bbs.mob.com/forum.php?mod=viewthread&amp;tid=8212&amp;extra=page%3D1" target="_blank" rel="noopener">http://bbs.mob.com/forum.php?mod=viewthread&amp;tid=8212&amp;extra=page%3D1</a></p><h2 id="二、下载SDK"><a href="#二、下载SDK" class="headerlink" title="二、下载SDK"></a>二、下载SDK</h2><p>下载地址：<a href="http://www.mob.com/downloadDetail/ShareSDK/android" target="_blank" rel="noopener">http://www.mob.com/downloadDetail/ShareSDK/android</a><br>下载的时候一般用默认的就足够了<br><img src="8e898d79/1.jpg" alt></p><p>下载后解压出来是这样的<br><img src="8e898d79/2.jpg" alt></p><h2 id="三、准备资源"><a href="#三、准备资源" class="headerlink" title="三、准备资源"></a>三、准备资源</h2><p>点击第一个文件夹，进去如下，双击QuickIntegrater.jar<br><img src="8e898d79/3.jpg" alt></p><p>只需要填写项目名称和项目包名即可，其他默认。如图：<br><img src="8e898d79/4.jpg" alt></p><p>点击确认后会生成如下文件夹，如图：<br><img src="8e898d79/5.jpg" alt></p><p><img src="8e898d79/6.jpg" alt></p><h2 id="四、开始集成"><a href="#四、开始集成" class="headerlink" title="四、开始集成"></a>四、开始集成</h2><p>（1）将上面的文件夹依次粘贴到工程相应的文件夹即可，如图：<br><img src="8e898d79/7.jpg" alt></p><p>（2）在清单文件AndroidManifest.xml添加权限</p><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span>uses<span class="token operator">-</span>permission android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.permission.GET_TASKS"</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>uses<span class="token operator">-</span>permission android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.permission.INTERNET"</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>uses<span class="token operator">-</span>permission android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.permission.ACCESS_WIFI_STATE"</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>uses<span class="token operator">-</span>permission android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.permission.ACCESS_NETWORK_STATE"</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>uses<span class="token operator">-</span>permission android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.permission.CHANGE_WIFI_STATE"</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>uses<span class="token operator">-</span>permission android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.permission.WRITE_EXTERNAL_STORAGE"</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>uses<span class="token operator">-</span>permission android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.permission.READ_PHONE_STATE"</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>uses<span class="token operator">-</span>permission android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.permission.MANAGE_ACCOUNTS"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>uses<span class="token operator">-</span>permission android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.permission.GET_ACCOUNTS"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 蓝牙分享所需的权限 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>uses<span class="token operator">-</span>permission android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.permission.BLUETOOTH"</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>uses<span class="token operator">-</span>permission android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.permission.BLUETOOTH_ADMIN"</span> <span class="token operator">/</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（3）在清单文件AndroidManifest.xml添加activity信息<br>（注意：tencent后面的appid要保持和您配置的QQ的appid一致）</p><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span>activity     android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"com.mob.tools.MobUIShell"</span>     android<span class="token operator">:</span>theme<span class="token operator">=</span><span class="token string">"@android:style/Theme.Translucent.NoTitleBar"</span>     android<span class="token operator">:</span>configChanges<span class="token operator">=</span><span class="token string">"keyboardHidden|orientation|screenSize"</span>     android<span class="token operator">:</span>screenOrientation<span class="token operator">=</span><span class="token string">"portrait"</span>     android<span class="token operator">:</span>windowSoftInputMode<span class="token operator">=</span><span class="token string">"stateHidden|adjustResize"</span> <span class="token operator">></span>     <span class="token operator">&lt;</span>intent<span class="token operator">-</span>filter<span class="token operator">></span>         <span class="token operator">&lt;</span>data android<span class="token operator">:</span>scheme<span class="token operator">=</span><span class="token string">"tencent100371282"</span> <span class="token operator">/</span><span class="token operator">></span>         <span class="token operator">&lt;</span>action android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.intent.action.VIEW"</span> <span class="token operator">/</span><span class="token operator">></span>         <span class="token operator">&lt;</span>category android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.intent.category.BROWSABLE"</span> <span class="token operator">/</span><span class="token operator">></span>         <span class="token operator">&lt;</span>category android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.intent.category.DEFAULT"</span> <span class="token operator">/</span><span class="token operator">></span>     <span class="token operator">&lt;</span><span class="token operator">/</span>intent<span class="token operator">-</span>filter<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 调用新浪原生SDK，需要注册的回调activity <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>intent<span class="token operator">-</span>filter<span class="token operator">></span>        <span class="token operator">&lt;</span>action android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"com.sina.weibo.sdk.action.ACTION_SDK_REQ_ACTIVITY"</span> <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>category android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.intent.category.DEFAULT"</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>intent<span class="token operator">-</span>filter<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>集成line客户端登录授权，需要添如下格式的过滤器<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>intent<span class="token operator">-</span>filter<span class="token operator">></span>        <span class="token operator">&lt;</span>data android<span class="token operator">:</span>scheme<span class="token operator">=</span><span class="token string">"line.1477692153"</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>action android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.intent.action.VIEW"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>category android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.intent.category.BROWSABLE"</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>category android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.intent.category.DEFAULT"</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>intent<span class="token operator">-</span>filter<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">/</span>activity<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果您集成了微信，还需要添加下面回调的activity处理；</p><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span>activity     android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">".wxapi.WXEntryActivity"</span>     android<span class="token operator">:</span>theme<span class="token operator">=</span><span class="token string">"@android:style/Theme.Translucent.NoTitleBar"</span>     android<span class="token operator">:</span>configChanges<span class="token operator">=</span><span class="token string">"keyboardHidden|orientation|screenSize"</span>     android<span class="token operator">:</span>exported<span class="token operator">=</span><span class="token string">"true"</span>     android<span class="token operator">:</span>screenOrientation<span class="token operator">=</span><span class="token string">"portrait"</span> <span class="token operator">/</span><span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（4）在刚刚拷贝进去的ShareSDK中替换mob后台申请的Appkey与各个平台申请的key<br>注意：<br>mob后台申请的Appkey：就是第一部中获取ShareSDK的AppKey<br>各个平台申请的key：需要到各个平台申请，例如需要微信分享，则需要到微信开放平台进行申请</p><p><img src="8e898d79/8.jpg" alt></p><p>（5）添加分享代码<br>在您程序启动的时候添加初始化代码（注：不要等调用ShareSDK功能之前才初始化）<br>即自己添加一个类继承Application，在onCreate方法添加下面的代码，如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyApplication</span> <span class="token keyword">extends</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//初始化ShareSDK</span>        ShareSDK<span class="token punctuation">.</span><span class="token function">initSDK</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意: 该类需要在清单文件中注册，如图：<br><img src="8e898d79/9.jpg" alt></p><p>在您的代码中调用此方法，即可打开一键分享功能进行分享</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">showShare</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> OnekeyShare oks <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OnekeyShare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//关闭sso授权</span> oks<span class="token punctuation">.</span><span class="token function">disableSSOWhenAuthorize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// title标题，印象笔记、邮箱、信息、微信、人人网、QQ和QQ空间使用</span> oks<span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">"标题"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// titleUrl是标题的网络链接，仅在Linked-in,QQ和QQ空间使用</span> oks<span class="token punctuation">.</span><span class="token function">setTitleUrl</span><span class="token punctuation">(</span><span class="token string">"http://sharesdk.cn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// text是分享文本，所有平台都需要这个字段</span> oks<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"我是分享文本"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//分享网络图片，新浪微博分享网络图片需要通过审核后申请高级写入接口，否则请注释掉测试新浪微博</span> oks<span class="token punctuation">.</span><span class="token function">setImageUrl</span><span class="token punctuation">(</span><span class="token string">"http://f1.sharesdk.cn/imgs/2014/02/26/owWpLZo_638x960.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// imagePath是图片的本地路径，Linked-In以外的平台都支持此参数</span> <span class="token comment" spellcheck="true">//oks.setImagePath("/sdcard/test.jpg");//确保SDcard下面存在此张图片</span> <span class="token comment" spellcheck="true">// url仅在微信（包括好友和朋友圈）中使用</span> oks<span class="token punctuation">.</span><span class="token function">setUrl</span><span class="token punctuation">(</span><span class="token string">"http://sharesdk.cn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// comment是我对这条分享的评论，仅在人人网和QQ空间使用</span> oks<span class="token punctuation">.</span><span class="token function">setComment</span><span class="token punctuation">(</span><span class="token string">"我是测试评论文本"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// site是分享此内容的网站名称，仅在QQ空间使用</span> oks<span class="token punctuation">.</span><span class="token function">setSite</span><span class="token punctuation">(</span><span class="token string">"ShareSDK"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// siteUrl是分享此内容的网站地址，仅在QQ空间使用</span> oks<span class="token punctuation">.</span><span class="token function">setSiteUrl</span><span class="token punctuation">(</span><span class="token string">"http://sharesdk.cn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 启动分享GUI</span> oks<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果如下：<br><img src="8e898d79/10.jpg" alt></p><p>Demo下载地址：<a href="https://github.com/wildma/ShareSDKThirdPartyShareLogin" target="_blank" rel="noopener">https://github.com/wildma/ShareSDKThirdPartyShareLogin</a></p><p><strong>如果对你有帮助记得点赞，star支持下哈~</strong></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> 第三方集成 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ShareSDK </tag>
            
            <tag> 第三方分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 使用 OkHttp 请求自签名的 HTTPS 网站</title>
      <link href="/blog/cc4308ee.html"/>
      <url>/blog/cc4308ee.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>很多公司考虑到安全问题，项目中都采用https加密协议进行数据传输。但是一些公司又不想花一笔钱去CA申请证书，所以就采用自签名的证书。</p><p>OkHttp默认是可以访问通过CA认证的HTTPS链接，例如百度首页也是https链接（<a href="https://www.baidu.com/）。" target="_blank" rel="noopener">https://www.baidu.com/）。</a> 但是如果是你们公司自签名(即自己用keytool生成的证书，而不是采用通过CA认证的证书)的服务器，OkHttp是无法访问的，例如访问12306网站（<a href="https://kyfw.12306.cn/otn/）" target="_blank" rel="noopener">https://kyfw.12306.cn/otn/）</a> ，会报如下错误：<br><img src="cc4308ee/1.jpg" alt></p><h2 id="一、HTTPS的工作原理"><a href="#一、HTTPS的工作原理" class="headerlink" title="一、HTTPS的工作原理"></a>一、HTTPS的工作原理</h2><p>HTTPS在传输数据之前需要客户端（浏览器）与服务端（网站）之间进行一次握手，在握手过程中将确立双方加密传输数据的密码信息。握手过程的简单描述如下：</p><ol><li>浏览器将自己支持的一套加密算法、HASH算法发送给网站。</li><li>网站从中选出一组加密算法与HASH算法，并将自己的身份信息以证书的形式发回给浏览器。证书里面包含了网站地址，加密公钥，以及证书的颁发机构等信息。</li><li>浏览器获得网站证书之后，开始验证证书的合法性，如果证书信任，则生成一串随机数字作为通讯过程中对称加密的秘钥。然后取出证书中的公钥，将这串数字以及HASH的结果进行加密，然后发给网站。</li><li>网站接收浏览器发来的数据之后，通过私钥进行解密，然后HASH校验，如果一致，则使用浏览器发来的数字串使加密一段握手消息发给浏览器。</li><li>浏览器解密，并HASH校验，没有问题，则握手结束。接下来的传输过程将由之前浏览器生成的随机密码并利用对称加密算法进行加密。</li></ol><p>握手过程中如果有任何错误，都会使加密连接断开，从而阻止了隐私信息的传输。</p><h2 id="二、使用OKHTTP请求自签名的https服务器数据"><a href="#二、使用OKHTTP请求自签名的https服务器数据" class="headerlink" title="二、使用OKHTTP请求自签名的https服务器数据"></a>二、使用OKHTTP请求自签名的https服务器数据</h2><p><strong>以下我们使用12306网站为例</strong></p><p>（1） 首先去12306网站首页下载证书 <a href="http://www.12306.cn/" target="_blank" rel="noopener">http://www.12306.cn/</a><br><img src="cc4308ee/2.jpg" alt></p><p>（2） 将下载的证书srca.cer放到工程的assets文件夹下。<br><img src="cc4308ee/3.jpg" alt></p><p>（3） 添加HTTPS工具类</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> android<span class="token punctuation">.</span>content<span class="token punctuation">.</span>Context<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>GeneralSecurityException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>KeyStore<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>cert<span class="token punctuation">.</span>Certificate<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>cert<span class="token punctuation">.</span>CertificateFactory<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Collection<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>net<span class="token punctuation">.</span>ssl<span class="token punctuation">.</span>KeyManagerFactory<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>net<span class="token punctuation">.</span>ssl<span class="token punctuation">.</span>SSLContext<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>net<span class="token punctuation">.</span>ssl<span class="token punctuation">.</span>SSLSocketFactory<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>net<span class="token punctuation">.</span>ssl<span class="token punctuation">.</span>TrustManager<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>net<span class="token punctuation">.</span>ssl<span class="token punctuation">.</span>TrustManagerFactory<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>net<span class="token punctuation">.</span>ssl<span class="token punctuation">.</span>X509TrustManager<span class="token punctuation">;</span><span class="token keyword">import</span> okhttp3<span class="token punctuation">.</span>OkHttpClient<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">HTTPSUtils</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> OkHttpClient client<span class="token punctuation">;</span>    <span class="token keyword">public</span> Context mContext<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 获取OkHttpClient实例     * @return     */</span>    <span class="token keyword">public</span> OkHttpClient <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> client<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 初始化HTTPS,添加信任证书     * @param context     */</span>    <span class="token keyword">public</span> <span class="token function">HTTPSUtils</span><span class="token punctuation">(</span>Context context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mContext <span class="token operator">=</span> context<span class="token punctuation">;</span>        X509TrustManager trustManager<span class="token punctuation">;</span>        SSLSocketFactory sslSocketFactory<span class="token punctuation">;</span>        <span class="token keyword">final</span> InputStream inputStream<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            inputStream <span class="token operator">=</span> mContext<span class="token punctuation">.</span><span class="token function">getAssets</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"srca.cer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 得到证书的输入流</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                trustManager <span class="token operator">=</span> <span class="token function">trustManagerForCertificates</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//以流的方式读入证书</span>                SSLContext sslContext <span class="token operator">=</span> SSLContext<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"TLS"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                sslContext<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TrustManager</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>trustManager<span class="token punctuation">}</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>                sslSocketFactory <span class="token operator">=</span> sslContext<span class="token punctuation">.</span><span class="token function">getSocketFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">GeneralSecurityException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OkHttpClient<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">sslSocketFactory</span><span class="token punctuation">(</span>sslSocketFactory<span class="token punctuation">,</span> trustManager<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 以流的方式添加信任证书     */</span>    <span class="token comment" spellcheck="true">/**     * Returns a trust manager that trusts {@code certificates} and none other. HTTPS services whose     * certificates have not been signed by these certificates will fail with a {@code     * SSLHandshakeException}.     * &lt;p>     * &lt;p>This can be used to replace the host platform's built-in trusted certificates with a custom     * set. This is useful in development where certificate authority-trusted certificates aren't     * available. Or in production, to avoid reliance on third-party certificate authorities.     * &lt;p>     * &lt;p>     * &lt;h3>Warning: Customizing Trusted Certificates is Dangerous!&lt;/h3>     * &lt;p>     * &lt;p>Relying on your own trusted certificates limits your server team's ability to update their     * TLS certificates. By installing a specific set of trusted certificates, you take on additional     * operational complexity and limit your ability to migrate between certificate authorities. Do     * not use custom trusted certificates in production without the blessing of your server's TLS     * administrator.     */</span>    <span class="token keyword">private</span> X509TrustManager <span class="token function">trustManagerForCertificates</span><span class="token punctuation">(</span>InputStream in<span class="token punctuation">)</span>            <span class="token keyword">throws</span> GeneralSecurityException <span class="token punctuation">{</span>        CertificateFactory certificateFactory <span class="token operator">=</span> CertificateFactory<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"X.509"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Collection<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Certificate</span><span class="token operator">></span> certificates <span class="token operator">=</span> certificateFactory<span class="token punctuation">.</span><span class="token function">generateCertificates</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>certificates<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"expected non-empty set of trusted certificates"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Put the certificates a key store.</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> password <span class="token operator">=</span> <span class="token string">"password"</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Any password will work.</span>        KeyStore keyStore <span class="token operator">=</span> <span class="token function">newEmptyKeyStore</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Certificate certificate <span class="token operator">:</span> certificates<span class="token punctuation">)</span> <span class="token punctuation">{</span>            String certificateAlias <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>index<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            keyStore<span class="token punctuation">.</span><span class="token function">setCertificateEntry</span><span class="token punctuation">(</span>certificateAlias<span class="token punctuation">,</span> certificate<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Use it to build an X509 trust manager.</span>        KeyManagerFactory keyManagerFactory <span class="token operator">=</span> KeyManagerFactory<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>                KeyManagerFactory<span class="token punctuation">.</span><span class="token function">getDefaultAlgorithm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        keyManagerFactory<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>keyStore<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>        TrustManagerFactory trustManagerFactory <span class="token operator">=</span> TrustManagerFactory<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>                TrustManagerFactory<span class="token punctuation">.</span><span class="token function">getDefaultAlgorithm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        trustManagerFactory<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>keyStore<span class="token punctuation">)</span><span class="token punctuation">;</span>        TrustManager<span class="token punctuation">[</span><span class="token punctuation">]</span> trustManagers <span class="token operator">=</span> trustManagerFactory<span class="token punctuation">.</span><span class="token function">getTrustManagers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>trustManagers<span class="token punctuation">.</span>length <span class="token operator">!=</span> <span class="token number">1</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token punctuation">(</span>trustManagers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">instanceof</span> <span class="token class-name">X509TrustManager</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"Unexpected default trust managers:"</span>                    <span class="token operator">+</span> Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>trustManagers<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>X509TrustManager<span class="token punctuation">)</span> trustManagers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 添加password     * @param password     * @return     * @throws GeneralSecurityException     */</span>    <span class="token keyword">private</span> KeyStore <span class="token function">newEmptyKeyStore</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> password<span class="token punctuation">)</span> <span class="token keyword">throws</span> GeneralSecurityException <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            KeyStore keyStore <span class="token operator">=</span> KeyStore<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>KeyStore<span class="token punctuation">.</span><span class="token function">getDefaultType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这里添加自定义的密码，默认</span>            InputStream in <span class="token operator">=</span> null<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// By convention, 'null' creates an empty key store.</span>            keyStore<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>in<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> keyStore<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AssertionError</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（4）  代码中请求</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getHttpsHtml</span><span class="token punctuation">(</span>View view<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Request request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Request<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token string">"https://kyfw.12306.cn/otn/"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        HTTPSUtils httpsUtils <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HTTPSUtils</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        httpsUtils<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newCall</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onFailure</span><span class="token punctuation">(</span>Call call<span class="token punctuation">,</span> IOException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------------onFailure--------------"</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onResponse</span><span class="token punctuation">(</span>Call call<span class="token punctuation">,</span> Response response<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------------onResponse--------------"</span> <span class="token operator">+</span> response<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（5） 最后能打印出这些信息就说明请求成功啦！<br><img src="cc4308ee/4.jpg" alt></p><p><strong>注意：别忘了加权限和依赖okhttp库</strong></p><p>Demo地址：<a href="https://github.com/wildma/okhttps" target="_blank" rel="noopener">https://github.com/wildma/okhttps</a><br>参考博客：<a href="http://blog.csdn.Net/lmj623565791/article/details/48129405" target="_blank" rel="noopener">http://blog.csdn.Net/lmj623565791/article/details/48129405</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> 网络编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OkHttp </tag>
            
            <tag> 自签名 HTTPS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 接入多盟广告 SDK--让你的 APP 通过广告平台赚钱</title>
      <link href="/blog/a2a279f5.html"/>
      <url>/blog/a2a279f5.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>个人开发者可以通过在自己的APP里面嵌入广告,用户下载你的APP,点击了你APP里的广告，您就可以在多盟平台获得相应的收益。如果是公司,那就不是为了赚那么点钱了，主要是为了与用户有更多的互动,就想着在应用里面嵌入广告。我们公司的场景是这样的: 用户点击广告-我们给用户虚拟金币-用户获取虚拟金币又可以在我们的APP的商场里面买东西的时候来抵扣现金。<br>广告平台有很多，常见的有多盟，有米、点金、百度、谷歌的admob等等。自己选择，我们公司选择的是多盟平台,下面就说说怎么集成(主要讲的是其中一种广告-激励视频, 其他类似)。<br>（集成比较简单，按着Demo就能搞定了，这里主要讲的是应用场景）</p><p>广告效果如下，是一段小视频：<br><img src="a2a279f5/1.jpg" alt><br><img src="a2a279f5/2.jpg" alt></p><h2 id="集成"><a href="#集成" class="headerlink" title="集成"></a>集成</h2><p>注意：不想看代码直接下载我的Demo源码，直接运行即可. 如果想测试你自己申请的Publisher ID,换上你自己在多盟开放平台申请的Publisher ID即可运行起来。<br>源码地址：<a href="https://github.com/wildma/DomobVideoDemo" target="_blank" rel="noopener">https://github.com/wildma/DomobVideoDemo</a></p><p>（1）在多盟平台: <a href="http://www.domob.cn/" target="_blank" rel="noopener">http://www.domob.cn/</a> 注册账号–创建应用–获取Publisher ID<br>（2）下载SDK: <a href="http://www.domob.cn/developers/SDKdownload.htm" target="_blank" rel="noopener">http://www.domob.cn/developers/SDKdownload.htm</a><br>（3）AndroidStudio关联domob-video-sdk-1.0.8.jar<br>（4）在清单文件中注册以下信息</p><p>注册权限：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span>uses<span class="token operator">-</span>permission android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.permission.INTERNET"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>uses<span class="token operator">-</span>permission android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.permission.WRITE_EXTERNAL_STORAGE"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>uses<span class="token operator">-</span>permission android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.permission.READ_EXTERNAL_STORAGE"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>uses<span class="token operator">-</span>permission android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.permission.ACCESS_NETWORK_STATE"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>uses<span class="token operator">-</span>permission android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.permission.ACCESS_WIFI_STATE"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>uses<span class="token operator">-</span>permission android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.permission.READ_PHONE_STATE"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>uses<span class="token operator">-</span>permission android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.permission.CHANGE_CONFIGURATION"</span><span class="token operator">/</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注册组件和Publisher ID：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span>activity android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"com.pad.android_independent_video_sdk.view.IndependentVideoActivity"</span>        android<span class="token operator">:</span>theme<span class="token operator">=</span><span class="token string">"@android:style/Theme.Black.NoTitleBar.Fullscreen"</span>        android<span class="token operator">:</span>configChanges<span class="token operator">=</span><span class="token string">"orientation|keyboard|screenSize|screenLayout"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>service android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"com.pad.android_independent_video_sdk.IndependentService"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>meta<span class="token operator">-</span>data android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"PUBLISH_ID"</span> android<span class="token operator">:</span>value<span class="token operator">=</span><span class="token string">"你申请的Publisher ID"</span><span class="token operator">/</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（5）api使用介绍<br>初始化：</p><pre class="line-numbers language-java"><code class="language-java">IndependentVideoManager<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>activity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//初始化</span>IndependentVideoManager<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">updateUserID</span><span class="token punctuation">(</span>activity<span class="token punctuation">,</span>userid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置用户唯一标示，不是媒体id，是开发者用户体系中，用户的唯一标示，没有，则可以不设置。</span>IndependentVideoManager<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">disableShowAlert</span><span class="token punctuation">(</span>activity<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//是否使用多盟提示框，提示完成任务，默认为true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>监听视频状态：</p><pre class="line-numbers language-java"><code class="language-java">IndependentVideoManager<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addIndependentVideoListener</span><span class="token punctuation">(</span>independentVideoListener<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//传入IndependentVideoListener的实例</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>IndependentVideoListener的回调方法如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">videoDidStartLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//视频开始加载</span><span class="token keyword">void</span> <span class="token function">videoDidFinishLoad</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> var1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//视频是否加载完成</span><span class="token keyword">void</span> <span class="token function">videoDidLoadError</span><span class="token punctuation">(</span>String var1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//视频加载失败</span><span class="token keyword">void</span> <span class="token function">videoDidClosed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//视频关闭</span><span class="token keyword">void</span> <span class="token function">videoCompletePlay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//视频播放完成</span><span class="token keyword">void</span> <span class="token function">videoPlayError</span><span class="token punctuation">(</span>String var1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//视频播放出错</span><span class="token keyword">void</span> <span class="token function">videoWillPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//视频开始播放</span><span class="token keyword">void</span> <span class="token function">videoVailable</span><span class="token punctuation">(</span>IndependentVideoAvailableState var1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//检查视频是否可用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>IndependentVideoAvailableState有三个状态：</p><pre class="line-numbers language-java"><code class="language-java">VideoStateDownloading 视频正在下载中VideoStateFinishedCache 有可播视频缓存VideoStateNoExist 没有可播视频缓存<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>检查视频：<br>检查是否有可播视频缓存，IndependentVideoListener.videoVailable返回检查状态</p><pre class="line-numbers language-java"><code class="language-java"> IndependentVideoManager<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">checkVideoAvailable</span><span class="token punctuation">(</span>activity<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>播放视频：</p><pre class="line-numbers language-java"><code class="language-java">IndependentVideoManager<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">presentIndependentVideo</span><span class="token punctuation">(</span>activity<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>释放资源：<br>移除添加的监听，如在Activity的onDestroy生命周期方法中执行</p><pre class="line-numbers language-java"><code class="language-java">IndependentVideoManager<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeIndependentVideoListener</span><span class="token punctuation">(</span>activity<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>大功告成！Android 接入多盟广告就是这么简单！赶紧去赚钱吧！</p><p>注意：不想看代码直接下载我的Demo源码，直接运行即可. 如果想测试你自己申请的Publisher ID,换上你自己在多盟开放平台申请的Publisher ID即可运行起来。<br>源码地址：<a href="https://github.com/wildma/DomobVideoDemo" target="_blank" rel="noopener">https://github.com/wildma/DomobVideoDemo</a><br>如果对你有帮助记得点赞，star哈~</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> 第三方集成 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多盟 </tag>
            
            <tag> domob </tag>
            
            <tag> 接入广告SDK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用高德地图关键字检索 POI-实现仿微信发朋友圈搜索附近位置</title>
      <link href="/blog/47bfd246.html"/>
      <url>/blog/47bfd246.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>由于项目中需要实现搜索附近位置作为收获地址，所以采用了高德地图的关键字检索POI来实现。官方Demo看了很复杂，估计很多人都不想看。但是看了我写的Demo你就会觉得So Easy啦！</p><p><strong>先上效果图：</strong><br><img src="47bfd246/1.jpg" alt></p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>高德提供了千万级别的 POI（Point of Interest，兴趣点）。在地图表达中，一个 POI 可代表一栋大厦、一家商铺、一处景点等等。通过POI搜索，完成找餐馆、找景点、找厕所等等的功能。地图 SDK 的搜索功能提供多种获取 POI 数据的接口，下面说的是根据关键字检索POI</p><p><strong>要实现关键字搜索POI，当然要先集成高德地图到你的项目中去：</strong><br>集成高德地图见我的另一边文章：<a href="http://www.jianshu.com/p/f59231d5775f" target="_blank" rel="noopener">Android项目实战(一)——高德地图集成</a></p><p><strong>下面来看实现关键字搜索POI的具体代码：</strong></p><p>（1）创建activity_poi_keyword_search.xml布局文件，如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span>LinearLayout    xmlns<span class="token operator">:</span>android<span class="token operator">=</span><span class="token string">"http://schemas.android.com/apk/res/android"</span>    android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"match_parent"</span>    android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"match_parent"</span>    android<span class="token operator">:</span>orientation<span class="token operator">=</span><span class="token string">"vertical"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>EditText        android<span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">"@+id/et_keyword"</span>        android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"match_parent"</span>        android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"50dp"</span>        android<span class="token operator">:</span>background<span class="token operator">=</span><span class="token string">"@color/white"</span>        android<span class="token operator">:</span>hint<span class="token operator">=</span><span class="token string">"请输入地址关键字搜索"</span>        android<span class="token operator">:</span>paddingLeft<span class="token operator">=</span><span class="token string">"8dp"</span>        android<span class="token operator">:</span>textColor<span class="token operator">=</span><span class="token string">"@color/deep_black"</span>        android<span class="token operator">:</span>textSize<span class="token operator">=</span><span class="token string">"14sp"</span>        <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>View        android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"match_parent"</span>        android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"1dp"</span>        android<span class="token operator">:</span>background<span class="token operator">=</span><span class="token string">"@color/line_color"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>v7<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>RecyclerView        android<span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">"@+id/recyclerView"</span>        android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"match_parent"</span>        android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"match_parent"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>v7<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>RecyclerView<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>LinearLayout<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（2）创建recyclerview的item布局item_poi_keyword_search.xml,如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span>LinearLayout    android<span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">"@+id/ll_item_layout"</span>    xmlns<span class="token operator">:</span>android<span class="token operator">=</span><span class="token string">"http://schemas.android.com/apk/res/android"</span>    android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"fill_parent"</span>    android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"wrap_content"</span>    android<span class="token operator">:</span>background<span class="token operator">=</span><span class="token string">"@color/white"</span>    android<span class="token operator">:</span>orientation<span class="token operator">=</span><span class="token string">"vertical"</span>    <span class="token operator">></span>    <span class="token operator">&lt;</span>View        android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"match_parent"</span>        android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"0.5dp"</span>        android<span class="token operator">:</span>background<span class="token operator">=</span><span class="token string">"@color/line_color"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>LinearLayout        xmlns<span class="token operator">:</span>android<span class="token operator">=</span><span class="token string">"http://schemas.android.com/apk/res/android"</span>        android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"fill_parent"</span>        android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"wrap_content"</span>        android<span class="token operator">:</span>orientation<span class="token operator">=</span><span class="token string">"vertical"</span>        android<span class="token operator">:</span>paddingBottom<span class="token operator">=</span><span class="token string">"8dp"</span>        android<span class="token operator">:</span>paddingLeft<span class="token operator">=</span><span class="token string">"10dp"</span>        android<span class="token operator">:</span>paddingRight<span class="token operator">=</span><span class="token string">"10dp"</span>        android<span class="token operator">:</span>paddingTop<span class="token operator">=</span><span class="token string">"8dp"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>TextView            android<span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">"@+id/tv_detailAddress"</span>            android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"wrap_content"</span>            android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"wrap_content"</span>            android<span class="token operator">:</span>layout_gravity<span class="token operator">=</span><span class="token string">"center_vertical"</span>            android<span class="token operator">:</span>text<span class="token operator">=</span><span class="token string">"世界之窗"</span>            android<span class="token operator">:</span>textColor<span class="token operator">=</span><span class="token string">"@color/deep_black"</span>            android<span class="token operator">:</span>textSize<span class="token operator">=</span><span class="token string">"16sp"</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>TextView            android<span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">"@+id/tv_content"</span>            android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"wrap_content"</span>            android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"wrap_content"</span>            android<span class="token operator">:</span>layout_gravity<span class="token operator">=</span><span class="token string">"center_vertical"</span>            android<span class="token operator">:</span>text<span class="token operator">=</span><span class="token string">"1号线"</span>            android<span class="token operator">:</span>textColor<span class="token operator">=</span><span class="token string">"@color/shallow_black"</span>            android<span class="token operator">:</span>textSize<span class="token operator">=</span><span class="token string">"16sp"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>LinearLayout<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>LinearLayout<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（3）创建实体类PoiAddressBean，如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PoiAddressBean</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String longitude<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//经度</span>    <span class="token keyword">private</span> String latitude<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//纬度</span>    <span class="token keyword">private</span> String text<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//信息内容</span>    <span class="token keyword">public</span>  String detailAddress<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//详细地址 (搜索的关键字)</span>    <span class="token keyword">public</span>  String province<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//省</span>    <span class="token keyword">public</span>  String city<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//城市</span>    <span class="token keyword">public</span>  String district<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//区域(宝安区)</span>    <span class="token keyword">public</span> <span class="token function">PoiAddressBean</span><span class="token punctuation">(</span>String lon<span class="token punctuation">,</span> String lat<span class="token punctuation">,</span> String detailAddress<span class="token punctuation">,</span> String text<span class="token punctuation">,</span> String province<span class="token punctuation">,</span> String city<span class="token punctuation">,</span> String district<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>longitude <span class="token operator">=</span> lon<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>latitude <span class="token operator">=</span> lat<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>text <span class="token operator">=</span> text<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>detailAddress <span class="token operator">=</span> detailAddress<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>province <span class="token operator">=</span> province<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>city <span class="token operator">=</span> city<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>district <span class="token operator">=</span> district<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getLongitude</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> longitude<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getLatitude</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> latitude<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> text<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getDetailAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> detailAddress<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getProvince</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> province<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getCity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> city<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getDistrict</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> district<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（4）创建适配器PoiKeywordSearchAdapter，如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PoiKeywordSearchAdapter</span> <span class="token keyword">extends</span> <span class="token class-name">RecyclerView<span class="token punctuation">.</span>Adapter</span><span class="token operator">&lt;</span>PoiKeywordSearchAdapter<span class="token punctuation">.</span>MyViewHolder<span class="token operator">></span> <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>PoiAddressBean<span class="token operator">></span> poiAddressBean<span class="token punctuation">;</span>    Context mContext<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">PoiKeywordSearchAdapter</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>PoiAddressBean<span class="token operator">></span> poiAddressBean<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>poiAddressBean  <span class="token operator">=</span> poiAddressBean<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mContext <span class="token operator">=</span> context<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> MyViewHolder <span class="token function">onCreateViewHolder</span><span class="token punctuation">(</span>ViewGroup parent<span class="token punctuation">,</span> <span class="token keyword">int</span> viewType<span class="token punctuation">)</span> <span class="token punctuation">{</span>        View view<span class="token punctuation">;</span>        view <span class="token operator">=</span> LayoutInflater<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>mContext<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>item_poi_keyword_search<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyViewHolder</span><span class="token punctuation">(</span>view<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onBindViewHolder</span><span class="token punctuation">(</span>MyViewHolder holder<span class="token punctuation">,</span> <span class="token keyword">int</span> position<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> PoiAddressBean poiAddressBean <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>poiAddressBean<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">;</span>        holder<span class="token punctuation">.</span>tv_detailAddress<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>poiAddressBean<span class="token punctuation">.</span><span class="token function">getDetailAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        holder<span class="token punctuation">.</span>tv_content<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>poiAddressBean<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        holder<span class="token punctuation">.</span>ll_item_layout<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>View view<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token punctuation">(</span><span class="token punctuation">(</span>PoiKeywordSearchActivity<span class="token punctuation">)</span>mContext<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setDetailAddress</span><span class="token punctuation">(</span>poiAddressBean<span class="token punctuation">.</span><span class="token function">getDetailAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getItemCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>poiAddressBean <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> poiAddressBean<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">MyViewHolder</span> <span class="token keyword">extends</span> <span class="token class-name">RecyclerView<span class="token punctuation">.</span>ViewHolder</span> <span class="token punctuation">{</span>        TextView     tv_content<span class="token punctuation">;</span>        TextView     tv_detailAddress<span class="token punctuation">;</span>        LinearLayout ll_item_layout<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">MyViewHolder</span><span class="token punctuation">(</span>View itemView<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">super</span><span class="token punctuation">(</span>itemView<span class="token punctuation">)</span><span class="token punctuation">;</span>            tv_detailAddress <span class="token operator">=</span> <span class="token punctuation">(</span>TextView<span class="token punctuation">)</span> itemView<span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>tv_detailAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>            tv_content <span class="token operator">=</span> <span class="token punctuation">(</span>TextView<span class="token punctuation">)</span> itemView<span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>tv_content<span class="token punctuation">)</span><span class="token punctuation">;</span>            ll_item_layout <span class="token operator">=</span> <span class="token punctuation">(</span>LinearLayout<span class="token punctuation">)</span> itemView<span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>ll_item_layout<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（5）创建搜索界面类PoiKeywordSearchActivity （主要代码都在这里），如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PoiKeywordSearchActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token keyword">implements</span> <span class="token class-name">PoiSearch<span class="token punctuation">.</span>OnPoiSearchListener</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> RecyclerView mRecyclerView<span class="token punctuation">;</span>    <span class="token keyword">private</span> EditText mEt_keyword<span class="token punctuation">;</span>    <span class="token keyword">private</span> String keyWord <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 要输入的poi搜索关键字</span>    <span class="token keyword">private</span> PoiResult poiResult<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// poi返回的结果</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> currentPage <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 当前页面，从0开始计数</span>    <span class="token keyword">private</span> PoiSearch<span class="token punctuation">.</span>Query query<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Poi查询条件类</span>    <span class="token keyword">private</span> PoiSearch       poiSearch<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// POI搜索</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_poi_keyword_search<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">initView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">initListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">initData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">initView</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        mRecyclerView <span class="token operator">=</span> <span class="token punctuation">(</span>RecyclerView<span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>recyclerView<span class="token punctuation">)</span><span class="token punctuation">;</span>        mEt_keyword <span class="token operator">=</span> <span class="token punctuation">(</span>EditText<span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>et_keyword<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">initListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        mEt_keyword<span class="token punctuation">.</span><span class="token function">addTextChangedListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TextWatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">beforeTextChanged</span><span class="token punctuation">(</span>CharSequence charSequence<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> i1<span class="token punctuation">,</span> <span class="token keyword">int</span> i2<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onTextChanged</span><span class="token punctuation">(</span>CharSequence charSequence<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> i1<span class="token punctuation">,</span> <span class="token keyword">int</span> i2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                keyWord <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>charSequence<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>keyWord<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    ToastUtil<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span>PoiKeywordSearchActivity<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token string">"请输入搜索关键字"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token function">doSearchQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterTextChanged</span><span class="token punctuation">(</span>Editable editable<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 开始进行poi搜索     */</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doSearchQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        currentPage <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//不输入城市名称有些地方搜索不到</span>        query <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PoiSearch<span class="token punctuation">.</span>Query</span><span class="token punctuation">(</span>keyWord<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"深圳"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 第一个参数表示搜索字符串，第二个参数表示poi搜索类型，第三个参数表示poi搜索区域（空字符串代表全国）</span>        <span class="token comment" spellcheck="true">//这里没有做分页加载了,默认给50条数据</span>        query<span class="token punctuation">.</span><span class="token function">setPageSize</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 设置每页最多返回多少条poiitem</span>        query<span class="token punctuation">.</span><span class="token function">setPageNum</span><span class="token punctuation">(</span>currentPage<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 设置查第一页</span>        poiSearch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PoiSearch</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> query<span class="token punctuation">)</span><span class="token punctuation">;</span>        poiSearch<span class="token punctuation">.</span><span class="token function">setOnPoiSearchListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        poiSearch<span class="token punctuation">.</span><span class="token function">searchPOIAsyn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">initData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        mRecyclerView<span class="token punctuation">.</span><span class="token function">setLayoutManager</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LinearLayoutManager</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * POI信息查询回调方法     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onPoiSearched</span><span class="token punctuation">(</span>PoiResult result<span class="token punctuation">,</span> <span class="token keyword">int</span> rCode<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>rCode <span class="token operator">==</span> AMapException<span class="token punctuation">.</span>CODE_AMAP_SUCCESS<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> result<span class="token punctuation">.</span><span class="token function">getQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 搜索poi的结果</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">getQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 是否是同一条</span>                    poiResult <span class="token operator">=</span> result<span class="token punctuation">;</span>                    ArrayList<span class="token operator">&lt;</span>PoiAddressBean<span class="token operator">></span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>PoiAddressBean<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//自己创建的数据集合</span>                    <span class="token comment" spellcheck="true">// 取得搜索到的poiitems有多少页</span>                    List<span class="token operator">&lt;</span>PoiItem<span class="token operator">></span> poiItems <span class="token operator">=</span> poiResult<span class="token punctuation">.</span><span class="token function">getPois</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 取得第一页的poiitem数据，页数从数字0开始</span>                    List<span class="token operator">&lt;</span>SuggestionCity<span class="token operator">></span> suggestionCities <span class="token operator">=</span> poiResult                            <span class="token punctuation">.</span><span class="token function">getSearchSuggestionCitys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 当搜索不到poiitem数据时，会返回含有搜索关键字的城市信息</span>                    <span class="token keyword">for</span><span class="token punctuation">(</span>PoiItem item <span class="token operator">:</span> poiItems<span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">//获取经纬度对象</span>                        LatLonPoint llp <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">getLatLonPoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">double</span> lon <span class="token operator">=</span> llp<span class="token punctuation">.</span><span class="token function">getLongitude</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">double</span> lat <span class="token operator">=</span> llp<span class="token punctuation">.</span><span class="token function">getLatitude</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        String title <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">getTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        String text <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">getSnippet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        String provinceName <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">getProvinceName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        String cityName <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">getCityName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        String adName <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">getAdName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        data<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PoiAddressBean</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>lon<span class="token punctuation">)</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>lat<span class="token punctuation">)</span><span class="token punctuation">,</span> title<span class="token punctuation">,</span> text<span class="token punctuation">,</span>provinceName<span class="token punctuation">,</span>                                cityName<span class="token punctuation">,</span>adName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    PoiKeywordSearchAdapter adapter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PoiKeywordSearchAdapter</span><span class="token punctuation">(</span>PoiKeywordSearchActivity<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                    mRecyclerView<span class="token punctuation">.</span><span class="token function">setAdapter</span><span class="token punctuation">(</span>adapter<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                ToastUtil<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span>PoiKeywordSearchActivity<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span>                        <span class="token function">getString</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>string<span class="token punctuation">.</span>no_result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            ToastUtil<span class="token punctuation">.</span><span class="token function">showerror</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> rCode<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * POI信息查询回调方法     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onPoiItemSearched</span><span class="token punctuation">(</span>PoiItem item<span class="token punctuation">,</span> <span class="token keyword">int</span> rCode<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 设置详情地址     * @param detailAddress     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDetailAddress</span><span class="token punctuation">(</span>String detailAddress<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mEt_keyword<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>detailAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（6）最后附上官方Demo中的吐司工具类ToastUtil，如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ToastUtil</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> String info<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Toast<span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> info<span class="token punctuation">,</span> Toast<span class="token punctuation">.</span>LENGTH_LONG<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> <span class="token keyword">int</span> info<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Toast<span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> info<span class="token punctuation">,</span> Toast<span class="token punctuation">.</span>LENGTH_LONG<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">showerror</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> <span class="token keyword">int</span> rCode<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>rCode<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//服务错误码</span>            <span class="token keyword">case</span> <span class="token number">1001</span><span class="token operator">:</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AMapException</span><span class="token punctuation">(</span>AMapException<span class="token punctuation">.</span>AMAP_SIGNATURE_ERROR<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">1002</span><span class="token operator">:</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AMapException</span><span class="token punctuation">(</span>AMapException<span class="token punctuation">.</span>AMAP_INVALID_USER_KEY<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">1003</span><span class="token operator">:</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AMapException</span><span class="token punctuation">(</span>AMapException<span class="token punctuation">.</span>AMAP_SERVICE_NOT_AVAILBALE<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">1004</span><span class="token operator">:</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AMapException</span><span class="token punctuation">(</span>AMapException<span class="token punctuation">.</span>AMAP_DAILY_QUERY_OVER_LIMIT<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">1005</span><span class="token operator">:</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AMapException</span><span class="token punctuation">(</span>AMapException<span class="token punctuation">.</span>AMAP_ACCESS_TOO_FREQUENT<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">1006</span><span class="token operator">:</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AMapException</span><span class="token punctuation">(</span>AMapException<span class="token punctuation">.</span>AMAP_INVALID_USER_IP<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">1007</span><span class="token operator">:</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AMapException</span><span class="token punctuation">(</span>AMapException<span class="token punctuation">.</span>AMAP_INVALID_USER_DOMAIN<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">1008</span><span class="token operator">:</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AMapException</span><span class="token punctuation">(</span>AMapException<span class="token punctuation">.</span>AMAP_INVALID_USER_SCODE<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">1009</span><span class="token operator">:</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AMapException</span><span class="token punctuation">(</span>AMapException<span class="token punctuation">.</span>AMAP_USERKEY_PLAT_NOMATCH<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">1010</span><span class="token operator">:</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AMapException</span><span class="token punctuation">(</span>AMapException<span class="token punctuation">.</span>AMAP_IP_QUERY_OVER_LIMIT<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">1011</span><span class="token operator">:</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AMapException</span><span class="token punctuation">(</span>AMapException<span class="token punctuation">.</span>AMAP_NOT_SUPPORT_HTTPS<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">1012</span><span class="token operator">:</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AMapException</span><span class="token punctuation">(</span>AMapException<span class="token punctuation">.</span>AMAP_INSUFFICIENT_PRIVILEGES<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">1013</span><span class="token operator">:</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AMapException</span><span class="token punctuation">(</span>AMapException<span class="token punctuation">.</span>AMAP_USER_KEY_RECYCLED<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">1100</span><span class="token operator">:</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AMapException</span><span class="token punctuation">(</span>AMapException<span class="token punctuation">.</span>AMAP_ENGINE_RESPONSE_ERROR<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">1101</span><span class="token operator">:</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AMapException</span><span class="token punctuation">(</span>AMapException<span class="token punctuation">.</span>AMAP_ENGINE_RESPONSE_DATA_ERROR<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">1102</span><span class="token operator">:</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AMapException</span><span class="token punctuation">(</span>AMapException<span class="token punctuation">.</span>AMAP_ENGINE_CONNECT_TIMEOUT<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">1103</span><span class="token operator">:</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AMapException</span><span class="token punctuation">(</span>AMapException<span class="token punctuation">.</span>AMAP_ENGINE_RETURN_TIMEOUT<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">1200</span><span class="token operator">:</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AMapException</span><span class="token punctuation">(</span>AMapException<span class="token punctuation">.</span>AMAP_SERVICE_INVALID_PARAMS<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">1201</span><span class="token operator">:</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AMapException</span><span class="token punctuation">(</span>AMapException<span class="token punctuation">.</span>AMAP_SERVICE_MISSING_REQUIRED_PARAMS<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">1202</span><span class="token operator">:</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AMapException</span><span class="token punctuation">(</span>AMapException<span class="token punctuation">.</span>AMAP_SERVICE_ILLEGAL_REQUEST<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">1203</span><span class="token operator">:</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AMapException</span><span class="token punctuation">(</span>AMapException<span class="token punctuation">.</span>AMAP_SERVICE_UNKNOWN_ERROR<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//sdk返回错误</span>            <span class="token keyword">case</span> <span class="token number">1800</span><span class="token operator">:</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AMapException</span><span class="token punctuation">(</span>AMapException<span class="token punctuation">.</span>AMAP_CLIENT_ERRORCODE_MISSSING<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">1801</span><span class="token operator">:</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AMapException</span><span class="token punctuation">(</span>AMapException<span class="token punctuation">.</span>AMAP_CLIENT_ERROR_PROTOCOL<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">1802</span><span class="token operator">:</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AMapException</span><span class="token punctuation">(</span>AMapException<span class="token punctuation">.</span>AMAP_CLIENT_SOCKET_TIMEOUT_EXCEPTION<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">1803</span><span class="token operator">:</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AMapException</span><span class="token punctuation">(</span>AMapException<span class="token punctuation">.</span>AMAP_CLIENT_URL_EXCEPTION<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">1804</span><span class="token operator">:</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AMapException</span><span class="token punctuation">(</span>AMapException<span class="token punctuation">.</span>AMAP_CLIENT_UNKNOWHOST_EXCEPTION<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">1806</span><span class="token operator">:</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AMapException</span><span class="token punctuation">(</span>AMapException<span class="token punctuation">.</span>AMAP_CLIENT_NETWORK_EXCEPTION<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">1900</span><span class="token operator">:</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AMapException</span><span class="token punctuation">(</span>AMapException<span class="token punctuation">.</span>AMAP_CLIENT_UNKNOWN_ERROR<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">1901</span><span class="token operator">:</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AMapException</span><span class="token punctuation">(</span>AMapException<span class="token punctuation">.</span>AMAP_CLIENT_INVALID_PARAMETER<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">1902</span><span class="token operator">:</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AMapException</span><span class="token punctuation">(</span>AMapException<span class="token punctuation">.</span>AMAP_CLIENT_IO_EXCEPTION<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">1903</span><span class="token operator">:</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AMapException</span><span class="token punctuation">(</span>AMapException<span class="token punctuation">.</span>AMAP_CLIENT_NULLPOINT_EXCEPTION<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//云图和附近错误码  </span>            <span class="token keyword">case</span> <span class="token number">2000</span><span class="token operator">:</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AMapException</span><span class="token punctuation">(</span>AMapException<span class="token punctuation">.</span>AMAP_SERVICE_TABLEID_NOT_EXIST<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">2001</span><span class="token operator">:</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AMapException</span><span class="token punctuation">(</span>AMapException<span class="token punctuation">.</span>AMAP_ID_NOT_EXIST<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">2002</span><span class="token operator">:</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AMapException</span><span class="token punctuation">(</span>AMapException<span class="token punctuation">.</span>AMAP_SERVICE_MAINTENANCE<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">2003</span><span class="token operator">:</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AMapException</span><span class="token punctuation">(</span>AMapException<span class="token punctuation">.</span>AMAP_ENGINE_TABLEID_NOT_EXIST<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">2100</span><span class="token operator">:</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AMapException</span><span class="token punctuation">(</span>AMapException<span class="token punctuation">.</span>AMAP_NEARBY_INVALID_USERID<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">2101</span><span class="token operator">:</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AMapException</span><span class="token punctuation">(</span>AMapException<span class="token punctuation">.</span>AMAP_NEARBY_KEY_NOT_BIND<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">2200</span><span class="token operator">:</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AMapException</span><span class="token punctuation">(</span>AMapException<span class="token punctuation">.</span>AMAP_CLIENT_UPLOADAUTO_STARTED_ERROR<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">2201</span><span class="token operator">:</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AMapException</span><span class="token punctuation">(</span>AMapException<span class="token punctuation">.</span>AMAP_CLIENT_USERID_ILLEGAL<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">2202</span><span class="token operator">:</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AMapException</span><span class="token punctuation">(</span>AMapException<span class="token punctuation">.</span>AMAP_CLIENT_NEARBY_NULL_RESULT<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">2203</span><span class="token operator">:</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AMapException</span><span class="token punctuation">(</span>AMapException<span class="token punctuation">.</span>AMAP_CLIENT_UPLOAD_TOO_FREQUENT<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">2204</span><span class="token operator">:</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AMapException</span><span class="token punctuation">(</span>AMapException<span class="token punctuation">.</span>AMAP_CLIENT_UPLOAD_LOCATION_ERROR<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//路径规划   </span>            <span class="token keyword">case</span> <span class="token number">3000</span><span class="token operator">:</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AMapException</span><span class="token punctuation">(</span>AMapException<span class="token punctuation">.</span>AMAP_ROUTE_OUT_OF_SERVICE<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">3001</span><span class="token operator">:</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AMapException</span><span class="token punctuation">(</span>AMapException<span class="token punctuation">.</span>AMAP_ROUTE_NO_ROADS_NEARBY<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">3002</span><span class="token operator">:</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AMapException</span><span class="token punctuation">(</span>AMapException<span class="token punctuation">.</span>AMAP_ROUTE_FAIL<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">3003</span><span class="token operator">:</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AMapException</span><span class="token punctuation">(</span>AMapException<span class="token punctuation">.</span>AMAP_OVER_DIRECTION_RANGE<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//短传分享</span>            <span class="token keyword">case</span> <span class="token number">4000</span><span class="token operator">:</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AMapException</span><span class="token punctuation">(</span>AMapException<span class="token punctuation">.</span>AMAP_SHARE_LICENSE_IS_EXPIRED<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">4001</span><span class="token operator">:</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AMapException</span><span class="token punctuation">(</span>AMapException<span class="token punctuation">.</span>AMAP_SHARE_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                Toast<span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span><span class="token string">"查询失败："</span><span class="token operator">+</span>rCode <span class="token punctuation">,</span> Toast<span class="token punctuation">.</span>LENGTH_LONG<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">logError</span><span class="token punctuation">(</span><span class="token string">"查询失败"</span><span class="token punctuation">,</span> rCode<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Toast<span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Toast<span class="token punctuation">.</span>LENGTH_LONG<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">logError</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rCode<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">logError</span><span class="token punctuation">(</span>String info<span class="token punctuation">,</span> <span class="token keyword">int</span> errorCode<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">print</span><span class="token punctuation">(</span>LINE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//start</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"                                   错误信息                                     "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">print</span><span class="token punctuation">(</span>LINE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//title</span>        <span class="token function">print</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"错误码: "</span> <span class="token operator">+</span> errorCode<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"                                                                               "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"如果需要更多信息，请根据错误码到以下地址进行查询"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"  http://lbs.amap.com/api/android-sdk/guide/map-tools/error-code/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"如若仍无法解决问题，请将全部log信息提交到工单系统，多谢合作"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">print</span><span class="token punctuation">(</span>LINE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//end</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//log</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String TAG <span class="token operator">=</span> <span class="token string">"AMAP_ERROR"</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> String LINE_CHAR<span class="token operator">=</span><span class="token string">"="</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> String BOARD_CHAR<span class="token operator">=</span><span class="token string">"|"</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> LENGTH <span class="token operator">=</span> <span class="token number">80</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> String LINE<span class="token punctuation">;</span>    <span class="token keyword">static</span><span class="token punctuation">{</span>        StringBuilder sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>LENGTH<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            sb <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>LINE_CHAR<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        LINE <span class="token operator">=</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printLog</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>LENGTH<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            StringBuilder sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>BOARD_CHAR<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>i <span class="token operator">&lt;</span>LENGTH<span class="token operator">-</span><span class="token number">2</span><span class="token operator">-</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>BOARD_CHAR<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">print</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            String line <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>LENGTH<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">print</span><span class="token punctuation">(</span>BOARD_CHAR<span class="token operator">+</span>line<span class="token operator">+</span>BOARD_CHAR<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printLog</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>LENGTH<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>大功告成！利用高德地图关键字检索POI就是这么简单！</strong> </p><p><strong>源码地址：</strong><a href="https://github.com/wildma/PoiDemo" target="_blank" rel="noopener">https://github.com/wildma/PoiDemo</a>    <strong>如果对你有帮助star支持下哈~</strong></p><p>注意：下载后直接运行会报“用户MD5安全码未通过”，因为该Demo用的是我自己在高德平台申请的KEY,<br>如果真的想要在我的Demo上测试你的Key,则需要替换清单文件中的key为你的。并且将项目的包名改为你申请key时的包名。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高德地图 </tag>
            
            <tag> POI 搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Glide 中 centerCrop() 与 transform() 共用问题(包括 4.0.0 以上解决方法)</title>
      <link href="/blog/3cc7098.html"/>
      <url>/blog/3cc7098.html</url>
      
        <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>当我们在显示一张图片的时候，想让他等比例缩放到ImageView的大小，又想这张图片实现矩形圆角。</p><p>我们一开始会想到这么设置：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GlideRoundImage</span><span class="token punctuation">(</span><span class="token function">getActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">centerCrop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>But，这样设置后，图片只有centerCrop效果,却没有矩形圆角效果。如图：<br><img src="3cc7098/1.jpg" alt></p><p>但是这并不是我们想要的效果，然后会想着去掉centerCrop看看是怎样的：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GlideRoundImage</span><span class="token punctuation">(</span><span class="token function">getActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结果却是这样的，没错！ 图片并没有按比例缩放.。如图：<br><img src="3cc7098/2.jpg" alt></p><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>看centerCrop()方法的源码可知，也是需要调用transform()方法的。所以前后共用CenterCrop会覆盖掉GlideRoundImage的效果。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> BitmapRequestBuilder<span class="token operator">&lt;</span>ModelType<span class="token punctuation">,</span> TranscodeType<span class="token operator">></span> <span class="token function">centerCrop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">transform</span><span class="token punctuation">(</span>glide<span class="token punctuation">.</span><span class="token function">getBitmapCenterCrop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CenterCrop</span><span class="token punctuation">(</span><span class="token function">getActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">GlideRoundImage</span><span class="token punctuation">(</span><span class="token function">getActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2个效果同时放在transform里面就可以解决问题了，效果图：<br><img src="3cc7098/3.jpg" alt></p><h2 id="Glide-4-0-0以上解决方法"><a href="#Glide-4-0-0以上解决方法" class="headerlink" title="Glide 4.0.0以上解决方法"></a>Glide 4.0.0以上解决方法</h2><p>将圆角矩形GlideRoundImage中的transform方法改成如下即可，意思就是先将bitmap转换成带centerCrop属性的bitmap，然后再转换成圆角。如下：</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> Bitmap <span class="token function">transform</span><span class="token punctuation">(</span>BitmapPool pool<span class="token punctuation">,</span> Bitmap toTransform<span class="token punctuation">,</span> <span class="token keyword">int</span> outWidth<span class="token punctuation">,</span> <span class="token keyword">int</span> outHeight<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Bitmap bitmap <span class="token operator">=</span> TransformationUtils<span class="token punctuation">.</span><span class="token function">centerCrop</span><span class="token punctuation">(</span>pool<span class="token punctuation">,</span> toTransform<span class="token punctuation">,</span> outWidth<span class="token punctuation">,</span> outHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">roundCrop</span><span class="token punctuation">(</span>pool<span class="token punctuation">,</span> bitmap<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码中使用：</p><pre class="line-numbers language-java"><code class="language-java">        RequestOptions myOptions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RequestOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GlideRoundImage</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Glide<span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>imgUrl<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>myOptions<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span>mIv_img<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>附上矩形圆角的代码: <a href="https://github.com/wildma/GlideRoundImage" target="_blank" rel="noopener">https://github.com/wildma/GlideRoundImage</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> 问题记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Glide </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 一步一步教你集成高德地图</title>
      <link href="/blog/63c3ed0a.html"/>
      <url>/blog/63c3ed0a.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>当项目中需要使用地图SDK的时候, 是选择高德地图还是百度地图呢?从对开发者友好角度，从容易上手角度：高德完胜百度! 所以我们公司的项目也选择了高德地图。好了！下面就开始高德地图的集成吧！</strong></p><h2 id="一、账号与Key的申请"><a href="#一、账号与Key的申请" class="headerlink" title="一、账号与Key的申请"></a>一、账号与Key的申请</h2><p>注册成为高德开发者需要分三步：<br>第一步，注册高德开发者；第二步，去控制台创建应用；第三步，获取Key。<br>前2步都比较简单，这里说下第三步。</p><p><strong>获取Key：</strong><br>（1）进入控制台，创建一个新应用。如果您之前已经创建过应用，可直接跳过这个步骤。<br><img src="63c3ed0a/1.jpg" alt><br>（2） 在创建的应用上点击”添加新Key”按钮，在弹出的对话框中，依次：输入应用名名称，选择绑定的服务为“Android平台SDK”，输入发布版安全码  SHA1、调试版安全码 SHA1、以及 Package，如下图所示：<br><img src="63c3ed0a/2.jpg" alt></p><p>获取SHA1见：<a href="https://lbs.amap.com/api/android-indoorlocation-sdk/guide/create-project/get-key/?sug_index=0#sha1" target="_blank" rel="noopener">如何获取 SHA1</a></p><h2 id="二、Android-Studio-配置工程"><a href="#二、Android-Studio-配置工程" class="headerlink" title="二、Android Studio 配置工程"></a>二、Android Studio 配置工程</h2><p>配置工程前需要到官网下载高德SDK <a href="http://lbs.amap.com/api/android-sdk/download/" target="_blank" rel="noopener">下载地址</a><br>注意：这里根据项目需求选择下载，如果不需要导航，定位就用默认的即可。（这样可以大大减小包的体积）如图：<br><img src="63c3ed0a/3.jpg" alt><br>下载后会得到如图所示压缩包<br><img src="63c3ed0a/4.jpg" alt></p><p>（1）添加 jar 包<br>将下载的地图 SDK 的 jar包复制到工程的 libs 目录下，如果有老版本 jar 包在其中，请删除。如图所示：<br><img src="63c3ed0a/5.jpg" alt></p><p>（2）添加 so 库<br>说明：3D地图才需要添加so库，2D地图无需这一步骤。</p><p>在 main 目录下创建文件夹 jniLibs (如果有就不需要创建了)，将下载文件的 armeabi 文件夹复制到这个目录下,如果已经有这个目录，将下载的 so 库复制到这个目录即可。如图所示：<br><img src="63c3ed0a/6.jpg" alt></p><p>（3）在清单文件中配置高德 Key：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span>application         android<span class="token operator">:</span>icon<span class="token operator">=</span><span class="token string">"@drawable/icon"</span>         android<span class="token operator">:</span>label<span class="token operator">=</span><span class="token string">"@string/app_name"</span> <span class="token operator">></span>         <span class="token operator">&lt;</span>meta<span class="token operator">-</span>data            android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"com.amap.api.v2.apikey"</span>            android<span class="token operator">:</span>value<span class="token operator">=</span><span class="token string">"请输入您的用户Key"</span><span class="token operator">/</span><span class="token operator">></span>            ……<span class="token operator">&lt;</span><span class="token operator">/</span>application<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（4）在清单文件中配置权限：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>允许程序打开网络套接字<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>uses<span class="token operator">-</span>permission android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.permission.INTERNET"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>允许程序设置内置sd卡的写权限<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>uses<span class="token operator">-</span>permission android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.permission.WRITE_EXTERNAL_STORAGE"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>允许程序获取网络状态<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>uses<span class="token operator">-</span>permission android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.permission.ACCESS_NETWORK_STATE"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>允许程序访问WiFi网络信息<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>uses<span class="token operator">-</span>permission android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.permission.ACCESS_WIFI_STATE"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>允许程序读写手机状态和身份<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>uses<span class="token operator">-</span>permission android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.permission.READ_PHONE_STATE"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>用于进行网络定位<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>uses<span class="token operator">-</span>permission android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.permission.ACCESS_COARSE_LOCATION"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>uses<span class="token operator">-</span>permission<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>用于访问GPS定位<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>uses<span class="token operator">-</span>permission android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.permission.ACCESS_FINE_LOCATION"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>uses<span class="token operator">-</span>permission<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>用于获取wifi的获取权限，wifi信息会用来进行网络定位<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>uses<span class="token operator">-</span>permission android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.permission.CHANGE_WIFI_STATE"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>uses<span class="token operator">-</span>permission<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>用于读取手机当前的状态<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>uses<span class="token operator">-</span>permission android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.permission.READ_PHONE_STATE"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>uses<span class="token operator">-</span>permission<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>用于申请调用A<span class="token operator">-</span>GPS模块<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>uses<span class="token operator">-</span>permission android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"android.permission.ACCESS_LOCATION_EXTRA_COMMANDS"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>uses<span class="token operator">-</span>permission<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、验证"><a href="#三、验证" class="headerlink" title="三、验证"></a>三、验证</h2><p>好了！到这里高德地图集成就全部完成了！接下来验证我们集成的是否正确！<br>（1）首先在布局xml文件中添加地图控件：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span>com<span class="token punctuation">.</span>amap<span class="token punctuation">.</span>api<span class="token punctuation">.</span>maps<span class="token punctuation">.</span>MapView    android<span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">"@+id/map"</span>    android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"match_parent"</span>    android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"match_parent"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>com<span class="token punctuation">.</span>amap<span class="token punctuation">.</span>api<span class="token punctuation">.</span>maps<span class="token punctuation">.</span>MapView<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（2）在activity的onCreate（）方法中添加如下代码就能看到高德地图了！</p><pre class="line-numbers language-java"><code class="language-java">MapView mapView <span class="token operator">=</span> <span class="token punctuation">(</span>MapView<span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//找到地图控件</span><span class="token comment" spellcheck="true">//在activity执行onCreate时执行mMapView.onCreate(savedInstanceState)，创建地图</span>mapView<span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>AMap aMap <span class="token operator">=</span> mapView<span class="token punctuation">.</span><span class="token function">getMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//初始化地图控制器对象</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="63c3ed0a/7.jpg" alt></p><p><strong>大功告成！集成高德地图就是这么简单！</strong><br><strong>如果对你有帮助点个赞支持下吧！</strong></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
          <category> 第三方集成 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高德地图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dagger2 使用——结合 MVP 模式讲解</title>
      <link href="/blog/66c9d45.html"/>
      <url>/blog/66c9d45.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>更新：根据Dagger2官方最新配置，现在配置已经不需要添加android-apt插件了，所以配置更简单了。即在下文中说的Dagger2配置的第一步与第二步都可以省略了，第三步直接改成以下即可）。</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/*dagger2的配置*/</span>    annotationProcessor <span class="token string">'com.google.dagger:dagger-compiler:2.4'</span>    compile <span class="token string">'com.google.dagger:dagger:2.4'</span>    compile <span class="token string">'org.glassfish:javax.annotation:10.0-b28'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>相信大部分人在使用mvp模式的时候都会同时用到Dagger2框架，因为Dagger2能非常完美的解决mvp模式中存在的V层与P层之间的耦合。所以下面介绍Dagger2的使用也会结合我上一篇文章中的mvp模式来讲解，还没看上一篇文章的可以先去看看—— <a href="https://wildma.github.io/mvc-mvp/">带你通俗易懂的理解——Android中的MVC与MVP</a>。</p><h2 id="一、Dagger2是什么？"><a href="#一、Dagger2是什么？" class="headerlink" title="一、Dagger2是什么？"></a>一、Dagger2是什么？</h2><p>Dagger2是一个在Android 和 Java中使用的依赖注入框架，现在由Google维护，是基于Dagger的基础上开发的，Dagger是由square开发的。Dagger2最大的作用就是解耦，例如ClassA中需要用到ClassB中的某个方法，但是又不想在ClassA中通过new的方式实例化ClassB，这时候Dagger2就很好的解决了这个问题，Dagger2可以在ClassA中通过依赖注入的方式实例化ClassB，从而达到ClassA与ClassB的解耦。</p><h2 id="二、Dagger2配置"><a href="#二、Dagger2配置" class="headerlink" title="二、Dagger2配置"></a>二、Dagger2配置</h2><p>（1）在项目的build.gradle中添加android-apt插件</p><pre class="line-numbers language-java"><code class="language-java">buildscript <span class="token punctuation">{</span>    repositories <span class="token punctuation">{</span>        <span class="token function">jcenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    dependencies <span class="token punctuation">{</span>        classpath <span class="token string">'com.android.tools.build:gradle:2.2.3'</span>        <span class="token comment" spellcheck="true">//android-apt 插件</span>        classpath <span class="token string">'com.neenbedankt.gradle.plugins:android-apt:1.8'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（2）在app的build.gradle中添加apt插件的使用</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//apt插件的使用</span>apply plugin<span class="token operator">:</span> <span class="token string">'com.neenbedankt.android-apt'</span>android <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>dependencies <span class="token punctuation">{</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（3）在app的build.gradle中添加Dagger2的依赖</p><pre class="line-numbers language-java"><code class="language-java"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>android <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>dependencies <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//dagger2的配置</span>    compile <span class="token string">'com.google.dagger:dagger:2.4'</span>    apt <span class="token string">'com.google.dagger:dagger-compiler:2.4'</span>    compile <span class="token string">'org.glassfish:javax.annotation:10.0-b28'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、Dagger2使用"><a href="#三、Dagger2使用" class="headerlink" title="三、Dagger2使用"></a>三、Dagger2使用</h2><p>经过上面的配置就可以在项目中使用Dagger2了，这里举的例子是基于我上篇mvp文章的基础上的，还没看上一篇文章的可以先去看看—— <a href="https://wildma.github.io/mvc-mvp/">带你通俗易懂的理解——Android中的MVC与MVP</a>。该Demo中V层中的Activity如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserInfoActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token keyword">implements</span> <span class="token class-name">UserInfoView</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> TextView    mTvName<span class="token punctuation">;</span>    <span class="token keyword">private</span> ProgressBar mPbLoading<span class="token punctuation">;</span>    UserInfoPresenter mUserInfoPresenter<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//find view</span>        mTvName <span class="token operator">=</span> <span class="token punctuation">(</span>TextView<span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>tv_name<span class="token punctuation">)</span><span class="token punctuation">;</span>        mPbLoading <span class="token operator">=</span> <span class="token punctuation">(</span>ProgressBar<span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>pb_loading<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//init</span>        mUserInfoPresenter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserInfoPresenter</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也就是Activity中使用new的方式实例化Presenter，这样就导致V层与P层耦合了，所以下面我就使用Dagger2将它们解耦。</p><p>先看看几个注解的概念：</p><ul><li><p>Module：在这里实例化目标类（例子中就是UserInfoActivity类）需要依赖的对象。</p></li><li><p>Provides：标注一个方法，该方法是用来提供实例化对象给目标类的。</p></li><li><p>Inject：标注实例化对象</p></li><li><p>Component：作为Module与目标类之间的桥梁。</p></li></ul><p>使用步骤：<br>（1）创建带有@Module注解的类，并利用@Provides标注一个方法用来提供实例化对象给目标类。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Module</span> <span class="token comment" spellcheck="true">//实例化目标类需要依赖的对象</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserInfoActivityModule</span> <span class="token punctuation">{</span>    UserInfoActivity mActivity<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">UserInfoActivityModule</span><span class="token punctuation">(</span>UserInfoActivity activity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mActivity <span class="token operator">=</span> activity<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Provides</span> <span class="token comment" spellcheck="true">//该方法是用来提供实例化对象给目标类的</span>    UserInfoPresenter <span class="token function">provideUserInfoPresenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">UserInfoPresenter</span><span class="token punctuation">(</span>mActivity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（2）创建带有@Component的接口，将它作为Module与目标类之间的桥梁。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span>modules <span class="token operator">=</span> UserInfoActivityModule<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//作为Module与目标类之间的桥梁</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserInfoActivityComponent</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 定义注入的方法     * @param activity     */</span>    <span class="token keyword">void</span> <span class="token function">inject</span><span class="token punctuation">(</span>UserInfoActivity activity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（3）标注实例化对象，并将Module与目标类联系起来。<br>注意：DaggerUserInfoActivityComponent是Rebuild项目后根据定义的Component的类名自动生成的，所以这里先要Rebuild一下项目再使用。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserInfoActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token keyword">implements</span> <span class="token class-name">UserInfoView</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Inject</span> <span class="token comment" spellcheck="true">//标注实例化对象</span>    UserInfoPresenter mUserInfoPresenter<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token comment" spellcheck="true">//将Module与目标类联系起来</span>        DaggerUserInfoActivityComponent                <span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">userInfoActivityModule</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UserInfoActivityModule</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">inject</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过上面的三步其实就只实现了UserInfoActivityModule = new UserInfoActivityModule(this)，看起来是复杂了许多，但是它非常完美的解决了mvp模式中存在的V层与P层之间的耦合。就好比使用mvp比使用mvc多了很多代码，但大家还是会使用mvp模式一样的道理。</p><p>Demo地址：<a href="https://github.com/wildma/MVP-Pattern" target="_blank" rel="noopener">MVP-Pattern</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dagger2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>带你通俗易懂的理解——Android 中的 MVC 与 MVP</title>
      <link href="/blog/81ad7a6.html"/>
      <url>/blog/81ad7a6.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>首先介绍一下所谓的MVP，美国职业篮球联赛最有价值球员奖（National Basketball Association Most Valuable Player Award ，简称MVP）是一个自1955-1956赛季以来每年对美国职业篮球联赛（NBA）常规赛中全场表现最佳的球员所颁发的一个奖项。<br><img src="81ad7a6/1.jpg" alt></p><p>哎呀！不好意思，讲错了！<br>言归正传，作为一个Android攻城狮（虽然也是一位篮球爱好者），这里要介绍的MVP当然是一种软件设计模式啦！下面进入正题！</p><h2 id="一、MVC"><a href="#一、MVC" class="headerlink" title="一、MVC"></a>一、MVC</h2><ul><li><p><strong>概念</strong>：MVC全称为Model-View-Controller，也就是 模型-视图-控制器。是最常见的一种软件设计模式。<br>Model：对应Android中的数据实体模型、数据访问接口、数据库操作等，用于存取数据和处理业务逻辑。<br>View：对应Android中的布局文件，用来展示UI。<br>Controller：对应Android中的Activity、Fragment等，用于更新UI界面与数据。</p></li><li><p><strong>它们之间的关系图如下</strong>：<br><img src="81ad7a6/2.jpg" alt></p></li></ul><p>MVC的工作原理是用户在View层触发事件，Controller层接收到View层的事件后就会更新Model层数据，Model层数据改变后就通知Controller层更新UI。（View层也可以直接更新Model层的数据）</p><p>从MVC的关系图与工作原理可知，View层一般只能显示静态的布局，例如想动态的去隐藏或者显示某个UI都要Activity去操作，而Activity是属于Controller层的，这样就造成了Activity既像View又像Controller，而且View层和Model层是相互耦合的。所以我们在使用MVC写比较复杂的界面的时候，Activity中上千行代码是常有的事。随之带来的就是测试与维护的困难。当你入职新公司接手一个这样的MVC项目就能体会到这种痛苦了。所以也就有了之后的MVP、MVVM。</p><h2 id="二、MVP"><a href="#二、MVP" class="headerlink" title="二、MVP"></a>二、MVP</h2><ul><li><p><strong>概念</strong>：MVP全称为Model-View-Presenter，也就是 模型-视图-表示器。是MVC模式的演化版。<br>Model：与MVC一样，对应Android中的数据实体模型、数据访问接口、数据库操作等，用于存取数据和处理业务逻辑。<br>View：对应Android中的Activity、Fragment等，用来展示UI、与用户进行交互。<br>Presenter：充当Model和View之间的桥梁，负责它们之间的交互。</p></li><li><p><strong>它们之间的关系图如下</strong>：<br><img src="81ad7a6/3.jpg" alt></p></li></ul><p>由上图可以明显的看到Model与View之间的交互由Presenter完成，即View与Model是完全解耦的。而View与Presenter的交互也不是直接交互的，而是通过接口来完成。随之带来的好处：</p><ul><li>解耦了Model与View，简化了Activity中的代码，方便维护。</li><li>将复杂的逻辑代码提取到了Presenter中，方便单元测试。</li></ul><h2 id="三、实践出真理"><a href="#三、实践出真理" class="headerlink" title="三、实践出真理"></a>三、实践出真理</h2><p>好了，说了这么多，相信大部分人还是一脸懵逼！那就让我来举个例子吧！保证能让你通俗易懂的理解MVC与MVP。<br><img src="81ad7a6/4.jpg" alt></p><p>举得例子非常简单，主要为了让大家更容易理解。<br>点击按钮，发起网络请求获取用户信息，然后直接显示在界面。效果图如下：<br><img src="81ad7a6/5.gif" alt></p><h3 id="3-1-MVC-代码实现"><a href="#3-1-MVC-代码实现" class="headerlink" title="3.1 MVC 代码实现"></a>3.1 MVC 代码实现</h3><p>工程结构图如下：<br><img src="81ad7a6/6.png" alt></p><h4 id="3-1-1-Model层"><a href="#3-1-1-Model层" class="headerlink" title="3.1.1 Model层"></a>3.1.1 Model层</h4><ul><li><p><strong>UserInfobean：</strong> 数据实体模型，也就是网络请求回来的数据存储到这里。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserInfobean</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> String name<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//用户昵称</span>  <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> name<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>RequestBiz：</strong> 请求业务接口，里面只有一个请求数据的方法。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">RequestBiz</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/**   * 请求数据   *   * @param listener 成功或失败的回调接口   */</span>  <span class="token keyword">void</span> <span class="token function">requestData</span><span class="token punctuation">(</span>OnRequestListener listener<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>RequestBizIml：</strong> 请求业务接口的实现类，里面业务主要是开启子线程休眠2秒来模拟网络请求，请求成功后填充数据到UserInfobean，并通过接口将成功或失败回调出去。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RequestBizIml</span> <span class="token keyword">implements</span> <span class="token class-name">RequestBiz</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">requestData</span><span class="token punctuation">(</span><span class="token keyword">final</span> OnRequestListener listener<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/**       * 开启子线程休眠2秒来模拟网络请求，请求成功后填充数据到UserInfobean，并通过接口将成功或失败回调出去       */</span>      <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token annotation punctuation">@Override</span>          <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">try</span> <span class="token punctuation">{</span>                  Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  UserInfobean userInfobean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserInfobean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  userInfobean<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"wildma"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token keyword">boolean</span> isRequestSuccess <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//模拟请求是否成功</span>                  <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">!=</span> listener<span class="token punctuation">)</span> <span class="token punctuation">{</span>                      <span class="token keyword">if</span> <span class="token punctuation">(</span>isRequestSuccess<span class="token punctuation">)</span> <span class="token punctuation">{</span>                          listener<span class="token punctuation">.</span><span class="token function">onSuccess</span><span class="token punctuation">(</span>userInfobean<span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                          listener<span class="token punctuation">.</span><span class="token function">onFailed</span><span class="token punctuation">(</span><span class="token string">"服务器繁忙，请稍后再试！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token punctuation">}</span>                  <span class="token punctuation">}</span>              <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>OnRequestListener：</strong> 请求成功或失败的回调接口。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">OnRequestListener</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/**   * 请求成功回调   *   * @param data 服务器返回的数据   */</span>  <span class="token keyword">void</span> <span class="token function">onSuccess</span><span class="token punctuation">(</span>Object data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/**   * 请求失败回调   *   * @param failReason 失败原因   */</span>  <span class="token keyword">void</span> <span class="token function">onFailed</span><span class="token punctuation">(</span>String failReason<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="3-1-2-View层"><a href="#3-1-2-View层" class="headerlink" title="3.1.2 View层"></a>3.1.2 View层</h4><p>就是布局文件activity_main，很简单，一个Button用来获取网络数据，一个TextView用来显示数据，一个ProgressBar是加载等待圈。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span>RelativeLayout    android<span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">"@+id/activity_main"</span>    xmlns<span class="token operator">:</span>android<span class="token operator">=</span><span class="token string">"http://schemas.android.com/apk/res/android"</span>    xmlns<span class="token operator">:</span>tools<span class="token operator">=</span><span class="token string">"http://schemas.android.com/tools"</span>    android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"match_parent"</span>    android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"match_parent"</span>    android<span class="token operator">:</span>paddingBottom<span class="token operator">=</span><span class="token string">"@dimen/activity_vertical_margin"</span>    android<span class="token operator">:</span>paddingLeft<span class="token operator">=</span><span class="token string">"@dimen/activity_horizontal_margin"</span>    android<span class="token operator">:</span>paddingRight<span class="token operator">=</span><span class="token string">"@dimen/activity_horizontal_margin"</span>    android<span class="token operator">:</span>paddingTop<span class="token operator">=</span><span class="token string">"@dimen/activity_vertical_margin"</span>    tools<span class="token operator">:</span>context<span class="token operator">=</span><span class="token string">"com.wildma.mvc.UserInfoActivity"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>Button        android<span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">"@+id/btn_get_data"</span>        android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"match_parent"</span>        android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"wrap_content"</span>        android<span class="token operator">:</span>layout_centerHorizontal<span class="token operator">=</span><span class="token string">"true"</span>        android<span class="token operator">:</span>onClick<span class="token operator">=</span><span class="token string">"getData"</span>        android<span class="token operator">:</span>text<span class="token operator">=</span><span class="token string">"模拟网络请求数据"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>TextView        android<span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">"@+id/tv_name"</span>        android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"wrap_content"</span>        android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"wrap_content"</span>        android<span class="token operator">:</span>layout_below<span class="token operator">=</span><span class="token string">"@id/btn_get_data"</span>        android<span class="token operator">:</span>layout_centerHorizontal<span class="token operator">=</span><span class="token string">"true"</span>        android<span class="token operator">:</span>layout_marginTop<span class="token operator">=</span><span class="token string">"12dp"</span>        android<span class="token operator">:</span>text<span class="token operator">=</span><span class="token string">"我的昵称是："</span>        android<span class="token operator">:</span>textSize<span class="token operator">=</span><span class="token string">"25sp"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>ProgressBar        android<span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">"@+id/pb_loading"</span>        android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"60dp"</span>        android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"60dp"</span>        android<span class="token operator">:</span>layout_centerInParent<span class="token operator">=</span><span class="token string">"true"</span>        android<span class="token operator">:</span>visibility<span class="token operator">=</span><span class="token string">"gone"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>RelativeLayout<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-1-3-Controller层"><a href="#3-1-3-Controller层" class="headerlink" title="3.1.3 Controller层"></a>3.1.3 Controller层</h4><p>Controller层对应UserInfoActivity，也是非常简单，主要是界面的初始化，点击按钮请求数据，请求到数据后更新界面。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserInfoActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> TextView      mTvName<span class="token punctuation">;</span>    <span class="token keyword">private</span> RequestBizIml mRequestBizIml<span class="token punctuation">;</span>    <span class="token keyword">private</span> ProgressBar   mPbLoading<span class="token punctuation">;</span>    <span class="token keyword">private</span> Handler       mHandler<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//find view</span>        mTvName <span class="token operator">=</span> <span class="token punctuation">(</span>TextView<span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>tv_name<span class="token punctuation">)</span><span class="token punctuation">;</span>        mPbLoading <span class="token operator">=</span> <span class="token punctuation">(</span>ProgressBar<span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>pb_loading<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//init</span>        mHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mRequestBizIml <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RequestBizIml</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取数据按钮点击事件     *     * @param view     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getData</span><span class="token punctuation">(</span>View view<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">requestData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 请求数据     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">requestData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        mPbLoading<span class="token punctuation">.</span><span class="token function">setVisibility</span><span class="token punctuation">(</span>View<span class="token punctuation">.</span>VISIBLE<span class="token punctuation">)</span><span class="token punctuation">;</span>        mRequestBizIml<span class="token punctuation">.</span><span class="token function">requestData</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OnRequestListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onSuccess</span><span class="token punctuation">(</span><span class="token keyword">final</span> Object data<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//因为请求开启了子线程，所以这里需要用UI线程去更新界面</span>                mHandler<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        mPbLoading<span class="token punctuation">.</span><span class="token function">setVisibility</span><span class="token punctuation">(</span>View<span class="token punctuation">.</span>GONE<span class="token punctuation">)</span><span class="token punctuation">;</span>                        UserInfobean userInfobean <span class="token operator">=</span> <span class="token punctuation">(</span>UserInfobean<span class="token punctuation">)</span> data<span class="token punctuation">;</span>                        mTvName<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"我的昵称是："</span> <span class="token operator">+</span> userInfobean<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onFailed</span><span class="token punctuation">(</span><span class="token keyword">final</span> String failReason<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//因为请求开启了子线程，所以这里需要用UI线程去更新界面</span>                mHandler<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        mPbLoading<span class="token punctuation">.</span><span class="token function">setVisibility</span><span class="token punctuation">(</span>View<span class="token punctuation">.</span>GONE<span class="token punctuation">)</span><span class="token punctuation">;</span>                        Toast<span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span><span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> failReason<span class="token punctuation">,</span> Toast<span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看完MVC的代码，相信你也发现了，ProgressBar的隐藏与显示，TextView显示用户的昵称这些逻辑其实都是属于View层的，但是都写在了Activity里面了，这就像我在前面说的Activity既像View又像Controller。复杂点的界面就造成Activity过于臃肿。</p><h3 id="3-2-MVP-代码实现"><a href="#3-2-MVP-代码实现" class="headerlink" title="3.2 MVP 代码实现"></a>3.2 MVP 代码实现</h3><p>工程结构图如下：<br><img src="81ad7a6/7.png" alt></p><p>由结构图可知MVP就比MVC多了UserInfoPresenter与UserInfoView。</p><h4 id="3-2-1-Model层"><a href="#3-2-1-Model层" class="headerlink" title="3.2.1 Model层"></a>3.2.1 Model层</h4><p>前面说了，MVP中的Model层与MVC是一样的。所以代码也是一样的。这里就不列出来了，可以看上面的。</p><h4 id="3-2-2-View层"><a href="#3-2-2-View层" class="headerlink" title="3.2.2 View层"></a>3.2.2 View层</h4><p>MVP中的VIew层对应UserInfoActivity，但它不是直接与Presenter交互的，他们之间的交互是通过接口来实现的。所以这里需要先写一个接口，然后再让UserInfoActivity实现该接口。</p><ul><li><p><strong>UserInfoView：</strong> UserInfoActivity需要实现的接口，在这个接口我们就要定义UserInfoActivity需要实现的方法，分析UI图可知，我们这里需要如下几个方法：<br>showLoading：显示加载圈<br>hideLoading：隐藏加载圈<br>showName：显示昵称<br>showFailReason：显示失败原因<br>完整代码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserInfoView</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/**   * 显示加载圈   */</span>  <span class="token keyword">void</span> <span class="token function">showLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/**   * 隐藏加载圈   */</span>  <span class="token keyword">void</span> <span class="token function">hideLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/**   * 显示昵称   *   * @param name 昵称   */</span>  <span class="token keyword">void</span> <span class="token function">showName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/**   * 显示失败原因   *   * @param failReason 失败原因   */</span>  <span class="token keyword">void</span> <span class="token function">showFailReason</span><span class="token punctuation">(</span>String failReason<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>UserInfoActivity：</strong> UserInfoView的实现类，主要就是实现UserInfoView的方法做出相应的UI变化。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserInfoActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token keyword">implements</span> <span class="token class-name">UserInfoView</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> TextView          mTvName<span class="token punctuation">;</span>  <span class="token keyword">private</span> ProgressBar       mPbLoading<span class="token punctuation">;</span>  <span class="token keyword">private</span> UserInfoPresenter mUserInfoPresenter<span class="token punctuation">;</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//find view</span>      mTvName <span class="token operator">=</span> <span class="token punctuation">(</span>TextView<span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>tv_name<span class="token punctuation">)</span><span class="token punctuation">;</span>      mPbLoading <span class="token operator">=</span> <span class="token punctuation">(</span>ProgressBar<span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>pb_loading<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//init</span>      mUserInfoPresenter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserInfoPresenter</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * 获取数据按钮点击事件   *   * @param view   */</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getData</span><span class="token punctuation">(</span>View view<span class="token punctuation">)</span> <span class="token punctuation">{</span>      mUserInfoPresenter<span class="token punctuation">.</span><span class="token function">requestData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      mPbLoading<span class="token punctuation">.</span><span class="token function">setVisibility</span><span class="token punctuation">(</span>View<span class="token punctuation">.</span>VISIBLE<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hideLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      mPbLoading<span class="token punctuation">.</span><span class="token function">setVisibility</span><span class="token punctuation">(</span>View<span class="token punctuation">.</span>GONE<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>      mTvName<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showFailReason</span><span class="token punctuation">(</span>String failReason<span class="token punctuation">)</span> <span class="token punctuation">{</span>      Toast<span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span><span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> failReason<span class="token punctuation">,</span> Toast<span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，整个UserInfoActivity都没有涉及到Model层，而是通过UserInfoPresenter来间接交互。</p></li></ul><h4 id="3-2-3-Presenter层"><a href="#3-2-3-Presenter层" class="headerlink" title="3.2.3 Presenter层"></a>3.2.3 Presenter层</h4><ul><li><p><strong>UserInfoPresenter：</strong> UserInfoPresenter里的代码也就是MVC中Activity涉及到Model层相关的逻辑代码。因为Presenter充当Model和View之间的桥梁，所以需要在合适的时机调用UserInfoView接口对应的方法。又由于我们的Activity实现了这个接口，所以在UserInfoPresenter中调用UserInfoView中方法的同时，Activity中对应的方法也会执行。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserInfoPresenter</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> UserInfoView mUserInfoView<span class="token punctuation">;</span>  <span class="token keyword">private</span> RequestBiz   requestBiz<span class="token punctuation">;</span>  <span class="token keyword">private</span> Handler      mHandler<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token function">UserInfoPresenter</span><span class="token punctuation">(</span>UserInfoView userInfoView<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>mUserInfoView <span class="token operator">=</span> userInfoView<span class="token punctuation">;</span>      requestBiz <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RequestBizIml</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      mHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Handler</span><span class="token punctuation">(</span>Looper<span class="token punctuation">.</span><span class="token function">getMainLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * 请求数据   */</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">requestData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      mUserInfoView<span class="token punctuation">.</span><span class="token function">showLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      requestBiz<span class="token punctuation">.</span><span class="token function">requestData</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OnRequestListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token annotation punctuation">@Override</span>          <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onSuccess</span><span class="token punctuation">(</span><span class="token keyword">final</span> Object data<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">//因为请求开启了子线程，所以这里需要用UI线程去更新界面</span>              mHandler<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token annotation punctuation">@Override</span>                  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                      mUserInfoView<span class="token punctuation">.</span><span class="token function">hideLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      UserInfobean userInfobean <span class="token operator">=</span> <span class="token punctuation">(</span>UserInfobean<span class="token punctuation">)</span> data<span class="token punctuation">;</span>                      mUserInfoView<span class="token punctuation">.</span><span class="token function">showName</span><span class="token punctuation">(</span><span class="token string">"我的昵称是："</span> <span class="token operator">+</span> userInfobean<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span>              <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token annotation punctuation">@Override</span>          <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onFailed</span><span class="token punctuation">(</span><span class="token keyword">final</span> String failReason<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">//因为请求开启了子线程，所以这里需要用UI线程去更新界面</span>              mHandler<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token annotation punctuation">@Override</span>                  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                      mUserInfoView<span class="token punctuation">.</span><span class="token function">hideLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      mUserInfoView<span class="token punctuation">.</span><span class="token function">showFailReason</span><span class="token punctuation">(</span>failReason<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span>              <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>看了MVP的代码，是不是觉得Activity特别简洁明了！整个Activity没有任何地方涉及到Model层相关的代码，这样就达到了Model与View层解耦的目的。而且将复杂的逻辑代码提取到了Presenter中，方便进行单元测试。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>OK，MVC与MVP的讲解就到这里，看完上面的讲解能让你恍然大悟的请在文章下面点个赞，还是一脸懵逼的。。。不要来打我！再看多一遍呗~</p><p>Demo地址：<a href="https://github.com/wildma/MVP-Pattern" target="_blank" rel="noopener">MVP-Pattern</a></p><p>参考资料：<br><a href="http://konmik.com/post/introduction_to_model_view_presenter_on_android/" target="_blank" rel="noopener">http://konmik.com/post/introduction_to_model_view_presenter_on_android/</a><br><a href="http://blog.csdn.net/lmj623565791/article/details/46596109" target="_blank" rel="noopener">http://blog.csdn.net/lmj623565791/article/details/46596109</a><br><a href="http://www.jianshu.com/p/9a6845b26856" target="_blank" rel="noopener">http://www.jianshu.com/p/9a6845b26856</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> MVC </tag>
            
            <tag> MVP </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
